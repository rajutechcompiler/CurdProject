function LoadAzureADTabData() {    $.ajax({        url: urls.Security.LoadSecurityAzureADView,        contentType: 'application/html; charset=utf-8',        type: 'GET',        dataType: 'html'    }).done(function (result) {        $('#LoadTabContent').empty();        $('#LoadTabContent').html(result);        $('#btnSaveAzureAD').prop('disabled', true);        $('#chkAzureADEnabled').on('change', function () {            var hdnIsADEnabled = $("#hdnIsADEnabled").val().toLowerCase();            var chkAzureADEnabled = $("#chkAzureADEnabled").is(":checked") ? 'true' : 'false';            if (hdnIsADEnabled !== chkAzureADEnabled) {                $('#btnSaveAzureAD').prop('disabled', false);            }            else                $('#btnSaveAzureAD').prop('disabled', true);            if (chkAzureADEnabled === "true") {                $("#divadDefaultUser").css("display", "block");                var AzureADAdminUserName = $("#AzureADAdminUserName").val().trim();                if (AzureADAdminUserName.length > 0)                    $("#divGroupMapping").css("display", "block");            }            else {                $("#divadDefaultUser").css("display", "none");                $("#divGroupMapping").css("display", "none");            }        });        $('#btnSaveAzureAD').on('click', function () {            var FusionGroupId = $("#ddlFusionRMSRolesForAdminUser").val();            var AzureADAdminUserName = $("#AzureADAdminUserName").val().trim();            var chkAzureADEnabled = $("#chkAzureADEnabled").is(":checked") ? true : false;            if (chkAzureADEnabled === true) {                if (!validateAzureADAdminConfiguration())                    return false;            }            var data = { azureAdAdminUser: AzureADAdminUserName, fusionGroupId: FusionGroupId,  isAdEnabled: chkAzureADEnabled};            $(this).confirmModal({                confirmTitle: vrSecurityRes['tiJsConfirmAzureConfSave'],                confirmMessage: vrSecurityRes['msgJsConfirmAzureConfSave'],                confirmOk: vrCommonRes['Yes'],                confirmCancel: vrCommonRes['No'],                confirmStyle: 'default',                confirmObject: data,                confirmCallback: ConfirmSaveAzureAdmin            });        });        $('#btnAddMapping').on('click', function () {            let fusionRMSGroupId = $("#ddlFusionRMSRoles").val();            let adGroupName = $("#ddlAzureADGroups").val();            if (fusionRMSGroupId.length <= 0) {                showAjaxReturnMessage(vrSecurityRes['msgAddMappingFusionGroupSelect'], "w");                return false;            }            if (adGroupName <= 0) {                showAjaxReturnMessage(vrSecurityRes['msgAddMappingAzureADGroupSelect'], "w");                return false;            }            $.post(urls.Security.SaveGroupMapping, $.param({ fusionRMSGroupId: fusionRMSGroupId, adGroupName: adGroupName }, true), function (data) {                if (data.errortype === "s") {                    refreshMappingGroupList(data.mappedgroups);                }                                    showAjaxReturnMessage(data.message, data.errortype);            });        });        $('#btnSyncronize').on('click', function () {            $(this).confirmModal({                confirmTitle: vrSecurityRes['tiJsConfirmAzureUserSync'],                confirmMessage: vrSecurityRes['msgJsConfirmAzureUserSync'],                confirmOk: vrCommonRes['Yes'],                confirmCancel: vrCommonRes['No'],                confirmStyle: 'default',                confirmCallback: ConfirmSyncronizeUsers            });        });        $('#btnDeleteMapping').on('click', function () {            $(this).confirmModal({                confirmTitle: vrSecurityRes['tiJsConfirmAzureGroupMappingDelete'],                confirmMessage: vrSecurityRes['msgJsConfirmAzureGroupMappingDelete'],                confirmOk: vrCommonRes['Yes'],                confirmCancel: vrCommonRes['No'],                confirmStyle: 'default',                confirmCallback: ConfirmDeleteGroupMapping            });        });    }).fail(function (xhr, status) {            ShowErrorMessge();        });}function refreshMappingGroupList(data) {    $('#ddlMappedAdToFusionGroups').empty();    $.each(data, function (i, item) {        $('#ddlMappedAdToFusionGroups').append("<option value='" + item.GroupID + "'>" + item.GroupName + "</option>");    });}function validateAzureADAdminConfiguration() {    var AzureADAdminUserName = $("#AzureADAdminUserName").val().trim();    if (AzureADAdminUserName === "") {        showAjaxReturnMessage(vrSecurityRes["msgJsAzureAdminUserRequired"], "w");        return false;    } else {        if (!isEmail(AzureADAdminUserName.trim()))            showAjaxReturnMessage(vrSecurityRes["msgJsSTEnterValidEmailID"], "w");    }    if ($("#ddlFusionRMSRolesForAdminUser").val() === "") {        showAjaxReturnMessage(vrSecurityRes["msgJsAddMappingFusionGroupSelect"], "w");        return false;    }    return true;}function ConfirmSaveAzureAdmin(objData) {    $.post(urls.Security.SetAzureAdmin, objData, function (data) {        showAjaxReturnMessage(data.message, data.errortype);        if (data.errortype === "s") {            //refreshMappingGroupList(data.mappedgroups);            if (objData.isAdEnabled) {                window.location.href = '/logout.aspx';            }        }    });}function ConfirmDeleteGroupMapping() {    let fusionRMSGroupId = $("#ddlMappedAdToFusionGroups").val();    $.post(urls.Security.DeleteGroupMapping, $.param({ fusionRMSGroupId: fusionRMSGroupId }, true), function (data) {        if (data.errortype === "s") {            refreshMappingGroupList(data.mappedgroups);        }        showAjaxReturnMessage(data.message, data.errortype);    });}function ConfirmSyncronizeUsers() {    $.post(urls.Security.SynchronizeGroups, function (data) {        showAjaxReturnMessage(data.message, data.errortype);    });}function isEmail(email) {    var regex = /^([a-zA-Z0-9_.+-])+\@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/;    return regex.test(email);}