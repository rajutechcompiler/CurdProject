<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Leadtools.WinForms</name>
    </assembly>
    <members>
        <member name="T:Leadtools.WinForms.RasterClipboardCopyFlags">
            <summary>
            Flags for <see cref="M:Leadtools.WinForms.RasterClipboard.Copy(System.Windows.Forms.IWin32Window,Leadtools.IRasterImage,Leadtools.WinForms.RasterClipboardCopyFlags)"/>
            </summary>
            <remarks>
            Indicates how image data is placed on the clipboard. You can use a bitwise OR ( | ) to pass more than one value.
            </remarks>
        </member>
        <member name="F:Leadtools.WinForms.RasterClipboardCopyFlags.None">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterClipboardCopyFlags.Empty">
            <summary>
            Empty the clipboard before copying data to it.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterClipboardCopyFlags.Dib">
            <summary>
            Copy DIB data to the clipboard.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterClipboardCopyFlags.Bitmap">
            <summary>
            Copy DDB data data to the clipboard.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterClipboardCopyFlags.Palette">
            <summary>
            Copy palette data to the clipboard.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterClipboardCopyFlags.Region">
            <summary>
            Copy the image's region to the clipboard.
            </summary>
        </member>
        <member name="T:Leadtools.WinForms.RasterClipboard">
            <summary>
            The <see cref="T:Leadtools.WinForms.RasterClipboard"/> class provides methods for working with image data and the Windows clipboard.
            </summary>
            <remarks>
            <p>The <see cref="T:Leadtools.WinForms.RasterClipboard"/> class contains the <see cref="M:Leadtools.WinForms.RasterClipboard.Copy(System.Windows.Forms.IWin32Window,Leadtools.IRasterImage,Leadtools.WinForms.RasterClipboardCopyFlags)"/> method that lets you copy
            the image data of an <see cref="T:Leadtools.IRasterImage"/> to the clipboard.  The <see cref="M:Leadtools.WinForms.RasterClipboard.Copy(System.Windows.Forms.IWin32Window,Leadtools.IRasterImage,Leadtools.WinForms.RasterClipboardCopyFlags)"/> also lets
            you copy region data or the palette of the <see cref="T:Leadtools.IRasterImage"/> through the use of
            <see cref="T:Leadtools.WinForms.RasterClipboardCopyFlags"/>.</p>
            <p>The <see cref="M:Leadtools.WinForms.RasterClipboard.Paste(System.Windows.Forms.IWin32Window)"/> method lets you create an <see cref="T:Leadtools.IRasterImage"/> from the data
            currently in the Windows clipboard.</p>
            <p>You can use the <see cref="P:Leadtools.WinForms.RasterClipboard.IsReady"/> property to check if any compatible data is currently
            in the Windows clipboard.  You can use this property to update the user interface of your application by
            enabling/disabling the Paste menu item for example.</p>
            <p>You must call the <see cref="M:Leadtools.WinForms.RasterClipboard.RegisterFormats"/> before you can use any of the other
            <see cref="T:Leadtools.WinForms.RasterClipboard"/> method and properties.</p>
            <p><b>Note:</b> since the <see cref="T:Leadtools.IRasterImage"/> implements standard .NET serialization, you can use the
            .NET <see cref="T:System.Windows.Forms.Clipboard"/> class to use the Windows clipboard.  For more information and an example, refer to
            <a href="RasterImageSerialization.html">RasterImage Serialization</a>.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterClipboard.RegisterFormats">
            <summary>
            Registers the Leadtools data formats for clipboard support.
            </summary>
            <remarks>You must call this function before using the <see cref="M:Leadtools.WinForms.RasterClipboard.Copy(System.Windows.Forms.IWin32Window,Leadtools.IRasterImage,Leadtools.WinForms.RasterClipboardCopyFlags)"/> method to copy images to the clipboard.</remarks>
            <example>Refer to <see cref="M:Leadtools.WinForms.RasterClipboard.Copy(System.Windows.Forms.IWin32Window,Leadtools.IRasterImage,Leadtools.WinForms.RasterClipboardCopyFlags)"/>.</example>
        </member>
        <member name="M:Leadtools.WinForms.RasterClipboard.Paste(System.Windows.Forms.IWin32Window)">
            <summary>
            Copies image data from the clipboard.
            </summary>
            <param name="owner"></param>
            <returns>A reference to a new IRasterImage object created using the data in the Windows clipboard.</returns>
            <remarks>
            The image on the clipboard must be a DIB, DDB, or a WMF.<br/>
            The image will contain the same <see cref="P:Leadtools.IRasterImage.Width"/>, <see cref="P:Leadtools.IRasterImage.Height"/>, and <see cref="P:Leadtools.IRasterImage.BitsPerPixel"/> as the image contained in the clipboard.<br/>
            The <see cref="P:Leadtools.IRasterImage.Order"/> will be set to <see cref="F:Leadtools.RasterByteOrder.Bgr"/>. If the copied image is not in <b>Bgr</b> 
            order, it is up to you to change its color <b>Order</b> using <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand"/>.<br/>
            To determine whether a region was pasted, use <see cref="P:Leadtools.IRasterImage.HasRegion"/>.
            </remarks>
            <example>
            <para><b>VB.NET</b></para>
            <code>
            ' This example loads a bitmap using clipboard data, if available
            Private Function PasteImage(ByRef image As IRasterImage) As Boolean
               If (RasterClipboard.IsReady) Then
                  ' Copy the bitmap from the clipboard 
                  image = RasterClipboard.Paste(Me)
                  Return True
               Else
                  Return False
               End If
            End Function
            </code>
            <para><b>C#</b></para>
            <code>
            /* This example loads a bitmap using clipboard data, if available */
            private bool PasteImage ( ref IRasterImage image )
            {
               if ( RasterClipboard.IsReady )
               {
                  /* Copy the bitmap from the clipboard */
                  image = RasterClipboard.Paste ( this );
                  return true;
               }
               else
               {
                  return false;
               }
            }
            </code>
            </example>
        </member>
        <member name="M:Leadtools.WinForms.RasterClipboard.Copy(System.Windows.Forms.IWin32Window,Leadtools.IRasterImage,Leadtools.WinForms.RasterClipboardCopyFlags)">
            <summary>
            Copies the RGB or raster image data from a specified image to the Windows clipboard.
            </summary>
            <param name="owner">Handle to the active window.</param>
            <param name="image">The image to be copied.</param>
            <param name="flags">Indicates how image data is placed on the clipboard.</param>
            <remarks>
            The clipboard will contain the same <see cref="P:Leadtools.IRasterImage.Width"/>, <see cref="P:Leadtools.IRasterImage.Height"/>, 
            <see cref="P:Leadtools.IRasterImage.BitsPerPixel"/>, and color <see cref="P:Leadtools.IRasterImage.Order"/> as the image.
            </remarks>
            <example>
            <para><b>VB.NET</b></para>
            <code>
               Imports Leadtools
               Imports Leadtools.WinForms
               Imports Leadtools.Codecs
            
               'This example loads a bitmap, copies only the DIB data to the clipboard, 
               'and deletes the original bitmap 
               Private Sub CopyToClipboard()
                   Dim codec As RasterCodecs = New RasterCodecs
            
                   ' Load a bitmap, keeping its own bits per pixel 
                   Dim image As IRasterImage = codec.Load("c:\image1.cmp")
                   ' Copy the bitmap to the clipboard 
                   RasterClipboard.RegisterFormats()
                   RasterClipboard.Copy(Me, image, RasterClipboardCopyFlags.Empty Or RasterClipboardCopyFlags.Dib)
                   ' Dispose the original bitmap, leaving the copy in the clipboard
                   image.Dispose()
               End Sub
            </code>
            <para><b>C#</b></para>
            <code>
              using Leadtools;
              using Leadtools.WinForms;
              using Leadtools.Codecs;
            
              /* This example loads a bitmap, copies only the DIB data to the clipboard, 
                 and deletes the original bitmap */
              private void CopyToClipboard ( )
              {
                 RasterCodecs codec = new RasterCodecs();
                 
                 /* Load a bitmap, keeping its own bits per pixel */
                 IRasterImage image = codec.Load(@"c:\image1.cmp");         
            
                 /* Copy the bitmap to the clipboard */
                 RasterClipboard.RegisterFormats();
                 RasterClipboard.Copy ( this, image, RasterClipboardCopyFlags.Empty | RasterClipboardCopyFlags.Dib );
                 /* Dispose the original bitmap, leaving the copy in the clipboard */
                 image.Dispose ( );
              }
            </code>
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterClipboard.IsReady">
            <summary>
            Determines whether the Windows clipboard contains an image that can be copied using <see cref="M:Leadtools.WinForms.RasterClipboard.Paste(System.Windows.Forms.IWin32Window)"/>.
            </summary>
            <value>true if the clipboard contains an image that can be copied, false otherwise.</value>
            <example>Refer to <see cref="M:Leadtools.WinForms.RasterClipboard.Paste(System.Windows.Forms.IWin32Window)"/>.</example>
        </member>
        <member name="T:Leadtools.WinForms.RasterImageListDrawItemEventArgs">
            <summary>
            Provides data for the <see cref="E:Leadtools.WinForms.RasterImageList.DrawItem">RasterImageList.DrawItem</see> event.
            </summary>
            <remarks>
            The <see cref="E:Leadtools.WinForms.RasterImageList.DrawItem">RasterImageList.DrawItem</see> event is raised when the
            <see cref="P:Leadtools.WinForms.RasterImageList.ViewStyle">RasterImageList.ViewStyle</see> value is set to
            <b>RasterImageListViewStyle.OwnerDraw</b>.  The <b>RasterImageListDrawItemEventArgs</b> provides the data
            necessary for you to draw the items manually.
            </remarks>
            <example>
            For an example, refer to <see cref="E:Leadtools.WinForms.RasterImageList.DrawItem">RasterImageList.DrawItem</see>.
            </example>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageListDrawItemEventArgs.#ctor(System.Drawing.Graphics,Leadtools.WinForms.RasterImageListItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Leadtools.WinForms.RasterImageListDrawItemEventArgs"/> class with the given values.
            </summary>
            <param name="g">The <see cref="P:Leadtools.WinForms.RasterImageListDrawItemEventArgs.Graphics"/> object into which the item should be drawn.</param>
            <param name="item">The <see cref="T:Leadtools.WinForms.RasterImageListItem"/> to draw.</param>
            <example>
            For an example, refer to <see cref="E:Leadtools.WinForms.RasterImageList.DrawItem">RasterImageList.DrawItem</see>.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageListDrawItemEventArgs.Graphics">
            <summary>
            The <see cref="P:Leadtools.WinForms.RasterImageListDrawItemEventArgs.Graphics"/> object into which the item should be drawn.
            </summary>
            <example>
            For an example, refer to <see cref="E:Leadtools.WinForms.RasterImageList.DrawItem">RasterImageList.DrawItem</see>.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageListDrawItemEventArgs.Item">
            <summary>
            The <see cref="T:Leadtools.WinForms.RasterImageListItem"/> to draw.
            </summary>
            <example>
            For an example, refer to <see cref="E:Leadtools.WinForms.RasterImageList.DrawItem">RasterImageList.DrawItem</see>.
            </example>
        </member>
        <member name="T:Leadtools.WinForms.RasterImageListDrawItemEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:Leadtools.WinForms.RasterImageList.DrawItem">RasterImageList.DrawItem</see> event.
            </summary>
            <parameters>
            The declaration of your event handler must have the same parameters as the
            <b>RasterImageListDrawItemEventHandler</b> delegate declaration.
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Leadtools.WinForms.RasterImageListDrawItemEventArgs"/> that contains the event data.</param>
            </parameters>
            <remarks>
            Use this delegate to handle the <see cref="E:Leadtools.WinForms.RasterImageList.DrawItem">RasterImageList.DrawItem</see> event.
            </remarks>
            <example>
            For an example, refer to <see cref="E:Leadtools.WinForms.RasterImageList.DrawItem">RasterImageList.DrawItem</see>.
            </example>
        </member>
        <member name="T:Leadtools.WinForms.RasterImageListSelectionMode">
            <summary>
            Values for the <see cref="P:Leadtools.WinForms.RasterImageList.SelectionMode">RasterImageList.SelectionMode</see> property.
            </summary>
            <remarks>
            Specifies whether or not automatic item selection is allowed.  If automatic item selection is enabled,
            items are automatically selected and de-selected when the user clicks on them using the mouse.
            </remarks>
            <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.SelectionMode">RasterImageList.SelectionMode</see>.
            </example>
        </member>
        <member name="F:Leadtools.WinForms.RasterImageListSelectionMode.None">
            <summary>
            Automatic selection is disabled, selection is manual
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterImageListSelectionMode.Single">
            <summary>
            Automatic selection of single items is enabled
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterImageListSelectionMode.Multi">
            <summary>
            Automatic selection of multiple items is enabled.  The user can select multiple items using the mouse and the
            CTRL and SHIFT keys.
            </summary>
        </member>
        <member name="T:Leadtools.WinForms.RasterImageListViewStyle">
            <summary>
            Values for the <see cref="P:Leadtools.WinForms.RasterImageList.ViewStyle">RasterImageList.ViewStyle</see> property.
            </summary>
            <remarks>
            For more information about item appearance, refer to <a href="RasterImageListAppearance.html">RasterImageList Appearance</a>.
            </remarks>
            <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.ViewStyle">RasterImageList.ViewStyle</see>.
            </example>
        </member>
        <member name="F:Leadtools.WinForms.RasterImageListViewStyle.Normal">
            <summary>
            Normal items.  For a visual representation, refer to <a href="RasterImageListAppearance.html">RasterImageList Appearance</a>.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterImageListViewStyle.Explorer">
            <summary>
            Use Windows Explorer style items.  For a visual representation, refer to <a href="RasterImageListAppearance.html">RasterImageList Appearance</a>.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterImageListViewStyle.Button">
            <summary>
            Use button style items.  For a visual representation, refer to <a href="RasterImageListAppearance.html">RasterImageList Appearance</a>.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterImageListViewStyle.OwnerDraw">
            <summary>
            The user is responsible for drawing the items.  For more information and example, refer to the
            <see cref="E:Leadtools.WinForms.RasterImageList.DrawItem">RasterImageList.DrawItem</see> event.
            </summary>
        </member>
        <member name="T:Leadtools.WinForms.RasterImageListScrollStyle">
            <summary>
            Values for the <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle">RasterImageList.ScrollStyle</see> property.
            </summary>
            <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle">RasterImageList.ScrollStyle</see>.
            </example>
        </member>
        <member name="F:Leadtools.WinForms.RasterImageListScrollStyle.Horizontal">
            <summary>
            The control has a horizontal scrollbar.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterImageListScrollStyle.Vertical">
            <summary>
            The control has a vertical scrollbar.
            </summary>
        </member>
        <member name="T:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags">
            <summary>
            Used in the <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)"/> to control how the
            <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser"/> loads the thumbnails.
            </summary>
            <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser"/>.
            </example>
        </member>
        <member name="F:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags.None">
            <summary>
            Default mode, the method will return immediatly and the thumbnails are loaded in a background thread.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags.Block">
            <summary>
            The method will not return until all thumbnails are loaded.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags.OnlyValidImageFiles">
            <summary>
            Only valid image files are loaded.  Any file that contains data not recognized by the
            <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.Codecs"/> object as a valid image file will not be loaded.
            </summary>
        </member>
        <member name="T:Leadtools.WinForms.RasterImageList">
            <summary>
            Represents an image list control, which displays a collection of items that can be displayed using one of the
            <see cref="T:Leadtools.WinForms.RasterImageListViewStyle"/> styles.
            </summary>
            <remarks>
            <p>The <b>RasterImageList</b> control lets you display and manipulate a list of images. The <b>RasterImageList</b> 
            control contains a list of items that can be used to view thumbnails of <see cref="T:Leadtools.IRasterImage"/> objects.</p>
            <p>A <b>RasterImageList</b> control allows you to display a list of items with text and an <see cref="T:Leadtools.IRasterImage"/>.
            For example, the Windows Explorer in <i>Thumbnails mode</i> is similar in appearance to a
            <b>RasterImageList</b> control. The <see cref="T:Leadtools.WinForms.RasterImageListItem"/> class represents an item within a
            <see cref="T:Leadtools.WinForms.RasterImageList"/> control. The items that are displayed in the list can be shown using one of the
            <see cref="T:Leadtools.WinForms.RasterImageListViewStyle"/> styles. <br/>
            <see cref="T:Leadtools.WinForms.RasterImageList"/> supports single or multiple item selection. The multiple selection
            feature lets the user select from a list of items in a way similar to a <see cref="T:System.Windows.Forms.ListBox"/> control.
            Additionally, the user can activate selected items to perform a task. For example, you could use a
            <see cref="T:Leadtools.WinForms.RasterImageList"/> control to display a list of files that the application can then open and utilize.
            The user can select the files to open and then double-click them to activate the items and open the files in the
            application.</p>
            <p><see cref="T:Leadtools.WinForms.RasterImageList"/> provides a large number of properties that provide flexibility in appearance and
            behavior. The <see cref="P:Leadtools.WinForms.RasterImageList.ViewStyle"/> property allows you to change the way in which items are
            displayed. Items are added and removed from the <see cref="T:Leadtools.WinForms.RasterImageList"/> through the
            <see cref="P:Leadtools.WinForms.RasterImageList.Items"/> property. The <see cref="P:Leadtools.WinForms.RasterImageList.Items"/> property allows you to
            access the <see cref="T:Leadtools.WinForms.RasterImageListItemCollection"/> of the control, which provides methods for manipulating
            the items in the control. When your control contains a large number of items, it is often easier for the user to
            see them in a sorted list. You can use the <see cref="P:Leadtools.WinForms.RasterImageList.Sorting"/> property to sort the items alphabetically.</p>
            <p>In addition to the many properties that are available for a <see cref="T:Leadtools.WinForms.RasterImageList"/> control, there are
            methods and events that your application can use to provide additional capabilities to the
            <see cref="T:Leadtools.WinForms.RasterImageList"/>. The <see cref="M:Leadtools.WinForms.RasterImageList.BeginUpdate"/> and
            <see cref="M:Leadtools.WinForms.RasterImageList.EndUpdate"/> methods allow you to add many items to a <see cref="T:Leadtools.WinForms.RasterImageList"/>
            without displaying the repainting of the control each time an item is added, thus improving performance. You you may want
            to provide functionality when the user right-clicks an item. To determine the item which is being clicked, you can
            use the <see cref="M:Leadtools.WinForms.RasterImageList.HitTest(System.Int32,System.Int32)"/> method or you can manually calculate what item is displayed in what position using the
            <see cref="M:Leadtools.WinForms.RasterImageList.GetItemRectangle(Leadtools.WinForms.RasterImageListItem)"/> method. Sometimes you want to display a specific item to the user to
            view. The <see cref="M:Leadtools.WinForms.RasterImageList.EnsureVisible(System.Int32)"/> method can be called to ensure that the specific item is in the visible area of
            the control.</p>
            <p>When the user changes the selected items with the keyboard or mouse, the control will fire the
            <see cref="E:Leadtools.WinForms.RasterImageList.SelectedIndexChanged"/> event.  You can then read the
            <see cref="P:Leadtools.WinForms.RasterImageList.SelectedItems"/> to get a list of the currently selected items.</p>
            <br/>
            <b>NOTE:</b> For automatic generation of thumbnails from files stored on your computer, see <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser"/>.
            </remarks>
            <example>
            This example assumes that you have added the code to a Form and call the method created in the example from the
            constructor or another method on the form.
            <p><b>VB.NET</b></p>
            <code>
            Imports Leadtools
            Imports Leadtools.Codecs
            Imports Leadtools.WinForms
            
            Private Sub CreateMyRasterImageList()
               ' Create a new RasterImageList control.
               Dim rasterImageList1 As New RasterImageList
               rasterImageList1.Bounds = New Rectangle(New Point(10, 10), New Size(300, 200))
            
               ' Sort the items in the list in ascending order.
               rasterImageList1.Sorting = SortOrder.Ascending
            
               ' Initialize the RasterCodecs class
               RasterCodecs.CodecsPath = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin"
               Dim codecs As New RasterCodecs
            
               ' Create three items
               Dim imagesPath As String = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\"
            
               For i As Integer = 0 To 2
                  ' Load the image
                  Dim index As Integer = i + 1
                  Dim imageFileName As String = imagesPath + "Image" + index.ToString() + ".cmp"
                  Dim image As IRasterImage = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
                  Dim item As New RasterImageListItem(image, 1, "Item" + index.ToString())
            
                  ' Select the first item
                  If (i = 0) Then
                     item.Selected = True
                  End If
            
                  ' Add the item to the image list
                  rasterImageList1.Items.Add(item)
               Next
            
               ' Add the RasterImageList to the control collection.
               Me.Controls.Add(rasterImageList1)
            End Sub
            </code>
            <p><b>C#</b></p>
            <code>
            using Leadtools;
            using Leadtools.Codecs;
            using Leadtools.WinForms;
            
            private void CreateMyRasterImageList()
            {
               // Create a new RasterImageList control.
               RasterImageList rasterImageList1 = new RasterImageList();
               rasterImageList1.Bounds = new Rectangle(new Point(10, 10), new Size(300, 200));
            
               // Sort the items in the list in ascending order.
               rasterImageList1.Sorting = SortOrder.Ascending;
            
               // Initialize the RasterCodecs class
               RasterCodecs.CodecsPath = @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin";
               RasterCodecs codecs = new RasterCodecs();
            
               // Create three items
               string imagesPath = @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\";
            
               for(int i = 0; i &lt; 3; i++)
               {
                  // Load the image
                  int index = i + 1;
                  string imageFileName = imagesPath + "Image" + index.ToString() + ".cmp";
                  IRasterImage image = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1);
                  RasterImageListItem item = new RasterImageListItem(image, 1, "Item" + index.ToString());
            
                  // Select the first item
                  if(i == 0)
                     item.Selected = true;
            
                  // Add the item to the image list
                  rasterImageList1.Items.Add(item);
               }
            
               // Add the RasterImageList to the control collection.
               this.Controls.Add(rasterImageList1);
            }
            </code>
            </example>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Leadtools.WinForms.RasterImageList"/> class.
            </summary>
            <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImageList"/>.
            </example>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.Dispose(System.Boolean)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)">Control.Dispose</see>.
            </summary>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.OnBorderStyleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.BorderStyleChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The <b>OnBorderStyleChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p><b>Notes to Inheritors:</b> When overriding <b>OnBorderStyleChanged</b> in a derived class, be sure to call
            the base class's <b>OnBorderStyleChanged</b> method so that registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.OnDoubleBufferChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.DoubleBufferChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The <b>OnDoubleBufferChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p><b>Notes to Inheritors:</b> When overriding <b>OnDoubleBufferChanged</b> in a derived class, be sure to call
            the base class's <b>OnDoubleBufferChanged</b> method so that registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.BeginUpdate">
            <summary>
            Prevents the control from drawing until the <see cref="M:Leadtools.WinForms.RasterImageList.EndUpdate"/> method is called.
            </summary>
            <remarks>
            The preferred way to add multiple items to a <see cref="T:Leadtools.WinForms.RasterImageList"/> is to use the
            <see cref="M:Leadtools.RasterCollection.AddRange(System.Collections.ICollection)"/> method of the <see cref="T:Leadtools.WinForms.RasterImageListItemCollection"/>
            (accessed through the <see cref="P:Leadtools.WinForms.RasterImageList.Items"/> property of the <see cref="T:Leadtools.WinForms.RasterImageList"/>). This enables you to
            add an array of items to the list in a single operation. However, if you want to add items one at a time using
            the <see cref="M:Leadtools.WinForms.RasterImageListItemCollection.Add(Leadtools.WinForms.RasterImageListItem)"/> method of the <see cref="T:Leadtools.WinForms.RasterImageListItemCollection"/>
            class, you can use the <b>BeginUpdate</b> method to prevent the control from repainting the
            <see cref="T:Leadtools.WinForms.RasterImageList"/> each time an item is added. Once you have completed the task of adding items to
            the control, call the <see cref="M:Leadtools.WinForms.RasterImageList.EndUpdate"/> method to enable the <see cref="T:Leadtools.WinForms.RasterImageList"/> to repaint.
            This way of adding items can prevent flickered drawing of the <see cref="T:Leadtools.WinForms.RasterImageList"/> when a large
            number of items are being added to the control.
            </remarks>
            <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageListItem.Image"/>.
            </example>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.EndUpdate">
            <summary>
            Resumes drawing of the control after drawing is suspended by the <see cref="M:Leadtools.WinForms.RasterImageList.BeginUpdate"/> method.
            </summary>
            <remarks>
            The preferred way to add multiple items to a <see cref="T:Leadtools.WinForms.RasterImageList"/> is to use the
            <see cref="M:Leadtools.RasterCollection.AddRange(System.Collections.ICollection)"/> method of the <see cref="T:Leadtools.WinForms.RasterImageListItemCollection"/>
            (accessed through the <see cref="P:Leadtools.WinForms.RasterImageList.Items"/> property of the <see cref="T:Leadtools.WinForms.RasterImageList"/>). This enables you to
            add an array of items to the list in a single operation. However, if you want to add items one at a time using
            the <see cref="M:Leadtools.WinForms.RasterImageListItemCollection.Add(Leadtools.WinForms.RasterImageListItem)"/> method of the <see cref="T:Leadtools.WinForms.RasterImageListItemCollection"/>
            class, you can use the <see cref="M:Leadtools.WinForms.RasterImageList.BeginUpdate"/> method to prevent the control from repainting the
            <see cref="T:Leadtools.WinForms.RasterImageList"/> each time an item is added. Once you have completed the task of adding items to
            the control, call the <b>EndUpdate</b> method to enable the <see cref="T:Leadtools.WinForms.RasterImageList"/> to repaint.
            This way of adding items can prevent flickered drawing of the <see cref="T:Leadtools.WinForms.RasterImageList"/> when a large
            number of items are being added to the control.
            </remarks>
            <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageListItem.Image"/>.
            </example>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.OnPaintPropertiesChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.PaintPropertiesChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The <b>OnPaintPropertiesChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p><b>Notes to Inheritors:</b> When overriding <b>OnPaintPropertiesChanged</b> in a derived class, be sure to call
            the base class's <b>OnPaintPropertiesChanged</b> method so that registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)">Control.OnPaint</see>.
            </summary>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.OnDrawItem(Leadtools.WinForms.RasterImageListDrawItemEventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.DrawItem"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The <b>OnDrawItem</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p><b>Notes to Inheritors:</b> When overriding <b>OnDrawItem</b> in a derived class, be sure to call
            the base class's <b>OnDrawItem</b> method so that registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.GetFixedAspectRatioImageRectangle(System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Calculates how an image is to be sized and positioned in a rectangle while keeping the aspect ratio fixed.
            </summary>
            <param name="imageWidth">Width of the image in pixels</param>
            <param name="imageHeight">Height of the image in pixels</param>
            <param name="imageRect">The source rectangle</param>
            <returns>A <see cref="T:System.Drawing.Rectangle"/> structure that specifies where the image is to be positioned and sized
            in <i>imageRect</i> while keeping the aspect ratio fixed.</returns>
            <remarks>
            When the <see cref="T:Leadtools.WinForms.RasterImageList"/> class draws an item image, it tries to fit the image into the item image
            rectangle while maintaining the aspect ratio.  The control internally calls this method to calculate these
            values.
            </remarks>
            <example>
            For an example, refer to <see cref="E:Leadtools.WinForms.RasterImageList.DrawItem"/>.
            </example>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.GetItemRectangle(Leadtools.WinForms.RasterImageListItem)">
            <summary>
            Retrieves the bounding rectangle for a specific item within the <see cref="T:Leadtools.WinForms.RasterImageList"/> control.
            </summary>
            <param name="item">The item within the <see cref="T:Leadtools.WinForms.RasterImageList"/> whose bounding rectangle you want
            to retrieve.</param>
            <returns>A <see cref="T:System.Drawing.Rectangle"/> that represents the bounding rectangle of the specified
            <see cref="T:Leadtools.WinForms.RasterImageListItem"/>.</returns>
            <remarks>
            <p>The bounding rectangle returned by this method represents the entire item.</p>
            <p>The bounding rectangle that this method returns could contain a negative position or could be outside
            the client rectangle of the control.  The exact position of the item depends on the current size of the
            control as well as the current scroll position.</p>
            </remarks>
            <example>
            This example will highlight the position of all visible items a <see cref="T:Leadtools.WinForms.RasterImageList"/> control.
            <p><b>VB.NET</b></p>
            <code>
            Imports Leadtools
            Imports Leadtools.WinForms
            
            Private Sub GetItemRectangleTest(ByVal imageList As RasterImageList)
               ' Loop through all items
               For Each item As RasterImageListItem In imageList.Items
                  ' Get the item bounding rectangle
                  Dim rc As Rectangle = imageList.GetItemRectangle(item)
            
                  ' If this rectangle is visible, highlight it
                  If (imageList.ClientRectangle.IntersectsWith(rc)) Then
                     ' Convert the rectangle to screen coordinates
                     rc = imageList.RectangleToScreen(rc)
                     ControlPaint.DrawReversibleFrame(rc, Color.Transparent, FrameStyle.Thick)
                  End If
               Next
            End Sub
            </code>
            <p><b>C#</b></p>
            <code>
            using Leadtools;
            using Leadtools.WinForms;
            
            private void GetItemRectangleTest(RasterImageList imageList)
            {
               // Loop through all items
               foreach(RasterImageListItem item in imageList.Items)
               {
                  // Get the item bounding rectangle
                  Rectangle rc = imageList.GetItemRectangle(item);
            
                  // If this rectangle is visible, highlight it
                  if(imageList.ClientRectangle.IntersectsWith(rc))
                  {
                     // Convert the rectangle to screen coordinates
                     rc = imageList.RectangleToScreen(rc);
                     ControlPaint.DrawReversibleFrame(rc, Color.Transparent, FrameStyle.Thick);
                  }
               }
            }
            </code>
            </example>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.SelectedIndexChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The <b>OnSelectedIndexChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p><b>Notes to Inheritors:</b> When overriding <b>OnSelectedIndexChanged</b> in a derived class, be sure to call
            the base class's <b>OnSelectedIndexChanged</b> method so that registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.HitTest(System.Int32,System.Int32)">
            <summary>
            Queries the specified location to determine if the point is over an <see cref="T:Leadtools.WinForms.RasterImageListItem"/>.
            </summary>
            <param name="x">The horizontal position of the coordinate in client coordinates.</param>
            <param name="y">The vertical position of the coordinate in client coordinates.</param>
            <returns>An <see cref="T:Leadtools.WinForms.RasterImageListItem"/> object under the given location, or null
            (Nothing in Visual Basic) if no <see cref="T:Leadtools.WinForms.RasterImageListItem"/> is under the location.</returns>
            <example>
            This example will create and populate a <see cref="T:Leadtools.WinForms.RasterImageList"/> control, then it performs hittesting
            when the user right clicks on the control and shows the item information.  This example assumes that you have
            added the code to a Form and call the method created in the example from the constructor or another method
            on the form.
            <p><b>VB.NET</b></p>
            <code>
            Imports Leadtools
            Imports Leadtools.Codecs
            Imports Leadtools.WinForms
            
            Private Sub HitTestingTest()
               ' Create a new RasterImageList control.
               Dim rasterImageList1 As New RasterImageList
               rasterImageList1.Bounds = New Rectangle(New Point(10, 10), New Size(400, 400))
            
               ' Sort the items in the list in ascending order.
               rasterImageList1.Sorting = SortOrder.Ascending
            
               ' Initialize the RasterCodecs class
               RasterCodecs.CodecsPath = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin"
               Dim codecs As New RasterCodecs
            
               ' Create three items
               Dim imagesPath As String = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\"
            
               For i As Integer = 0 To 2
                  ' Load the image
                  Dim index As Integer = i + 1
                  Dim imageFileName As String = imagesPath + "Image" + index.ToString() + ".cmp"
                  Dim image As IRasterImage = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
                  Dim item As New RasterImageListItem(image, 1, "Item" + index.ToString())
            
                  ' Select the first item
                  If (i = 0) Then
                     item.Selected = True
                  End If
            
                  ' Add the item to the image list
                  rasterImageList1.Items.Add(item)
               Next
            
               ' Add a handler to the MouseDown event
               AddHandler rasterImageList1.MouseDown, AddressOf rasterImageList1_MouseDown
            
               ' Add the RasterImageList to the control collection.
               Me.Controls.Add(rasterImageList1)
            End Sub
            
            Private Sub rasterImageList1_MouseDown(ByVal sender As Object, ByVal e As MouseEventArgs)
               ' Check for right button clicks
               If (e.Button = MouseButtons.Right) Then
                  ' Check if any item is under the cursor poisition
                  Dim imageList As RasterImageList = DirectCast(sender, RasterImageList)
                  Dim item As RasterImageListItem = imageList.HitTest(e.X, e.Y)
                  If (Not item Is Nothing) Then
                     ' Yes, show the item text in a message box
                     MessageBox.Show(Me, item.Text)
                  End If
               End If
            End Sub
            </code>
            <p><b>C#</b></p>
            <code>
            using Leadtools;
            using Leadtools.Codecs;
            using Leadtools.WinForms;
            
            private void HitTestingTest()
            {
               // Create a new RasterImageList control.
               RasterImageList rasterImageList1 = new RasterImageList();
               rasterImageList1.Bounds = new Rectangle(new Point(10, 10), new Size(400, 400));
            
               // Sort the items in the list in ascending order.
               rasterImageList1.Sorting = SortOrder.Ascending;
            
               // Initialize the RasterCodecs class
               RasterCodecs.CodecsPath = @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin";
               RasterCodecs codecs = new RasterCodecs();
            
               // Create three items
               string imagesPath = @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\";
            
               for(int i = 0; i &lt; 3; i++)
               {
                  // Load the image
                  int index = i + 1;
                  string imageFileName = imagesPath + "Image" + index.ToString() + ".cmp";
                  IRasterImage image = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1);
                  RasterImageListItem item = new RasterImageListItem(image, 1, "Item" + index.ToString());
            
                  // Select the first item
                  if(i == 0)
                     item.Selected = true;
            
                  // Add the item to the image list
                  rasterImageList1.Items.Add(item);
               }
            
               // Add a handler to the MouseDown event
               rasterImageList1.MouseDown += new MouseEventHandler(rasterImageList1_MouseDown);
            
               // Add the RasterImageList to the control collection.
               this.Controls.Add(rasterImageList1);
            }
            
            private void rasterImageList1_MouseDown(object sender, MouseEventArgs e)
            {
               // Check for right button clicks
               if(e.Button == MouseButtons.Right)
               {
                  // Check if any item is under the cursor poisition
                  RasterImageList imageList = sender as RasterImageList;
                  RasterImageListItem item = imageList.HitTest(e.X, e.Y);
                  if(item != null)
                  {
                     // Yes, show the item text in a message box
                     MessageBox.Show(this, item.Text);
                  }
               }
            }
            </code>
            </example>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.SelectAll(System.Boolean)">
            <summary>
            Selects or un-selects all the items in this <see cref="T:Leadtools.WinForms.RasterImageList"/> control.
            </summary>
            <param name="select"><b>true</b> to select all items, <b>false</b> to un-select all items.</param>
            <remarks>
            The <see cref="E:Leadtools.WinForms.RasterImageList.SelectedIndexChanged"/> event will occur if the value of the 
            <see cref="P:Leadtools.WinForms.RasterImageListItem.Selected">RasterImageListItem.Selected</see> property of any item inside the 
            control changes as a result of calling this method.
            </remarks>
            <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.SelectionMode"/>.
            </example>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.OnItemSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.ItemSizeChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The <b>OnItemSizeChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p><b>Notes to Inheritors:</b> When overriding <b>OnItemSizeChanged</b> in a derived class, be sure to call
            the base class's <b>OnItemSizeChanged</b> method so that registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.OnItemImageSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.ItemImageSizeChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The <b>OnItemImageSizeChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p><b>Notes to Inheritors:</b> When overriding <b>OnItemImageSizeChanged</b> in a derived class, be sure to call
            the base class's <b>OnItemImageSizeChanged</b> method so that registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.OnItemImageBorderStyleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.ItemImageBorderStyleChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The <b>OnItemImageBorderStyleChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p><b>Notes to Inheritors:</b> When overriding <b>OnItemImageBorderStyleChanged</b> in a derived class, be sure to call
            the base class's <b>OnItemImageBorderStyleChanged</b> method so that registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.OnItemBorderStyleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.ItemBorderStyleChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The <b>OnItemBorderStyleChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p><b>Notes to Inheritors:</b> When overriding <b>OnItemBorderStyleChanged</b> in a derived class, be sure to call
            the base class's <b>OnItemBorderStyleChanged</b> method so that registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.OnItemSpacingSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.ItemSpacingSizeChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The <b>OnItemSpacingSizeChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p><b>Notes to Inheritors:</b> When overriding <b>OnItemSpacingSizeChanged</b> in a derived class, be sure to call
            the base class's <b>OnItemSpacingSizeChanged</b> method so that registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.OnItemForeColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.ItemForeColorChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The <b>OnItemForeColorChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p><b>Notes to Inheritors:</b> When overriding <b>OnItemForeColorChanged</b> in a derived class, be sure to call
            the base class's <b>OnItemForeColorChanged</b> method so that registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.OnItemSelectedForeColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.ItemSelectedForeColorChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The <b>OnItemSelectedForeColorChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p><b>Notes to Inheritors:</b> When overriding <b>OnItemSelectedForeColorChanged</b> in a derived class, be sure to call
            the base class's <b>OnItemSelectedForeColorChanged</b> method so that registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.OnItemBackColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.ItemBackColorChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The <b>OnItemBackColorChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p><b>Notes to Inheritors:</b> When overriding <b>OnItemBackColorChanged</b> in a derived class, be sure to call
            the base class's <b>OnItemBackColorChanged</b> method so that registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.OnItemSelectedBackColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.ItemSelectedBackColorChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The <b>OnItemSelectedBackColorChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p><b>Notes to Inheritors:</b> When overriding <b>OnItemSelectedBackColorChanged</b> in a derived class, be sure to call
            the base class's <b>OnItemSelectedBackColorChanged</b> method so that registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.OnSelectUserImageChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.SelectUserImageChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The <b>OnSelectUserImageChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p><b>Notes to Inheritors:</b> When overriding <b>OnSelectUserImageChanged</b> in a derived class, be sure to call
            the base class's <b>OnSelectUserImageChanged</b> method so that registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.OnSizeChanged(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)">Control.OnSizeChanged</see>.
            </summary>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.WndProc(System.Windows.Forms.Message@)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)">Control.WndProc</see>.
            </summary>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.OnSelectionModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.SelectionModeChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The <b>OnSelectionModeChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p><b>Notes to Inheritors:</b> When overriding <b>OnSelectionModeChanged</b> in a derived class, be sure to call
            the base class's <b>OnSelectionModeChanged</b> method so that registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.OnViewStyleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.ViewStyleChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The <b>OnViewStyleChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p><b>Notes to Inheritors:</b> When overriding <b>OnViewStyleChanged</b> in a derived class, be sure to call
            the base class's <b>OnViewStyleChanged</b> method so that registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.OnShowItemTextChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.ShowItemTextChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The <b>OnShowItemTextChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p><b>Notes to Inheritors:</b> When overriding <b>OnShowItemTextChanged</b> in a derived class, be sure to call
            the base class's <b>OnShowItemTextChanged</b> method so that registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.OnScrollStyleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.ScrollStyleChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The <b>OnScrollStyleChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p><b>Notes to Inheritors:</b> When overriding <b>OnScrollStyleChanged</b> in a derived class, be sure to call
            the base class's <b>OnScrollStyleChanged</b> method so that registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.OnAutoDisposeImagesChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.AutoDisposeImagesChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The <b>OnAutoDisposeImagesChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p><b>Notes to Inheritors:</b> When overriding <b>OnAutoDisposeImagesChanged</b> in a derived class, be sure to call
            the base class's <b>OnAutoDisposeImagesChanged</b> method so that registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.EnsureVisible(System.Int32)">
            <summary>
            Ensures that the specified item is visible within the control, scrolling the contents of the control if necessary.
            </summary>
            <param name="index">The zero-based index of the item to scroll into view.</param>
            <remarks>
            <p>You can use this method to ensure that a specific item is visible within the <see cref="T:Leadtools.WinForms.RasterImageList"/>
            control. When performing validation on the items in a <see cref="T:Leadtools.WinForms.RasterImageList"/>, you can call the
            <see cref="M:Leadtools.WinForms.RasterImageList.EnsureVisible(System.Int32)"/> method to ensure that an item that failed validation is displayed in the
            <see cref="T:Leadtools.WinForms.RasterImageList"/> control to allow the user to perform changes on the item. If the item that you
            want to ensure is visible is located above the viewable region of the <see cref="T:Leadtools.WinForms.RasterImageList"/> control,
            calling the <see cref="M:Leadtools.WinForms.RasterImageList.EnsureVisible(System.Int32)"/> method will scroll the contents of the control until it is the first
            item in the viewable area of the control. If the item is below the viewable region of the
            <see cref="T:Leadtools.WinForms.RasterImageList"/> control, calling the <see cref="M:Leadtools.WinForms.RasterImageList.EnsureVisible(System.Int32)"/> method will scroll the contents
            of the <see cref="T:Leadtools.WinForms.RasterImageList"/> control until the item is the last item in the viewable area of the control.</p>
            <p>To determine if an item is located at the top of the display area of a <see cref="T:Leadtools.WinForms.RasterImageList"/> control,
            use the <see cref="P:Leadtools.WinForms.RasterImageList.TopIndex"/> property.</p>
            </remarks>
            <example>
            This example will add a new item to the end of a <see cref="T:Leadtools.WinForms.RasterImageList"/> control and make sure the item
            is visible to the user.
            <p><b>VB.NET</b></p>
            <code>
            Imports Leadtools
            Imports Leadtools.WinForms
            
            Private Sub AddItem(ByVal imageList As RasterImageList, image As IRasterImage)
               ' Append the new item to the image list control
               Dim item As New RasterImageListItem(image, 1, "New Item")
               Dim index As Integer = imageList.Items.Add(item)
            
               ' Make sure this new item is visible to the user
               imageList.EnsureVisible(index)
            End Sub
            </code>
            <p><b>C#</b></p>
            <code>
            using Leadtools;
            using Leadtools.WinForms;
            
            private void AddItem(RasterImageList imageList, IRasterImage image)
            {
               // Append the new item to the image list control
               RasterImageListItem item = new RasterImageListItem(image, 1, "New Item");
               int index = imageList.Items.Add(item);
            
               // Make sure this new item is visible to the user
               imageList.EnsureVisible(index);
            }
            </code>
            </example>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.OnScroll(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.Scroll"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The <b>OnScroll</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p><b>Notes to Inheritors:</b> When overriding <b>OnScroll</b> in a derived class, be sure to call
            the base class's <b>OnScroll</b> method so that registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.ScrollItems(System.Int32)">
            <summary>
            Scrolls the content of the control.
            </summary>
            <param name="amount">Rows or columns to scroll.</param>
            <remarks>
            <p>If the <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle"/> value is set to <b>RasterImageListScrollStyle.Vertical</b>, then <i>amount</i>
            should be the number of rows to scroll up or down.  A positive number will scroll the context of the control
            down, a negative number will scroll the context of the control up.</p>
            <p>If the <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle"/> value is set to <b>RasterImageListScrollStyle.Horizontal</b>, then <i>amount</i>
            should be the number of columns to scroll left or right.  A positive number will scroll the context of the control
            to the right, a negative number will scroll the context of the control to the left.</p>
            </remarks>
            <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle"/>.
            </example>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.OnEnableKeyboardChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.EnableKeyboardChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The <b>OnEnableKeyboardChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p><b>Notes to Inheritors:</b> When overriding <b>OnEnableKeyboardChanged</b> in a derived class, be sure to call
            the base class's <b>OnEnableKeyboardChanged</b> method so that registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)">Control.IsInputKey</see>.
            </summary>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)">Control.OnKeyDown</see>.
            </summary>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)">Control.OnMouseDown</see>.
            </summary>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.OnSorterChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.SorterChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The <b>OnSorterChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p><b>Notes to Inheritors:</b> When overriding <b>OnSorterChanged</b> in a derived class, be sure to call
            the base class's <b>OnSorterChanged</b> method so that registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.OnSortingChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.SortingChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The <b>OnSortingChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p><b>Notes to Inheritors:</b> When overriding <b>OnSortingChanged</b> in a derived class, be sure to call
            the base class's <b>OnSortingChanged</b> method so that registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageList.Sort">
            <summary>
            Sorts the items of the <see cref="T:Leadtools.WinForms.RasterImageList"/> control.
            </summary>
            <remarks>
            Call this method to sort the items inside the <see cref="T:Leadtools.WinForms.RasterImageList"/> control.  The order of sorting
            depends on the <see cref="P:Leadtools.WinForms.RasterImageList.Sorting"/> property.  The sorting method depends on the <see cref="P:Leadtools.WinForms.RasterImageList.Sorter"/>
            property.
            </remarks>
            <example>
            This example will create and populate a <see cref="T:Leadtools.WinForms.RasterImageList"/> control with 9 items.  It will sort these
            items in an ascending then a descending order.  This example assumes that you have added the code to a Form and
            call the method created in the example from the constructor or another method on the form.<br/>
            <p><b>VB.NET</b></p>
            <code>
            Imports Leadtools
            Imports Leadtools.WinForms
            
            Private Sub SortItemsTest()
               ' Create a new RasterImageList control.
               Dim rasterImageList1 As New RasterImageList
               rasterImageList1.Bounds = New Rectangle(New Point(10, 10), New Size(400, 400))
            
               ' Use normal view style
               rasterImageList1.ViewStyle = RasterImageListViewStyle.Normal
            
               ' Add the RasterImageList to the control collection.
               Me.Controls.Add(rasterImageList1)
            
               ' Suspend painting the RasterImageList
               rasterImageList1.BeginUpdate()
            
               ' Add 9 items
               For i As Integer = 0 To 8
                  Dim item As New RasterImageListItem(Nothing, i, "Item " + i.ToString())
                  rasterImageList1.Items.Add(item)
               Next
            
               ' Resume painting
               rasterImageList1.EndUpdate()
            
               ' Sort the items in the list in ascending order.
               rasterImageList1.Sorting = SortOrder.Ascending
               rasterImageList1.Sort()
            
               MessageBox.Show("Items are sorted in ascending order")
            
               ' Sort the items in the list in descending order.
               rasterImageList1.Sorting = SortOrder.Descending
               rasterImageList1.Sort()
            
               MessageBox.Show("Items are sorted in descending order")
            End Sub
            </code>
            <p><b>C#</b></p>
            <code>
            using Leadtools;
            using Leadtools.WinForms;
            
            private void SortItemsTest()
            {
               // Create a new RasterImageList control.
               RasterImageList rasterImageList1 = new RasterImageList();
               rasterImageList1.Bounds = new Rectangle(new Point(10, 10), new Size(400, 400));
            
               // Use normal view style
               rasterImageList1.ViewStyle = RasterImageListViewStyle.Normal;
            
               // Add the RasterImageList to the control collection.
               this.Controls.Add(rasterImageList1);
            
               // Suspend painting the RasterImageList
               rasterImageList1.BeginUpdate();
            
               // Add 9 items
               for(int i = 0; i &lt; 9; i++)
               {
                  RasterImageListItem item = new RasterImageListItem(null, i, "Item " + i.ToString());
                  rasterImageList1.Items.Add(item);
               }
            
               // Resume painting
               rasterImageList1.EndUpdate();
            
               // Sort the items in the list in ascending order.
               rasterImageList1.Sorting = SortOrder.Ascending;
               rasterImageList1.Sort();
            
               MessageBox.Show("Items are sorted in ascending order");
            
               // Sort the items in the list in descending order.
               rasterImageList1.Sorting = SortOrder.Descending;
               rasterImageList1.Sort();
            
               MessageBox.Show("Items are sorted in descending order");
            }
            </code>
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageList.Site">
            <summary>
            This member overrides the <see cref="P:System.Windows.Forms.Control.Site">Control.Site</see> property.
            </summary>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageList.BorderStyle">
            <summary>
            Gets or sets the border style of the control.
            </summary>
            <value>
            One of the <see cref="P:Leadtools.WinForms.RasterImageList.BorderStyle"/> values. The default is <b>BorderStyle.Fixed3D</b>.</value>
            <remarks>
            You can use the <b>BorderStyle</b> property to change the border style of the <see cref="T:Leadtools.WinForms.RasterImageList"/>
            control to match the border style settings of other controls on the form. For example, if none of the other
            controls on your form displays a border, you can set the <b>BorderStyle</b> property of the
            <see cref="T:Leadtools.WinForms.RasterImageList"/> control to <b>BorderStyle.None</b> to match the other controls.
            </remarks>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageList.BorderStyleChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.BorderStyle"/> property changes.
            </summary>
            <remarks>
            <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.BorderStyle"/> property is changed by either a programmatic
            modification or user interaction.</p>
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageList.CreateParams">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.Control.CreateParams">Control.CreateParams.</see>
            </summary>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageList.DoubleBuffer">
            <summary>
            Enables or disables double buffer painting, which eliminates flicker.
            </summary>
            <value><b>true</b> to enable double buffer painting; false otherwise.</value>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageList.DoubleBufferChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.DoubleBuffer"/> property changes.
            </summary>
            <remarks>
            <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.DoubleBuffer"/> property is changed by either a programmatic modification
            or user interaction.</p>
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageList.PaintProperties">
            <summary>
            Gets and sets the <see cref="T:Leadtools.RasterPaintProperties"/> which controls the painting of item images in this control.
            </summary>
            <value>An <see cref="T:Leadtools.RasterPaintProperties"/> structure which controls the painting of item images in
            this control.</value>
            <remarks>
            <p>If the item image has a transparent color
            (<see cref="P:Leadtools.IRasterImage.Transparent">IRasterImage.Transparent</see> is set to <b>true</b>) then the
            <see cref="T:Leadtools.WinForms.RasterImageList"/> control will automatically revert to the GDI+ paint engine.  It will
            temporarily set the
            <see cref="P:Leadtools.RasterPaintProperties.PaintEngine">RasterPaintProperties.PaintEngine</see> value of the
            <b>PaintProperties</b> property to <b>RasterPaintEngine.GdiPlus</b> when drawing this item.</p>
            <p>For more information, refer to <see cref="T:Leadtools.RasterPaintProperties"/>.</p>
            </remarks>
            <example>
            This example flips the PaintProperties value of a RasterImageList control.
            <p><b>VB.NET</b></p>
            <code>
            Imports Leadtools
            Imports Leadtools.WinForms
            
            Private Sub FlipPaintProperties(ByVal imageList As RasterImageList)
               ' Get the current paint properties
               Dim props As RasterPaintProperties = imageList.PaintProperties
            
               ' Flip between Bicubic scaling (best quality but slow paint) and normal (default quality, hi-speed paint)
               If (props.PaintDisplayMode = RasterPaintDisplayModeFlags.None) Then
                  props.PaintDisplayMode = RasterPaintDisplayModeFlags.Bicubic
               Else
                  props.PaintDisplayMode = RasterPaintDisplayModeFlags.None
               End If
            
               ' Set the properties back into the control
               imageList.PaintProperties = props
            End Sub
            </code>
            <p><b>C#</b></p>
            <code>
            using Leadtools;
            using Leadtools.WinForms;
            
            private void FlipPaintProperties(RasterImageList imageList)
            {
               // Get the current paint properties
               RasterPaintProperties props = imageList.PaintProperties;
            
               // Flip between Bicubic scaling (best quality but slow paint) and normal (default quality, hi-speed paint)
               if(props.PaintDisplayMode == RasterPaintDisplayModeFlags.None)
                  props.PaintDisplayMode = RasterPaintDisplayModeFlags.Bicubic;
               else
                  props.PaintDisplayMode = RasterPaintDisplayModeFlags.None;
            
               // Set the properties back into the control
               imageList.PaintProperties = props;
            }
            </code>
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageList.PaintPropertiesChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.PaintProperties"/> property changes.
            </summary>
            <remarks>
            <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.PaintProperties"/> property is changed by either a programmatic
            modification or user interaction.</p>
            </remarks>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageList.PaintBackground">
            <summary>
            Occurs when the background of the control is redrawn.
            </summary>
            <remarks>
            <p>This event is fired from within the <see cref="E:System.Windows.Forms.Control.Paint"/> event of this control.</p>
            <p>The event handler receives an argument of type <see cref="T:System.Windows.Forms.PaintEventArgs"/> containing data related to this
            event. The following <see cref="T:System.Windows.Forms.PaintEventArgs"/> properties provide information specific to this event.
            <list type="table">
              <listheader>
                 <term>Property</term>
                 <description>Description</description>
               </listheader>
              <item>
                 <term><see cref="P:System.Windows.Forms.PaintEventArgs.ClipRectangle"/></term>
                 <description>Gets the rectangle in which to paint.</description>
              </item>
              <item>
                 <term><see cref="P:System.Windows.Forms.PaintEventArgs.Graphics"/></term>
                 <description>Gets the graphics used to paint.</description>
              </item>
            </list>
            </p>
            </remarks>
            <example>
            This example uses the PaintBackground event to fill the background of a RasterImageList control with
            a gradient brush. This example assumes that you have added the code to a Form and call the method created
            in the example from the constructor or another method on the form.
            <p><b>VB.NET</b></p>
            <code>
            Imports Leadtools
            Imports Leadtools.WinForms
            Imports System.Drawing.Drawing2D
            
            Private Sub PaintBackgroundTest()
               ' Create a new RasterImageList control.
               Dim rasterImageList1 As New RasterImageList
               rasterImageList1.Bounds = New Rectangle(New Point(10, 10), New Size(320, 200))
            
               ' Sort the items in the list in ascending order.
               rasterImageList1.Sorting = SortOrder.Ascending
            
               ' Initialize the RasterCodecs class
               RasterCodecs.CodecsPath = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin"
               Dim codecs As New RasterCodecs
            
               ' Create three items
               Dim imagesPath As String = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\"
            
               For i As Integer = 0 To 2
                  ' Load the image
                  Dim index As Integer = i + 1
                  Dim imageFileName As String = imagesPath + "Image" + index.ToString() + ".cmp"
                  Dim Image As IRasterImage = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
                  Dim item As New RasterImageListItem(Image, 1, "Item" + index.ToString())
            
                  ' Select the first item
                  If (i = 0) Then
                     item.Selected = True
                  End If
            
                  ' Add the item to the image list
                  rasterImageList1.Items.Add(item)
               Next
            
               ' Add a handler to the PaintBackground event
               AddHandler rasterImageList1.PaintBackground, AddressOf rasterImageList1_PaintBackground
            
               ' Add the RasterImageList to the control collection.
               Me.Controls.Add(rasterImageList1)
            End Sub
            
            Private Sub rasterImageList1_PaintBackground(ByVal sender As Object, ByVal e As PaintEventArgs)
               ' Get the image list control
               Dim imageList As RasterImageList = DirectCast(sender, RasterImageList)
            
               ' Fill the background with a gradient brush
               Dim rc As Rectangle = imageList.ClientRectangle
            
               Dim b As New LinearGradientBrush( _
                  rc, _
                  Color.Bisque, _
                  Color.White, _
                  LinearGradientMode.Vertical)
            
               e.Graphics.FillRectangle(b, rc)
               b.Dispose()
            End Sub
            </code>
            <p><b>VB.NET</b></p>
            <code>
            using Leadtools;
            using Leadtools.WinForms;
            using System.Drawing.Drawing2D;
            
            private void PaintBackgroundTest()
            {
               // Create a new RasterImageList control.
               RasterImageList rasterImageList1 = new RasterImageList();
               rasterImageList1.Bounds = new Rectangle(new Point(10, 10), new Size(320, 200));
            
               // Sort the items in the list in ascending order.
               rasterImageList1.Sorting = SortOrder.Ascending;
            
               // Initialize the RasterCodecs class
               RasterCodecs.CodecsPath = @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin";
               RasterCodecs codecs = new RasterCodecs();
            
               // Create three items
               string imagesPath = @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\";
            
               for(int i = 0; i &lt; 3; i++)
               {
                  // Load the image
                  int index = i + 1;
                  string imageFileName = imagesPath + "Image" + index.ToString() + ".cmp";
                  IRasterImage image = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1);
                  RasterImageListItem item = new RasterImageListItem(image, 1, "Item" + index.ToString());
            
                  // Select the first item
                  if(i == 0)
                     item.Selected = true;
            
                  // Add the item to the image list
                  rasterImageList1.Items.Add(item);
               }
            
               // Add a handler to the PaintBackground event
               rasterImageList1.PaintBackground += new PaintEventHandler(rasterImageList1_PaintBackground);
            
               // Add the RasterImageList to the control collection.
               this.Controls.Add(rasterImageList1);
            }
            
            private void rasterImageList1_PaintBackground(object sender, PaintEventArgs e)
            {
               // Get the image list control
               RasterImageList imageList = sender as RasterImageList;
            
               // Fill the background with a gradient brush
               Rectangle rc = imageList.ClientRectangle;
            
               Brush b = new LinearGradientBrush(
                  rc,
                  Color.Bisque,
                  Color.White,
                  LinearGradientMode.Vertical);
               e.Graphics.FillRectangle(b, rc);
               b.Dispose();
            }
            </code>
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageList.DrawItem">
            <summary>
            Occurs request is made to draw an item in an owner-drawn <see cref="T:Leadtools.WinForms.RasterImageList"/>.
            </summary>
            <remarks>
            <p>When you set the <see cref="P:Leadtools.WinForms.RasterImageList.ViewStyle"/> property to <b>RasterImageListViewStyle.OwnerDraw</b>, the
            <see cref="T:Leadtools.WinForms.RasterImageList"/> control will fire the <b>DrawItem</b> event for each event that needs to be
            drawn.  The <see cref="T:Leadtools.WinForms.RasterImageListDrawItemEventArgs"/> argument passed to a <b>DrawItem</b> event handler provides a
            <see cref="T:System.Drawing.Graphics"/> object that enables you to perform drawing and other graphical operations on the surface
            of the <see cref="T:Leadtools.WinForms.RasterImageList"/> along with the <see cref="T:Leadtools.WinForms.RasterImageListItem"/> object that needs to be
            drawn.</p>
            </remarks>
            <example>
            This example creates an owner drawn <see cref="T:Leadtools.WinForms.RasterImageList"/>. This example assumes that you have added the
            code to a Form and call the method created in the example from the constructor or another method on the form.
            <p><b>VB.NET</b></p>
            <code>
            Imports Leadtools
            Imports Leadtools.Codecs
            Imports Leadtools.WinForms
            
            Private Sub OwnerDrawTest()
               ' Create a new RasterImageList control.
               Dim rasterImageList1 As New RasterImageList
               rasterImageList1.Bounds = New Rectangle(New Point(10, 10), New Size(400, 400))
            
               ' Sort the items in the list in ascending order.
               rasterImageList1.Sorting = SortOrder.Ascending
            
               ' Initialize the RasterCodecs class
               RasterCodecs.CodecsPath = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin"
               Dim codecs As New RasterCodecs
            
               ' Create three items
               Dim imagesPath As String = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\"
            
               For i As Integer = 0 To 2
                  ' Load the image
                  Dim index As Integer = i + 1
                  Dim imageFileName As String = imagesPath + "Image" + index.ToString() + ".cmp"
                  Dim image As IRasterImage = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
                  Dim item As New RasterImageListItem(image, 1, "Item" + index.ToString())
            
                  ' Select the first item
                  If (i = 0) Then
                     item.Selected = True
                  End If
            
                  ' Add the item to the image list
                  rasterImageList1.Items.Add(item)
               Next
            
               ' Change the item size
               rasterImageList1.ItemSize = New Size(200, 200)
            
               ' Change the item image size
               rasterImageList1.ItemImageSize = New Size(120, 120)
            
               ' We are going to draw the items ourselves
               rasterImageList1.ViewStyle = RasterImageListViewStyle.OwnerDraw
            
               ' Add a handler to the DrawItem event
               AddHandler rasterImageList1.DrawItem, AddressOf rasterImageList1_DrawItem
            
               ' Add the RasterImageList to the control collection.
               Me.Controls.Add(rasterImageList1)
            End Sub
            
            Private Sub rasterImageList1_DrawItem(ByVal sender As Object, ByVal e As RasterImageListDrawItemEventArgs)
               Dim item As RasterImageListItem = DirectCast(e.Item, RasterImageListItem)
               Dim imageList As RasterImageList = item.ImageList
               Dim g As Graphics = e.Graphics
            
               ' get the item rectangle
               Dim rc As Rectangle = imageList.GetItemRectangle(item)
            
               ' sanity check
               If (rc.IsEmpty) Then Return
            
               ' we want to draw a 1 pixel black rectangle around the item
               ' then we fill the inside of the rectangle with white if the item
               ' is not selected or lightgray if it is
            
               g.DrawRectangle(Pens.Black, rc.Left, rc.Top, rc.Width - 1, rc.Height - 1)
            
               ' we used up 1 pixel
               rc.Inflate(-1, -1)
            
               Dim b As Brush
               If (item.Selected) Then
                  b = Brushes.LightGray
               Else
                  b = Brushes.White
               End If
            
               g.FillRectangle(b, rc)
            
               ' calculate the rectangles for image and text
               If (imageList.ShowItemText) Then
                  ' text is visible
                  ' draw the text at the bottom of the item
                  Dim textHeight As Integer = CType(g.MeasureString("WWW", imageList.Font).Height + 4, Integer)
                  Dim textRect As Rectangle = Rectangle.FromLTRB( _
                     rc.Left, _
                     rc.Bottom - textHeight, _
                     rc.Right, _
                     rc.Bottom)
            
                  If (Not textRect.IsEmpty) Then
                     Dim sf As New StringFormat
                     sf.Alignment = StringAlignment.Center
                     sf.LineAlignment = StringAlignment.Center
                     sf.Trimming = StringTrimming.EllipsisPath
                     sf.FormatFlags = StringFormatFlags.NoWrap
            
                     g.DrawString( _
                        item.Text, _
                        imageList.Font, _
                        Brushes.Black, _
                        New RectangleF(textRect.Left, textRect.Top, textRect.Width, textRect.Height), _
                        sf)
            
                     sf.Dispose()
            
                     ' we need to update the item rectangle for the space
                     ' we used up to draw the text
                     rc.Height -= textRect.Height
                  End If
               End If
            
               ' rc is the image rectangle
               If (Not rc.IsEmpty) Then
                  ' now rc holds the rectangle to draw the image into
            
                  ' first, set the correct page
                  Dim savePage As Integer = -1
            
                  If (item.Image.Page &lt;&gt; item.Page) Then
                     ' the page is different
            
                     ' save current image page so we can set it back when we are done
                     savePage = item.Image.Page
            
                     ' disable the image events, we are going to set the page back,
                     ' so we do not want anybody subscribing to this image Changed
                     ' event to know we changed it.
                     item.Image.DisableEvents()
            
                     ' set new page
                     item.Image.Page = item.Page
                  End If
            
                  Try
                     ' we want to center the image into whatever left of rc
                     Dim itemImageSize As Size = imageList.ItemImageSize
                     Dim imageRect As New Rectangle( _
                        rc.Left + (rc.Width - itemImageSize.Width) \ 2, _
                        rc.Top + (rc.Height - itemImageSize.Height) \ 2, _
                        itemImageSize.Width, _
                        itemImageSize.Height)
            
                     ' we want to keep the aspect ratio
                     imageRect = RasterImageList.GetFixedAspectRatioImageRectangle( _
                        item.Image.ImageWidth, _
                        item.Image.ImageHeight, _
                        imageRect)
            
                     ' draw the image
                     item.Image.Paint(g, imageRect, imageList.PaintProperties)
            
                     ' finally, draw a black rectangle around the image
                     imageRect.Inflate(1, 1)
                        g.DrawRectangle( _
                           Pens.Black, _
                           imageRect.Left, _
                           imageRect.Top, _
                           imageRect.Width - 1, _
                           imageRect.Height - 1)
                  Finally
                     ' reset the old page
                     If (savePage &lt;&gt; -1) Then
                        item.Image.Page = savePage
            
                     ' re-enable the events
                        item.Image.EnableEvents()
                     End If
                  End Try
               End If
            End Sub
            </code>
            <p><b>C#</b></p>
            <code>
            using Leadtools;
            using Leadtools.Codecs;
            using Leadtools.WinForms;
            
            private void OwnerDrawTest()
            {
               // Create a new RasterImageList control.
               RasterImageList rasterImageList1 = new RasterImageList();
               rasterImageList1.Bounds = new Rectangle(new Point(10, 10), new Size(400, 400));
            
               // Sort the items in the list in ascending order.
               rasterImageList1.Sorting = SortOrder.Ascending;
            
               // Initialize the RasterCodecs class
               RasterCodecs.CodecsPath = @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin";
               RasterCodecs codecs = new RasterCodecs();
            
               // Create three items
               string imagesPath = @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\";
            
               for(int i = 0; i &lt; 3; i++)
               {
                  // Load the image
                  int index = i + 1;
                  string imageFileName = imagesPath + "Image" + index.ToString() + ".cmp";
                  IRasterImage image = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1);
                  RasterImageListItem item = new RasterImageListItem(image, 1, "Item" + index.ToString());
            
                  // Select the first item
                  if(i == 0)
                     item.Selected = true;
            
                  // Add the item to the image list
                  rasterImageList1.Items.Add(item);
               }
            
               // Change the item size
               rasterImageList1.ItemSize = new Size(200, 200);
            
               // Change the item image size
               rasterImageList1.ItemImageSize = new Size(120, 120);
            
               // We are going to draw the items ourselves
               rasterImageList1.ViewStyle = RasterImageListViewStyle.OwnerDraw;
            
               // Add a handler to the DrawItem event
               rasterImageList1.DrawItem += new RasterImageListDrawItemEventHandler(rasterImageList1_DrawItem);
            
               // Add the RasterImageList to the control collection.
               this.Controls.Add(rasterImageList1);
            }
            
            private void rasterImageList1_DrawItem(object sender, RasterImageListDrawItemEventArgs e)
            {
               RasterImageListItem item = e.Item;
               RasterImageList imageList = item.ImageList;
               Graphics g = e.Graphics;
            
               // get the item rectangle
               Rectangle rc = imageList.GetItemRectangle(item);
            
               // sanity check
               if(rc.IsEmpty)
                  return;
            
               // we want to draw a 1 pixel black rectangle around the item
               // then we fill the inside of the rectangle with white if the item
               // is not selected or lightgray if it is
            
               g.DrawRectangle(Pens.Black, rc.Left, rc.Top, rc.Width - 1, rc.Height -1);
            
               // we used up 1 pixel
               rc.Inflate(-1, -1);
            
               Brush b;
               if(item.Selected)
                  b = Brushes.LightGray;
               else
                  b = Brushes.White;
               g.FillRectangle(b, rc);
            
               // calculate the rectangles for image and text
               if(imageList.ShowItemText)
               {
                  // text is visible
                  // draw the text at the bottom of the item
                  int textHeight = (int)(g.MeasureString("WWW", imageList.Font).Height + 4);
                  Rectangle textRect = Rectangle.FromLTRB(
                     rc.Left,
                     rc.Bottom - textHeight,
                     rc.Right,
                     rc.Bottom);
            
                  if(!textRect.IsEmpty)
                  {
                     StringFormat sf = new StringFormat();
                     sf.Alignment = StringAlignment.Center;
                     sf.LineAlignment = StringAlignment.Center;
                     sf.Trimming = StringTrimming.EllipsisPath;
                     sf.FormatFlags = StringFormatFlags.NoWrap;
            
                     g.DrawString(
                        item.Text,
                        imageList.Font,
                        Brushes.Black,
                        textRect,
                        sf);
                     sf.Dispose();
            
                     // we need to update the item rectangle for the space
                     // we used up to draw the text
                     rc.Height -= textRect.Height;
                  }
               }
            
               // rc is the image rectangle
               if(!rc.IsEmpty)
               {
                  // now rc holds the rectangle to draw the image into
            
                  // first, set the correct page
                  int savePage = -1;
                  if(item.Image.Page != item.Page)
                  {
                     // the page is different
            
                     // save current image page so we can set it back when we are done
                     savePage = item.Image.Page;
            
                     // disable the image events, we are going to set the page back,
                     // so we do not want anybody subscribing to this image Changed
                     // event to know we changed it.
                     item.Image.DisableEvents();
            
                     // set new page
                     item.Image.Page = item.Page;
                  }
            
                  try
                  {
                     // we want to center the image into whatever left of rc
                     Size itemImageSize = imageList.ItemImageSize;
                     Rectangle imageRect = new Rectangle(
                        rc.Left + (rc.Width - itemImageSize.Width) / 2,
                        rc.Top + (rc.Height - itemImageSize.Height) / 2,
                        itemImageSize.Width,
                        itemImageSize.Height);
            
                     // we want to keep the aspect ratio
                     imageRect = RasterImageList.GetFixedAspectRatioImageRectangle(
                        item.Image.ImageWidth,
                        item.Image.ImageHeight,
                        imageRect);
            
                     // draw the image
                     item.Image.Paint(g, imageRect, imageList.PaintProperties);
            
                     // finally, draw a black rectangle around the image
                     imageRect.Inflate(1, 1);
                     g.DrawRectangle(
                        Pens.Black,
                        imageRect.Left,
                        imageRect.Top,
                        imageRect.Width - 1,
                        imageRect.Height - 1);
                  }
                  finally
                  {
                     // reset the old page
                     if(savePage != -1)
                     {
                        item.Image.Page = savePage;
            
                        // re-enable the events
                        item.Image.EnableEvents();
                     }
                  }
               }
            }
            </code>
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageList.Items">
            <summary>
            Gets a collection containing all items in the control.
            </summary>
            <value>A <see cref="T:Leadtools.WinForms.RasterImageListItemCollection"/> that contains all the items in this
            <see cref="T:Leadtools.WinForms.RasterImageList"/> control.</value>
            <remarks>
            Using the <see cref="T:Leadtools.WinForms.RasterImageListItemCollection"/> returned by this property, you can add items, remove items,
            and obtain a count of items. For more information on the tasks that can be performed with the items in the
            collection, refer to <see cref="T:Leadtools.WinForms.RasterImageListItemCollection"/>.
            </remarks>
            <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImageList"/>.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageList.SelectedItems">
            <summary>
            Gets the items that are selected in the control.
            </summary>
            <value>A <see cref="T:Leadtools.WinForms.RasterImageListItemCollection"/> that contains the items that are selected in the control.
            If no items are currently selected, an empty <see cref="T:Leadtools.WinForms.RasterImageListItemCollection"/> is returned.</value>
            <remarks>
            <p>When the <see cref="P:Leadtools.WinForms.RasterImageList.SelectionMode"/> property is set to <b>RasterImageListSelectionMode.Multi</b>, this property
            returns a collection containing the items that are selected in the <see cref="T:Leadtools.WinForms.RasterImageList"/>. For a
            single-selection <see cref="T:Leadtools.WinForms.RasterImageList"/>, this property returns a collection containing the only
            selected item in the <see cref="T:Leadtools.WinForms.RasterImageList"/>. For more information on the tasks that can be performed
            with the items in the collection, see <see cref="T:Leadtools.WinForms.RasterImageListItemCollection"/>.</p>
            </remarks>
            <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageListItem.Image"/>.
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageList.SelectedIndexChanged">
            <summary>
            Occurs when the index of the selected item in the <see cref="T:Leadtools.WinForms.RasterImageList"/> control changes.
            </summary>
            <remarks>
            <p>For single selection <see cref="T:Leadtools.WinForms.RasterImageList"/> controls (i.e. when <see cref="P:Leadtools.WinForms.RasterImageList.SelectionMode"/> is set to
            <b>RasterImageListSelectionMode.Single</b>), this event occurs whenever there is a change to the index position of the selected
            item.</p>
            <p>In a multiple selection <see cref="T:Leadtools.WinForms.RasterImageList"/> control (i.e. when <see cref="P:Leadtools.WinForms.RasterImageList.SelectionMode"/> is set to
            <b>RasterImageListSelectionMode.Multi</b>), this event occurs whenever an item is removed or added to the list
            of selected items.</p>
            <p>To determine which items are selected in the <see cref="T:Leadtools.WinForms.RasterImageList"/> control, use the
            <see cref="P:Leadtools.WinForms.RasterImageList.SelectedItems"/> property to access the <see cref="T:Leadtools.WinForms.RasterImageListItemCollection"/>.</p>
            <p>You can also determine which items are selected in the control by enumerating all the <see cref="P:Leadtools.WinForms.RasterImageList.Items"/> and
            checking the <see cref="P:Leadtools.WinForms.RasterImageListItem.Selected">RasterImageListItem.Selected</see> property.</p>
            <p>You can create an event handler for this event to perform tasks whenever there is a change to the selected
            items in the <see cref="T:Leadtools.WinForms.RasterImageList"/> control.</p>
            </remarks>
            <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageListItem.Image"/>.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageList.ItemSize">
            <summary>
            Gets or sets the size of each <see cref="T:Leadtools.WinForms.RasterImageListItem"/> in the control.
            </summary>
            <value>A <see cref="T:System.Drawing.Size"/> structure that specifies the size of each <see cref="T:Leadtools.WinForms.RasterImageListItem"/> in
            this <see cref="T:Leadtools.WinForms.RasterImageList"/> in pixels.</value>
            <remarks>
            <p>The <b>ItemSize</b> specifies the overall size of each item in the <see cref="T:Leadtools.WinForms.RasterImageList"/> control.</p>
            <p>When changing any of the item sizes or styles, you should pay special attention to the values you specify,
            in general, you should setup <b>ItemSize</b> to be large enough to accommodate <see cref="P:Leadtools.WinForms.RasterImageList.ItemImageSize"/> plus
            room for <see cref="P:Leadtools.WinForms.RasterImageList.ItemBorderStyle"/> and <see cref="P:Leadtools.WinForms.RasterImageList.ItemImageBorderStyle"/>.  If you set the
            <see cref="P:Leadtools.WinForms.RasterImageList.ShowItemText"/> property to <b>true</b>, then you should also accommodate room for the item text
            in your calculations.</p>
            <p>For more information about item appearance, refer to <a href="RasterImageListAppearance.html">RasterImageList Appearance</a>.</p>
            </remarks>
            <example>
            For an example, refer to <see cref="E:Leadtools.WinForms.RasterImageList.DrawItem"/> event.
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageList.ItemSizeChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.ItemSize"/> property changes.
            </summary>
            <remarks>
            <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.ItemSize"/> property is changed by either a programmatic
            modification or user interaction.</p>
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageList.ItemImageSize">
            <summary>
            Gets or sets the maximum size of the image of each <see cref="T:Leadtools.WinForms.RasterImageListItem"/> in the control.
            </summary>
            <value>A <see cref="T:System.Drawing.Size"/> structure that specifies the maximum size of the image of each
            <see cref="T:Leadtools.WinForms.RasterImageListItem"/> in this <see cref="T:Leadtools.WinForms.RasterImageList"/> in pixels.</value>
            <remarks>
            <p>The <b>ItemImageSize</b> specifies the maximum size of the image of each item in the
            <see cref="T:Leadtools.WinForms.RasterImageList"/> control.  The <see cref="P:Leadtools.WinForms.RasterImageListItem.Image">RasterImageListItem.Image</see>
            of each image is drawn into the item surface using the maximum size possible of <b>ItemImageSize</b> while
            maintaining the aspect ratio of the image.  If the
            <see cref="P:Leadtools.WinForms.RasterImageListItem.Image">RasterImageListItem.Image</see> of an item is smaller than
            <b>ItemImageSize</b>, then no re-sizing is done when the image is drawn.  In other words, the
            <see cref="T:Leadtools.WinForms.RasterImageList"/> control implements a "Fit if larger" drawing algorithm when the item images are
            painted.</p>
            <p>When changing any of the item sizes or styles, you should pay special attention to the values you specify,
            in general, you should setup <see cref="P:Leadtools.WinForms.RasterImageList.ItemSize"/> to be large enough to accommodate <b>ItemImageSize</b> plus
            room for <see cref="P:Leadtools.WinForms.RasterImageList.ItemBorderStyle"/> and <see cref="P:Leadtools.WinForms.RasterImageList.ItemImageBorderStyle"/>.  If you set the
            <see cref="P:Leadtools.WinForms.RasterImageList.ShowItemText"/> property to <b>true</b>, then you should also accommodate room for the item text
            in your calculations.</p>
            <p>For more information about item appearance, refer to <a href="RasterImageListAppearance.html">RasterImageList Appearance</a>.</p>
            </remarks>
            <example>
            For an example, refer to <see cref="E:Leadtools.WinForms.RasterImageList.DrawItem"/> event.
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageList.ItemImageSizeChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.ItemImageSize"/> property changes.
            </summary>
            <remarks>
            <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.ItemImageSize"/> property is changed by either a programmatic
            modification or user interaction.</p>
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageList.ItemImageBorderStyle">
            <summary>
            Gets or sets the border style to draw around the image of an <see cref="T:Leadtools.WinForms.RasterImageListItem"/> in the control.
            </summary>
            <value>A <see cref="P:Leadtools.WinForms.RasterImageList.BorderStyle"/> enumeration that specifies the border to draw around the image of an
            <see cref="T:Leadtools.WinForms.RasterImageListItem"/> in the control.</value>
            <remarks>
            <p>The <b>ItemImageBorderStyle</b> property is only supported when the value of the
            <see cref="P:Leadtools.WinForms.RasterImageList.ViewStyle"/> is set to <b>RasterImageListViewStyle.Normal</b></p>
            <p>When changing any of the item sizes or styles, you should pay special attention to the values you specify,
            in general, you should setup <see cref="P:Leadtools.WinForms.RasterImageList.ItemSize"/> to be large enough to accommodate
            <see cref="P:Leadtools.WinForms.RasterImageList.ItemImageSize"/> plus room for <see cref="P:Leadtools.WinForms.RasterImageList.ItemBorderStyle"/> and <b>ItemImageBorderStyle</b>.  If
            you set the <see cref="P:Leadtools.WinForms.RasterImageList.ShowItemText"/> property to <b>true</b>, then you should also accommodate room for the
            item text in your calculations.</p>
            <p>For more information about item appearance, refer to <a href="RasterImageListAppearance.html">RasterImageList Appearance</a>.</p>
            </remarks>
            <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.ItemBorderStyle"/>
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageList.ItemImageBorderStyleChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.ItemImageBorderStyle"/> property changes.
            </summary>
            <remarks>
            <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.ItemImageBorderStyle"/> property is changed by either a programmatic
            modification or user interaction.</p>
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageList.ItemBorderStyle">
            <summary>
            Gets or sets the border style to draw around the <see cref="T:Leadtools.WinForms.RasterImageListItem"/> in the control.
            </summary>
            <value>A <see cref="P:Leadtools.WinForms.RasterImageList.BorderStyle"/> enumeration that specifies the border to draw around the
            <see cref="T:Leadtools.WinForms.RasterImageListItem"/> in the control.</value>
            <remarks>
            <p>The <b>ItemBorderStyle</b> property is only supported when the value of the
            <see cref="P:Leadtools.WinForms.RasterImageList.ViewStyle"/> is set to <b>RasterImageListViewStyle.Normal</b></p>
            <p>When changing any of the item sizes or styles, you should pay special attention to the values you specify,
            in general, you should setup <see cref="P:Leadtools.WinForms.RasterImageList.ItemSize"/> to be large enough to accommodate
            <see cref="P:Leadtools.WinForms.RasterImageList.ItemImageSize"/> plus room for <b>ItemBorderStyle</b> and <see cref="P:Leadtools.WinForms.RasterImageList.ItemImageBorderStyle"/>.  If
            you set the <see cref="P:Leadtools.WinForms.RasterImageList.ShowItemText"/> property to <b>true</b>, then you should also accommodate room for the
            item text in your calculations.</p>
            <p>For more information about item appearance, refer to <a href="RasterImageListAppearance.html">RasterImageList Appearance</a>.</p>
            </remarks>
            <example>
            This example assumes that you have added the code to a Form and call the method created in the example from the
            constructor or another method on the form.
            <p><b>VB.NET</b></p>
            <code>
            Imports Leadtools
            Imports Leadtools.Codecs
            Imports Leadtools.WinForms
            
            Private Sub ItemStylesTest()
               ' Create a new RasterImageList control.
               Dim rasterImageList1 As New RasterImageList
               rasterImageList1.Bounds = New Rectangle(New Point(10, 10), New Size(400, 400))
            
               ' Sort the items in the list in ascending order.
               rasterImageList1.Sorting = SortOrder.Ascending
            
               ' Initialize the RasterCodecs class
               RasterCodecs.CodecsPath = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin"
               Dim codecs As New RasterCodecs
            
               ' Create three items
               Dim imagesPath As String = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\"
            
               For i As Integer = 0 To 2
                  ' Load the image
                  Dim index As Integer = i + 1
                  Dim imageFileName As String = imagesPath + "Image" + index.ToString() + ".cmp"
                  Dim image As IRasterImage = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
                  Dim item As New RasterImageListItem(image, 1, "Item" + index.ToString())
            
                  ' Select the first item
                  If (i = 0) Then
                     item.Selected = True
                  End If
            
                  ' Add the item to the image list
                  rasterImageList1.Items.Add(item)
               Next
            
               ' Add the RasterImageList to the control collection.
               Me.Controls.Add(rasterImageList1)
            
               ' Apply our custom item styles
            
               rasterImageList1.BeginUpdate()
            
               ' Make sure we are using Normal style
               rasterImageList1.ViewStyle = RasterImageListViewStyle.Normal
            
               ' Draw a border around the item
               rasterImageList1.ItemBorderStyle = BorderStyle.FixedSingle
            
               ' Draw a border around the image inside each item
               rasterImageList1.ItemImageBorderStyle = BorderStyle.FixedSingle
            
               ' Leave 10 pixels between each adjucent items
               rasterImageList1.ItemSpacingSize = New Size(10, 10)
            
               ' Apply a dark cyan/white color scheme
               rasterImageList1.ItemForeColor = Color.DarkCyan
               rasterImageList1.ItemSelectedForeColor = Color.White
               rasterImageList1.ItemBackColor = Color.White
               rasterImageList1.ItemSelectedBackColor = Color.DarkCyan
            
               rasterImageList1.EndUpdate()
            End Sub
            </code>
            <p><b>C#</b></p>
            <code>
            using Leadtools;
            using Leadtools.Codecs;
            using Leadtools.WinForms;
            
            private void ItemStylesTest()
            {
               // Create a new RasterImageList control.
               RasterImageList rasterImageList1 = new RasterImageList();
               rasterImageList1.Bounds = new Rectangle(new Point(10, 10), new Size(400, 400));
            
               // Sort the items in the list in ascending order.
               rasterImageList1.Sorting = SortOrder.Ascending;
            
               // Initialize the RasterCodecs class
               RasterCodecs.CodecsPath = @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin";
               RasterCodecs codecs = new RasterCodecs();
            
               // Create three items
               string imagesPath = @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\";
            
               for(int i = 0; i &lt; 3; i++)
               {
                  // Load the image
                  int index = i + 1;
                  string imageFileName = imagesPath + "Image" + index.ToString() + ".cmp";
                  IRasterImage image = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1);
                  RasterImageListItem item = new RasterImageListItem(image, 1, "Item" + index.ToString());
            
                  // Select the first item
                  if(i == 0)
                     item.Selected = true;
            
                  // Add the item to the image list
                  rasterImageList1.Items.Add(item);
               }
            
               // Add the RasterImageList to the control collection.
               this.Controls.Add(rasterImageList1);
            
               // Apply our custom item styles
            
               rasterImageList1.BeginUpdate();
            
               // Make sure we are using Normal style
               rasterImageList1.ViewStyle = RasterImageListViewStyle.Normal;
            
               // Draw a border around the item
               rasterImageList1.ItemBorderStyle = BorderStyle.FixedSingle;
            
               // Draw a border around the image inside each item
               rasterImageList1.ItemImageBorderStyle = BorderStyle.FixedSingle;
            
               // Leave 10 pixels between each adjucent items
               rasterImageList1.ItemSpacingSize = new Size(10, 10);
            
               // Apply a dark cyan/white color scheme
               rasterImageList1.ItemForeColor = Color.DarkCyan;
               rasterImageList1.ItemSelectedForeColor = Color.White;
               rasterImageList1.ItemBackColor = Color.White;
               rasterImageList1.ItemSelectedBackColor = Color.DarkCyan;
            
               rasterImageList1.EndUpdate();
            }
            </code>
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageList.ItemBorderStyleChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.ItemBorderStyle"/> property changes.
            </summary>
            <remarks>
            <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.ItemBorderStyle"/> property is changed by either a programmatic
            modification or user interaction.</p>
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageList.ItemSpacingSize">
            <summary>
            Gets or sets the amount of space between adjacent items in the control.
            </summary>
            <value>A <see cref="T:System.Drawing.Size"/> structure that contains the amount of space between adjacent items in this
            <see cref="T:Leadtools.WinForms.RasterImageList"/> control in pixels.</value>
            <remarks>
            <p>For more information about item appearance, refer to <a href="RasterImageListAppearance.html">RasterImageList Appearance</a>.</p>
            </remarks>
            <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.ItemBorderStyle"/>
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageList.ItemSpacingSizeChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.ItemSpacingSize"/> property changes.
            </summary>
            <remarks>
            <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.ItemSpacingSize"/> property is changed by either a programmatic
            modification or user interaction.</p>
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageList.ItemForeColor">
            <summary>
            Gets or sets the foreground color of the un-selected items in this <see cref="T:Leadtools.WinForms.RasterImageList"/>
            </summary>
            <value>The foreground color of the un-selected items in this <see cref="T:Leadtools.WinForms.RasterImageList"/></value>
            <remarks>
            <p>How the <see cref="P:Leadtools.WinForms.RasterImageList.ItemForeColor"/> value is used to draw the items depends on the current <see cref="P:Leadtools.WinForms.RasterImageList.ViewStyle"/>.  The
            following table lists all the cases:
            <list type="table">
              <listheader>
                 <term>ViewStyle</term>
                 <description>Description</description>
               </listheader>
              <item>
                 <term><see cref="F:Leadtools.WinForms.RasterImageListViewStyle.Normal"/></term>
                 <description>Draw the text of un-selected items.</description>
              </item>
              <item>
                 <term><see cref="F:Leadtools.WinForms.RasterImageListViewStyle.Explorer"/></term>
                 <description>Draw the text of un-selected items.</description>
              </item>
              <item>
                 <term><see cref="F:Leadtools.WinForms.RasterImageListViewStyle.Button"/></term>
                 <description>Draw the text of all items.</description>
              </item>
            </list>
            </p>
            <p>For more information about item appearance, refer to <a href="RasterImageListAppearance.html">RasterImageList Appearance</a>.</p>
            </remarks>
            <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.ItemBorderStyle"/>
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageList.ItemForeColorChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.ItemForeColor"/> property changes.
            </summary>
            <remarks>
            <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.ItemForeColor"/> property is changed by either a programmatic
            modification or user interaction.</p>
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageList.ItemSelectedForeColor">
            <summary>
            Gets or sets the foreground color of the selected items in this <see cref="T:Leadtools.WinForms.RasterImageList"/>.
            </summary>
            <value>The foreground color of the selected items in this <see cref="T:Leadtools.WinForms.RasterImageList"/></value>.
            <remarks>
            <p>How the <b>ItemSelectedForeColor</b> value is used to draw the items depends on the current <see cref="P:Leadtools.WinForms.RasterImageList.ViewStyle"/>.  The
            following table lists all the cases:
            <list type="table">
              <listheader>
                 <term>ViewStyle</term>
                 <description>Description</description>
               </listheader>
              <item>
                 <term><see cref="F:Leadtools.WinForms.RasterImageListViewStyle.Normal"/></term>
                 <description>Fills the background of selected items.</description>
              </item>
              <item>
                 <term><see cref="F:Leadtools.WinForms.RasterImageListViewStyle.Explorer"/></term>
                 <description>Draw the text of selected items as well as a rectangle around the image of selected items.</description>
              </item>
              <item>
                 <term><see cref="F:Leadtools.WinForms.RasterImageListViewStyle.Button"/></term>
                 <description>Not used.</description>
              </item>
            </list>
            </p>
            <p>For more information about item appearance, refer to <a href="RasterImageListAppearance.html">RasterImageList Appearance</a>.</p>
            </remarks>
            <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.ItemBorderStyle"/>
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageList.ItemSelectedForeColorChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.ItemSelectedForeColor"/> property changes.
            </summary>
            <remarks>
            <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.ItemSelectedForeColor"/> property is changed by either a programmatic
            modification or user interaction.</p>
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageList.ItemBackColor">
            <summary>
            Gets or sets the item background color of the un-selected items in this <see cref="T:Leadtools.WinForms.RasterImageList"/>
            </summary>
            <value>The item background color of the un-selected items in this <see cref="T:Leadtools.WinForms.RasterImageList"/></value>
            <remarks>
            <p>How the <b>ItemBackColor</b> value is used to draw the items depends on the current <see cref="P:Leadtools.WinForms.RasterImageList.ViewStyle"/>.  The
            following table lists all the cases:
            <list type="table">
              <listheader>
                 <term>ViewStyle</term>
                 <description>Description</description>
               </listheader>
              <item>
                 <term><see cref="F:Leadtools.WinForms.RasterImageListViewStyle.Normal"/></term>
                 <description>Fills the background of un-selected items.</description>
              </item>
              <item>
                 <term><see cref="F:Leadtools.WinForms.RasterImageListViewStyle.Explorer"/></term>
                 <description>Not used.</description>
              </item>
              <item>
                 <term><see cref="F:Leadtools.WinForms.RasterImageListViewStyle.Button"/></term>
                 <description>Not used.</description>
              </item>
            </list>
            </p>
            <p>For more information about item appearance, refer to <a href="RasterImageListAppearance.html">RasterImageList Appearance</a>.</p>
            </remarks>
            <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.ItemBorderStyle"/>
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageList.ItemBackColorChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.ItemBackColor"/> property changes.
            </summary>
            <remarks>
            <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.ItemBackColor"/> property is changed by either a programmatic
            modification or user interaction.</p>
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageList.ItemSelectedBackColor">
            <summary>
            Gets or sets the item background color of the selected items in this <see cref="T:Leadtools.WinForms.RasterImageList"/>.
            </summary>
            <value>The item background color of the selected items in this <see cref="T:Leadtools.WinForms.RasterImageList"/></value>.
            <remarks>
            <p>How the <b>ItemSelectedBackColor</b> value is used to draw the items depends on the current <see cref="P:Leadtools.WinForms.RasterImageList.ViewStyle"/>.  The
            following table lists all the cases:
            <list type="table">
              <listheader>
                 <term>ViewStyle</term>
                 <description>Description</description>
               </listheader>
              <item>
                 <term><see cref="F:Leadtools.WinForms.RasterImageListViewStyle.Normal"/></term>
                 <description>Fills the background of selected items.</description>
              </item>
              <item>
                 <term><see cref="F:Leadtools.WinForms.RasterImageListViewStyle.Explorer"/></term>
                 <description>When an item is selected, this color is used to fill the background behind the text
                 of the item and to draw a rectangle around the image.</description>
              </item>
              <item>
                 <term><see cref="F:Leadtools.WinForms.RasterImageListViewStyle.Button"/></term>
                 <description>Not used.</description>
              </item>
            </list>
            </p>
            <p>For more information about item appearance, refer to <a href="RasterImageListAppearance.html">RasterImageList Appearance</a>.</p>
            </remarks>
            <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.ItemBorderStyle"/>
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageList.ItemSelectedBackColorChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.ItemSelectedBackColor"/> property changes.
            </summary>
            <remarks>
            <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.ItemSelectedBackColor"/> property is changed by either a programmatic
            modification or user interaction.</p>
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageList.SelectUserImage">
            <summary>
            Gets or sets a user-defined image to use as the selection marker.
            </summary>
            <value>A user-defined <see cref="T:Leadtools.IRasterImage"/> to use as the selection marker.
            Default value is null (Nothing in Visual Basic).</value>
            <remarks>
            <p>The user defined image selection marker is used only when <see cref="P:Leadtools.WinForms.RasterImageList.ViewStyle"/> is set
            to <b>RasterImageListViewStyle.Normal</b>.  It is ignored in all other styles.</p>
            <p>When you set an image into the <b>SelectUserImage</b>, the specified image will be displayed around
            each selected item.</p>
            <p>Normally, you would want to set a transparent color into this image using the
            <see cref="P:Leadtools.IRasterImage.Transparent">IRasterImage.Transparent</see> and
            <see cref="P:Leadtools.IRasterImage.TransparentColor">IRasterImage.TransparentColor</see> properties of the
            <see cref="T:Leadtools.IRasterImage"/> class.</p>
            </remarks>
            <example>
            This example will use a user-defined image as the selection marker of an <see cref="T:Leadtools.WinForms.RasterImageList"/> control.
            This example assumes that you have added the code to a Form and call the method created in the example from the
            constructor or another method on the form.
            <p><b>VB.NET</b></p>
            <code>
            Imports Leadtools
            Imports Leadtools.Codecs
            Imports Leadtools.WinForms
            
            Private Sub SelectUserImageTest()
               ' Create a new RasterImageList control.
               Dim rasterImageList1 As New RasterImageList
               rasterImageList1.Bounds = New Rectangle(New Point(10, 10), New Size(400, 400))
            
               ' Sort the items in the list in ascending order.
               rasterImageList1.Sorting = SortOrder.Ascending
            
               ' Initialize the RasterCodecs class
               RasterCodecs.CodecsPath = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin"
               Dim codecs As New RasterCodecs
            
               ' Create three items
               Dim imagesPath As String = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\"
            
               For i As Integer = 0 To 2
                  ' Load the image
                  Dim index As Integer = i + 1
                  Dim imageFileName As String = imagesPath + "Image" + index.ToString() + ".cmp"
                  Dim image As IRasterImage = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
                  Dim item As New RasterImageListItem(image, 1, "Item" + index.ToString())
            
                  ' Select the first item
                  If (i = 0) Then
                     item.Selected = True
                  End If
            
                  ' Add the item to the image list
                  rasterImageList1.Items.Add(item)
               Next
            
               ' Use "Normal" view style
               rasterImageList1.ViewStyle = RasterImageListViewStyle.Normal
            
               ' Create the user-defined image to use as the selection marker (an ellipse)
               Dim selectImage As New RasterImage( _
                  RasterMemoryFlags.Managed, _
                  rasterImageList1.ItemSize.Width, _
                  rasterImageList1.ItemSize.Height, _
                  24, _
                  RasterByteOrder.Bgr, _
                  RasterViewPerspective.TopLeft, _
                  Nothing, _
                  Nothing)
            
               ' Draw the ellipse
               Dim hdc As IntPtr = selectImage.CreateLeadDC()
               Dim g As Graphics = Graphics.FromHdc(hdc)
            
               Dim rc As New Rectangle(0, 0, selectImage.ImageWidth, selectImage.ImageHeight)
               g.FillRectangle(Brushes.Black, rc)
               For i As Integer = 0 To 3
                  g.DrawEllipse(Pens.Red, rc.Left, rc.Top, rc.Width - 1, rc.Height - 1)
                  rc.Inflate(-1, -1)
               Next
            
               g.Dispose()
               selectImage.DeleteLeadDC(hdc)
            
               ' Set the transparent color
               selectImage.Transparent = True
               selectImage.TransparentColor = RasterColor.FromGdiPlusColor(Color.Black)
            
               ' Set this image as the selection marker
               rasterImageList1.SelectUserImage = selectImage
            
               ' Add the RasterImageList to the control collection.
               Me.Controls.Add(rasterImageList1)
            End Sub
            </code>
            <p><b>C#</b></p>
            <code>
            using Leadtools;
            using Leadtools.Codecs;
            using Leadtools.WinForms;
            
            private void SelectUserImageTest()
            {
               // Create a new RasterImageList control.
               RasterImageList rasterImageList1 = new RasterImageList();
               rasterImageList1.Bounds = new Rectangle(new Point(10, 10), new Size(400, 400));
            
               // Sort the items in the list in ascending order.
               rasterImageList1.Sorting = SortOrder.Ascending;
            
               // Initialize the RasterCodecs class
               RasterCodecs.CodecsPath = @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin";
               RasterCodecs codecs = new RasterCodecs();
            
               // Create three items
               string imagesPath = @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\";
            
               for(int i = 0; i &lt; 3; i++)
               {
                  // Load the image
                  int index = i + 1;
                  string imageFileName = imagesPath + "Image" + index.ToString() + ".cmp";
                  IRasterImage image = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1);
                  RasterImageListItem item = new RasterImageListItem(image, 1, "Item" + index.ToString());
            
                  // Select the first item
                  if(i == 0)
                     item.Selected = true;
            
                  // Add the item to the image list
                  rasterImageList1.Items.Add(item);
               }
            
               // Use "Normal" view style
               rasterImageList1.ViewStyle = RasterImageListViewStyle.Normal;
            
               // Create the user-defined image to use as the selection marker (an ellipse)
               RasterImage selectImage = new RasterImage(
                  RasterMemoryFlags.Managed,
                  rasterImageList1.ItemSize.Width,
                  rasterImageList1.ItemSize.Height,
                  24,
                  RasterByteOrder.Bgr,
                  RasterViewPerspective.TopLeft,
                  null,
                  null);
            
               // Draw the ellipse
               IntPtr hdc = selectImage.CreateLeadDC();
               Graphics g = Graphics.FromHdc(hdc);
            
               Rectangle rc = new Rectangle(0, 0, selectImage.ImageWidth, selectImage.ImageHeight);
               g.FillRectangle(Brushes.Black, rc);
               for(int i = 0; i &lt; 4; i++)
               {
                  g.DrawEllipse(Pens.Red, rc.Left, rc.Top, rc.Width - 1, rc.Height - 1);
                  rc.Inflate(-1, -1);
               }
            
               g.Dispose();
               selectImage.DeleteLeadDC(hdc);
            
               // Set the transparent color
               selectImage.Transparent = true;
               selectImage.TransparentColor = RasterColor.FromGdiPlusColor(Color.Black);
            
               // Set this image as the selection marker
               rasterImageList1.SelectUserImage = selectImage;
            
               // Add the RasterImageList to the control collection.
               this.Controls.Add(rasterImageList1);
            }
            </code>
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageList.SelectUserImageChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.SelectUserImage"/> property changes.
            </summary>
            <remarks>
            <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.SelectUserImage"/> property is changed by either a programmatic
            modification or user interaction.</p>
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageList.SelectionMode">
            <summary>
            Gets or sets whether automatic item selection is allowed.
            </summary>
            <value>An <see cref="T:Leadtools.WinForms.RasterImageListSelectionMode"/> enumeration that indicates whether automatic item
            selection is allowed.  Default value is <b>RasterImageListSelectionMode.Single</b>.</value>
            <remarks>
            <p>If automatic item selection is enabled, items are automatically selected and de-selected when the user
            clicks on them using the mouse or when moving the current selected item using the keyboard.</p>
            <p>For more information, refer to the <see cref="T:Leadtools.WinForms.RasterImageListSelectionMode"/> enumeration.</p>
            </remarks>
            <example>
            This example shows how to preform manual selection on a <see cref="T:Leadtools.WinForms.RasterImageList"/> control. This example
            assumes that you have added the code to a Form and call the method created in the example from the constructor
            or another method on the form.
            <p><b>VB.NET</b></p>
            <code>
            Imports Leadtools
            Imports Leadtools.Codecs
            Imports Leadtools.WinForms
            
            Private Sub SelectionModeTest()
               ' Create a new RasterImageList control.
               Dim rasterImageList1 As New RasterImageList
               rasterImageList1.Bounds = New Rectangle(New Point(10, 10), New Size(400, 400))
            
               ' Sort the items in the list in ascending order.
               rasterImageList1.Sorting = SortOrder.Ascending
            
               ' Initialize the RasterCodecs class
               RasterCodecs.CodecsPath = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin"
               Dim codecs As New RasterCodecs
            
               ' Create three items
               Dim imagesPath As String = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\"
            
               For i As Integer = 0 To 2
                  ' Load the image
                  Dim index As Integer = i + 1
                  Dim imageFileName As String = imagesPath + "Image" + index.ToString() + ".cmp"
                  Dim image As IRasterImage = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
                  Dim item As New RasterImageListItem(image, 1, "Item" + index.ToString())
            
                  ' Add the item to the image list
                  rasterImageList1.Items.Add(item)
               Next
            
               ' Use manual selection
               rasterImageList1.SelectionMode = RasterImageListSelectionMode.None
            
               ' Add a handler to the MouseDown event so can perform our own selection.
               AddHandler rasterImageList1.MouseDown, AddressOf rasterImageList1_MouseDown
            
               ' Add the RasterImageList to the control collection.
               Me.Controls.Add(rasterImageList1)
            End Sub
            
            Private Sub rasterImageList1_MouseDown(ByVal sender As Object, ByVal e As MouseEventArgs)
               Dim imageList As RasterImageList = DirectCast(sender, RasterImageList)
            
               ' Check if we are in manual selection mode and if this is a left button click
               If (imageList.SelectionMode = RasterImageListSelectionMode.None AndAlso _
                  e.Button = MouseButtons.Left) Then
                  ' Yes, get the item under the cursor position
                  Dim item As RasterImageListItem = imageList.HitTest(e.X, e.Y)
            
                  ' If not already selected, select this item
                  If (Not item Is Nothing AndAlso Not item.Selected) Then
                     imageList.BeginUpdate()
            
                     ' First, de-select any items
                     imageList.SelectAll(False)
            
                     ' Now select this item
                     item.Selected = True
            
                     imageList.EndUpdate()
            
                     item.Invalidate()
                  End If
               End If
            End Sub
            </code>
            <p><b>VB.NET</b></p>
            <code>
            using Leadtools;
            using Leadtools.Codecs
            using Leadtools.WinForms
            
            private void SelectionModeTest()
            {
               // Create a new RasterImageList control.
               RasterImageList rasterImageList1 = new RasterImageList();
               rasterImageList1.Bounds = new Rectangle(new Point(10, 10), new Size(400, 400));
            
               // Sort the items in the list in ascending order.
               rasterImageList1.Sorting = SortOrder.Ascending;
            
               // Initialize the RasterCodecs class
               RasterCodecs.CodecsPath = @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin";
               RasterCodecs codecs = new RasterCodecs();
            
               // Create three items
               string imagesPath = @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\";
            
               for(int i = 0; i &lt; 3; i++)
               {
                  // Load the image
                  int index = i + 1;
                  string imageFileName = imagesPath + "Image" + index.ToString() + ".cmp";
                  IRasterImage image = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1);
                  RasterImageListItem item = new RasterImageListItem(image, 1, "Item" + index.ToString());
            
                  // Add the item to the image list
                  rasterImageList1.Items.Add(item);
               }
            
               // Use manual selection
               rasterImageList1.SelectionMode = RasterImageListSelectionMode.None;
            
               // Add a handler to the MouseDown event so can perform our own selection.
               rasterImageList1.MouseDown += new MouseEventHandler(rasterImageList1_MouseDown);
            
               // Add the RasterImageList to the control collection.
               this.Controls.Add(rasterImageList1);
            }
            
            private void rasterImageList1_MouseDown(object sender, MouseEventArgs e)
            {
               RasterImageList imageList = sender as RasterImageList;
            
               // Check if we are in manual selection mode and if this is a left button click
               if(imageList.SelectionMode == RasterImageListSelectionMode.None &amp;&amp;
                  e.Button == MouseButtons.Left)
               {
                  // Yes, get the item under the cursor position
                  RasterImageListItem item = imageList.HitTest(e.X, e.Y);
            
                  // If not already selected, select this item
                  if(item != null &amp;&amp; !item.Selected)
                  {
                     imageList.BeginUpdate();
            
                     // First, de-select any items
                     imageList.SelectAll(false);
            
                     // Now select this item
                     item.Selected = true;
            
                     imageList.EndUpdate();
            
                     item.Invalidate();
                  }
               }
            }
            </code>
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageList.SelectionModeChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.SelectionMode"/> property changes.
            </summary>
            <remarks>
            <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.SelectionMode"/> property is changed by either a programmatic
            modification or user interaction.</p>
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageList.ViewStyle">
            <summary>
            Gets or sets how items are displayed in the control.
            </summary>
            <value>A <see cref="T:Leadtools.WinForms.RasterImageListViewStyle"/> enumeration that specifies how the items
            are displayed in the control.</value>
            <remarks>
            For more information, refer to the <see cref="T:Leadtools.WinForms.RasterImageListViewStyle"/> enumeration.
            </remarks>
            <example>
            This example will show the different view styles of a <see cref="T:Leadtools.WinForms.RasterImageList"/> control. This example assumes
            that you have added the code to a Form and call the method created in the example from the constructor or
            another method on the form.
            <p><b>VB.NET</b></p>
            <code>
            Imports Leadtools
            Imports Leadtools.Codecs
            Imports Leadtools.WinForms
            
            Private Sub ViewStyleTest()
               ' Create a new RasterImageList control.
               Dim rasterImageList1 As New RasterImageList
               rasterImageList1.Bounds = New Rectangle(New Point(10, 10), New Size(400, 400))
            
               ' Sort the items in the list in ascending order.
               rasterImageList1.Sorting = SortOrder.Ascending
            
               ' Initialize the RasterCodecs class
               RasterCodecs.CodecsPath = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin"
               Dim codecs As New RasterCodecs
            
               ' Create three items
               Dim imagesPath As String = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\"
            
               For i As Integer = 0 To 2
                  ' Load the image
                  Dim index As Integer = i + 1
                  Dim imageFileName As String = imagesPath + "Image" + index.ToString() + ".cmp"
                  Dim image As IRasterImage = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
                  Dim item As New RasterImageListItem(image, 1, "Item" + index.ToString())
            
                  ' Select the first item
                  If (i = 0) Then
                     item.Selected = True
                  End If
            
                  ' Add the item to the image list
                  rasterImageList1.Items.Add(item)
               Next
            
               ' Add the RasterImageList to the control collection.
               Me.Controls.Add(rasterImageList1)
            
               ' Save the current view style
               Dim currentStyle As RasterImageListViewStyle = rasterImageList1.ViewStyle
            
               ' Show all the different styles available
               Dim a As Array = System.Enum.GetValues(GetType(RasterImageListViewStyle))
               For Each style As RasterImageListViewStyle In a
                  rasterImageList1.ViewStyle = style
                  MessageBox.Show("ViewStyle = " + style.ToString())
               Next
            
               ' Restore original view style
               rasterImageList1.ViewStyle = currentStyle
            End Sub
            </code>
            <p><b>C#</b></p>
            <code>
            using Leadtools;
            using Leadtools.Codecs;
            using Leadtools.WinForms;
            
            private void ViewStyleTest()
            {
               // Create a new RasterImageList control.
               RasterImageList rasterImageList1 = new RasterImageList();
               rasterImageList1.Bounds = new Rectangle(new Point(10, 10), new Size(400, 400));
            
               // Sort the items in the list in ascending order.
               rasterImageList1.Sorting = SortOrder.Ascending;
            
               // Initialize the RasterCodecs class
               RasterCodecs.CodecsPath = @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin";
               RasterCodecs codecs = new RasterCodecs();
            
               // Create three items
               string imagesPath = @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\";
            
               for(int i = 0; i &lt; 3; i++)
               {
                  // Load the image
                  int index = i + 1;
                  string imageFileName = imagesPath + "Image" + index.ToString() + ".cmp";
                  IRasterImage image = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1);
                  RasterImageListItem item = new RasterImageListItem(image, 1, "Item" + index.ToString());
            
                  // Select the first item
                  if(i == 0)
                     item.Selected = true;
            
                  // Add the item to the image list
                  rasterImageList1.Items.Add(item);
               }
            
               // Add the RasterImageList to the control collection.
               this.Controls.Add(rasterImageList1);
            
               // Save the current view style
               RasterImageListViewStyle currentStyle = rasterImageList1.ViewStyle;
            
               // Show all the different styles available
               Array a = Enum.GetValues(typeof(RasterImageListViewStyle));
               foreach(RasterImageListViewStyle style in a)
               {
                  rasterImageList1.ViewStyle = style;
                  MessageBox.Show("ViewStyle = " + style.ToString());
               }
            
               // Restore original view style
               rasterImageList1.ViewStyle = currentStyle;
            }
            </code>
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageList.ViewStyleChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.ViewStyle"/> property changes.
            </summary>
            <remarks>
            <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.ViewStyle"/> property is changed by either a programmatic
            modification or user interaction.</p>
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageList.ShowItemText">
            <summary>
            Indicates whether the item text is shown in the control.
            </summary>
            <value><b>true</b> if the item text is shown in the control; otherwise, <b>false</b>.  Default is <b>true</b></value>
            <remarks>
            When the value of the <b>ShowItemText</b> property is set to <b>true</b>, the item
            <see cref="P:Leadtools.WinForms.RasterImageListItem.Text">RasterImageListItem.Text</see> value is shown in the item.
            </remarks>
            <example>
            This example will show a <see cref="T:Leadtools.WinForms.RasterImageList"/> control with the item text and then without the text.
            This example assumes that you have added the code to a Form and call the method created in the example from the
            constructor or another method on the form.
            <p><b>VB.NET</b></p>
            <code>
            Imports Leadtools
            Imports Leadtools.Codecs
            Imports Leadtools.WinForms
            
            Private Sub ViewStyleTest()
               ' Create a new RasterImageList control.
               Dim rasterImageList1 As New RasterImageList
               rasterImageList1.Bounds = New Rectangle(New Point(10, 10), New Size(400, 400))
            
               ' Sort the items in the list in ascending order.
               rasterImageList1.Sorting = SortOrder.Ascending
            
               ' Initialize the RasterCodecs class
               RasterCodecs.CodecsPath = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin"
               Dim codecs As New RasterCodecs
            
               ' Create three items
               Dim imagesPath As String = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\"
            
               For i As Integer = 0 To 2
                  ' Load the image
                  Dim index As Integer = i + 1
                  Dim imageFileName As String = imagesPath + "Image" + index.ToString() + ".cmp"
                  Dim image As IRasterImage = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
                  Dim item As New RasterImageListItem(image, 1, "Item" + index.ToString())
            
                  ' Select the first item
                  If (i = 0) Then
                     item.Selected = True
                  End If
            
                  ' Add the item to the image list
                  rasterImageList1.Items.Add(item)
               Next
            
               ' Add the RasterImageList to the control collection.
               Me.Controls.Add(rasterImageList1)
            
               ' Show the item text
               rasterImageList1.ShowItemText = True
               MessageBox.Show("Item text is visible")
            
               ' Hide the item text
               rasterImageList1.ShowItemText = False
               MessageBox.Show("Item text is not visible")
            
               ' Show the item text again
               rasterImageList1.ShowItemText = True
               MessageBox.Show("Item text is visible again")
            End Sub
            </code>
            <p><b>C#</b></p>
            <code>
            using Leadtools;
            using Leadtools.Codecs;
            using Leadtools.WinForms;
            
            private void ShowItemTextTest()
            {
               // Create a new RasterImageList control.
               RasterImageList rasterImageList1 = new RasterImageList();
               rasterImageList1.Bounds = new Rectangle(new Point(10, 10), new Size(400, 400));
            
               // Sort the items in the list in ascending order.
               rasterImageList1.Sorting = SortOrder.Ascending;
            
               // Initialize the RasterCodecs class
               RasterCodecs.CodecsPath = @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin";
               RasterCodecs codecs = new RasterCodecs();
            
               // Create three items
               string imagesPath = @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\";
            
               for(int i = 0; i &lt; 3; i++)
               {
                  // Load the image
                  int index = i + 1;
                  string imageFileName = imagesPath + "Image" + index.ToString() + ".cmp";
                  IRasterImage image = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1);
                  RasterImageListItem item = new RasterImageListItem(image, 1, "Item" + index.ToString());
            
                  // Select the first item
                  if(i == 0)
                     item.Selected = true;
            
                  // Add the item to the image list
                  rasterImageList1.Items.Add(item);
               }
            
               // Add the RasterImageList to the control collection.
               this.Controls.Add(rasterImageList1);
            
               // Show the item text
               rasterImageList1.ShowItemText = true;
               MessageBox.Show("Item text is visible");
            
               // Hide the item text
               rasterImageList1.ShowItemText = false;
               MessageBox.Show("Item text is not visible");
            
               // Show the item text again
               rasterImageList1.ShowItemText = true;
               MessageBox.Show("Item text is visible again");
            }
            </code>
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageList.ShowItemTextChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.ShowItemText"/> property changes.
            </summary>
            <remarks>
            <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.ShowItemText"/> property is changed by either a programmatic
            modification or user interaction.</p>
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageList.ScrollStyle">
            <summary>
            Specifies the direction the <see cref="T:Leadtools.WinForms.RasterImageList"/> Control scrolls the displayed items.
            </summary>
            <value>A <see cref="T:Leadtools.WinForms.RasterImageListScrollStyle"/> enumeration that specifies the direction the
            <see cref="T:Leadtools.WinForms.RasterImageList"/> Control scrolls the displayed items.  Default value is 
            <b>RasterImageListScrollStyle.Vertical</b>.</value>
            <example>
            This example will create an <see cref="T:Leadtools.WinForms.RasterImageList"/> control and fill it with 10 items.  It will then
            show the difference between vertical and horizontal scrolling styles.  This example assumes that you have
            added the code to a Form and call the method created in the example from the constructor or another method
            on the form.
            <p><b>VB.NET</b></p>
            <code>
            Imports Leadtools
            Imports Leadtools.WinForms
            Imports System.Text
            
            Private Sub ScrollStyleTest()
               ' Create a new RasterImageList control.
               Dim rasterImageList1 As New RasterImageList
               rasterImageList1.Bounds = New Rectangle(New Point(10, 10), New Size(400, 400))
            
               ' Sort the items in the list in ascending order.
               rasterImageList1.Sorting = SortOrder.Ascending
            
               ' Use normal view style
               rasterImageList1.ViewStyle = RasterImageListViewStyle.Normal
            
               ' Create 20 items
               For i As Integer = 0 To 19
                  ' Load the image
                  Dim index As Integer = i + 1
                  Dim item As New RasterImageListItem(Nothing, 1, "Item" + index.ToString())
            
                  ' Select every otehr item
                  If ((i Mod 2) = 0) Then
                     item.Selected = True
                  End If
            
                  ' Add the item to the image list
                  rasterImageList1.Items.Add(item)
               Next
            
               ' Add the RasterImageList to the control collection.
               Me.Controls.Add(rasterImageList1)
            
               ' Set vertical scrolling style
               rasterImageList1.ScrollStyle = RasterImageListScrollStyle.Vertical
            
               ' Scroll a couple of lines down
               rasterImageList1.ScrollItems(2)
            
               ' Show the scroll parameters of the control
               ShowScrollParameters(rasterImageList1)
            
               ' Switch to horizontal scrolling style
               rasterImageList1.ScrollStyle = RasterImageListScrollStyle.Horizontal
            
               ' Show the scroll parameters of the control
               ShowScrollParameters(rasterImageList1)
            End Sub
            
            Private Sub ShowScrollParameters(ByVal imageList As RasterImageList)
               Dim sb As New StringBuilder
               sb.AppendFormat("Full Visible Rows: {0}{1}", imageList.FullVisibleRows, Environment.NewLine)
               sb.AppendFormat("Visible Rows: {0}{1}", imageList.VisibleRows, Environment.NewLine)
               sb.AppendFormat("Full Visible Columns: {0}{1}", imageList.FullVisibleColumns, Environment.NewLine)
               sb.AppendFormat("Visible Columns:{0}{1}", imageList.VisibleColumns, Environment.NewLine)
               sb.AppendFormat("TotalRows: {0}{1}", imageList.TotalRows, Environment.NewLine)
               sb.AppendFormat("TotalColumns: {0}{1}", imageList.TotalColumns, Environment.NewLine)
               sb.AppendFormat("TopIndex: {0}{1}", imageList.TopIndex, Environment.NewLine)
               MessageBox.Show(sb.ToString())
            End Sub
            </code>
            <p><b>C#</b></p>
            <code>
            using Leadtools;
            using Leadtools.WinForms;
            using System.Text;
            
            private void ScrollStyleTest()
            {
               // Create a new RasterImageList control.
               RasterImageList rasterImageList1 = new RasterImageList();
               rasterImageList1.Bounds = new Rectangle(new Point(10, 10), new Size(400, 400));
            
               // Sort the items in the list in ascending order.
               rasterImageList1.Sorting = SortOrder.Ascending;
            
               // Use normal view style
               rasterImageList1.ViewStyle = RasterImageListViewStyle.Normal;
            
               // Create 20 items
               for(int i = 0; i &lt; 20; i++)
               {
                  // Load the image
                  int index = i + 1;
                  RasterImageListItem item = new RasterImageListItem(null, 1, "Item" + index.ToString());
            
                  // Select every otehr item
                  if((i % 2) == 0)
                     item.Selected = true;
            
                  // Add the item to the image list
                  rasterImageList1.Items.Add(item);
               }
            
               // Add the RasterImageList to the control collection.
               this.Controls.Add(rasterImageList1);
            
               // Set vertical scrolling style
               rasterImageList1.ScrollStyle = RasterImageListScrollStyle.Vertical;
            
               // Scroll a couple of lines down
               rasterImageList1.ScrollItems(2);
            
               // Show the scroll parameters of the control
               ShowScrollParameters(rasterImageList1);
            
               // Switch to horizontal scrolling style
               rasterImageList1.ScrollStyle = RasterImageListScrollStyle.Horizontal;
            
               // Show the scroll parameters of the control
               ShowScrollParameters(rasterImageList1);
            }
            
            private void ShowScrollParameters(RasterImageList imageList)
            {
               StringBuilder sb = new StringBuilder();
               sb.AppendFormat("Full Visible Rows: {0}{1}", imageList.FullVisibleRows, Environment.NewLine);
               sb.AppendFormat("Visible Rows: {0}{1}", imageList.VisibleRows, Environment.NewLine);
               sb.AppendFormat("Full Visible Columns: {0}{1}", imageList.FullVisibleColumns, Environment.NewLine);
               sb.AppendFormat("Visible Columns:{0}{1}", imageList.VisibleColumns, Environment.NewLine);
               sb.AppendFormat("TotalRows: {0}{1}", imageList.TotalRows, Environment.NewLine);
               sb.AppendFormat("TotalColumns: {0}{1}", imageList.TotalColumns, Environment.NewLine);
               sb.AppendFormat("TopIndex: {0}{1}", imageList.TopIndex, Environment.NewLine);
               MessageBox.Show(sb.ToString());
            }
            </code>
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageList.ScrollStyleChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle"/> property changes.
            </summary>
            <remarks>
            <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle"/> property is changed by either a programmatic
            modification or user interaction.</p>
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageList.AutoDisposeImages">
            <summary>
            Gets or sets a value indicating whether to automatically dispose item images.
            </summary>
            <value><b>true</b> to automatically dispose item images; false, otherwise.  Default value is <b>true</b>.</value>
            <remarks>
            <p>When the value of the <b>AutoDisposeImages</b> is set to true, the <see cref="T:Leadtools.WinForms.RasterImageList"/> control will
            automatically call the <see cref="M:Leadtools.RasterImage.Dispose">RasterImage.Dispose</see> method on an item's
            <see cref="P:Leadtools.WinForms.RasterImageListItem.Image">RasterImageListItem.Image</see> when the item is removed from the 
            <see cref="P:Leadtools.WinForms.RasterImageList.Items"/> collection or when the control itself is disposed.</p>
            <p>The control will check if an image is used with multiple items (for example, if multiple items are using
            the same image but to show different pages).  In this case, the control will correctly dispose the image only once.</p>
            <p>If you setup the items with images that you do not want to dispose of and are going to re-use somewhere else,
            you need to set the value of the <b>AutoDisposeImages</b> property of the <see cref="T:Leadtools.WinForms.RasterImageList"/> control to
            <b>false</b>.</p>
            <p>You can also temporarily change the value of the <b>AutoDisposeImages</b> property if you want to save the
            item image before you dispose it.  For example, set the <b>AutoDisposeImages</b> property to <b>false</b>, call
            <see cref="M:Leadtools.WinForms.RasterImageListItemCollection.Remove(Leadtools.WinForms.RasterImageListItem)"/> on the <see cref="P:Leadtools.WinForms.RasterImageList.Items"/> collection to remove the item, then
            re-set the <b>AutoDisposeImages</b> property back to <b>true</b>.</p>
            <p>Note that if you set the <b>AutoDisposeImages</b> value to <b>false</b> and you do not dispose the item images
            youself, the .NET garbage collector will eventually detect that these images are not used anymore and will
            dispose them for you when the control and any other reference to these images are no longer used in your
            application.</p>
            </remarks>
            <example>
            This example will create and populate a <see cref="T:Leadtools.WinForms.RasterImageList"/> control.  It will then remove an item from
            the control and demonstrate how the <b>AutoDisposeImages</b> property effects whether the item image remains
            usable. This example assumes that you have added the code to a Form and call the method created in the example
            from the constructor or another method on the form.
            <p><b>VB.NET</b></p>
            <code>
            Imports Leadtools
            Imports Leadtools.Codecs
            Imports Leadtools.WinForms
            
            Private Sub AutoDisposeImagesTest()
               ' Create a new RasterImageList control.
               Dim rasterImageList1 As New RasterImageList
               rasterImageList1.Bounds = New Rectangle(New Point(10, 10), New Size(400, 400))
            
               ' Sort the items in the list in ascending order.
               rasterImageList1.Sorting = SortOrder.Ascending
            
               ' Initialize the RasterCodecs class
               RasterCodecs.CodecsPath = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin"
               Dim codecs As New RasterCodecs
            
               ' Create three items
               Dim imagesPath As String = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\"
            
               Dim item As RasterImageListItem
            
               For i As Integer = 0 To 2
                  ' Load the image
                  Dim index As Integer = i + 1
                  Dim imageFileName As String = imagesPath + "Image" + index.ToString() + ".cmp"
                  Dim Image As IRasterImage = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
                  item = New RasterImageListItem(Image, 1, "Item" + index.ToString())
            
                  ' Select the first item
                  If (i = 0) Then
                     item.Selected = True
                  End If
            
                  ' Add the item to the image list
                  rasterImageList1.Items.Add(item)
               Next
            
               ' Add the RasterImageList to the control collection.
               Me.Controls.Add(rasterImageList1)
            
               ' Make sure the AutoDisposeImages property is set to true
               rasterImageList1.AutoDisposeImages = True
            
               MessageBox.Show("Removing an item then accesing its image with AutoDisposeImages set to true")
            
               ' Remove the first item
               item = rasterImageList1.Items(0)
               rasterImageList1.Items.RemoveAt(0)
            
               ' Try to save this item's image into a disk file
               ' This will throw an exception since the item image has been dispose
               ' as a result of having the AutoDisposeImages false set to true
               Try
                  codecs.Save(item.Image, "C:\Test.jpg", RasterImageFormat.Jpeg, 24)
                  MessageBox.Show("Image saved correctly")
               Catch ex As Exception
                  MessageBox.Show(ex.Message)
               End Try
            
               MessageBox.Show("Removing an item then accesing its image with AutoDisposeImages set to false")
            
               ' Now remove the next item, this time make sure to set the
               ' AutoDisposeImages property to false before you remove the item
               ' from the control collection
               item = rasterImageList1.Items(0)
            
               rasterImageList1.AutoDisposeImages = False
               rasterImageList1.Items.RemoveAt(0)
               rasterImageList1.AutoDisposeImages = True
            
               ' Try to save this item's image into a disk file
               ' This time, this should work correcly since the control did not dispose
               ' the item image.
               Try
                  codecs.Save(item.Image, "C:\Test.jpg", RasterImageFormat.Jpeg, 24)
                  MessageBox.Show("Image saved correctly")
               Catch ex As Exception
                  MessageBox.Show(ex.Message)
               End Try
            End Sub
            </code>
            <p><b>C#</b></p>
            <code>
            using Leadtools;
            using Leadtools.Codecs;
            using Leadtools.WinForms;
            
            private void AutoDisposeImagesTest()
            {
               // Create a new RasterImageList control.
               RasterImageList rasterImageList1 = new RasterImageList();
               rasterImageList1.Bounds = new Rectangle(new Point(10, 10), new Size(400, 400));
            
               // Sort the items in the list in ascending order.
               rasterImageList1.Sorting = SortOrder.Ascending;
            
               // Initialize the RasterCodecs class
               RasterCodecs.CodecsPath = @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin";
               RasterCodecs codecs = new RasterCodecs();
            
               // Create three items
               string imagesPath = @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\";
            
               RasterImageListItem item;
            
               for(int i = 0; i &lt; 3; i++)
               {
                  // Load the image
                  int index = i + 1;
                  string imageFileName = imagesPath + "Image" + index.ToString() + ".cmp";
                  IRasterImage image = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1);
                  item = new RasterImageListItem(image, 1, "Item" + index.ToString());
            
                  // Select the first item
                  if(i == 0)
                     item.Selected = true;
            
                  // Add the item to the image list
                  rasterImageList1.Items.Add(item);
               }
            
               // Add the RasterImageList to the control collection.
               this.Controls.Add(rasterImageList1);
            
               // Make sure the AutoDisposeImages property is set to true
               rasterImageList1.AutoDisposeImages = true;
            
               MessageBox.Show("Removing an item then accesing its image with AutoDisposeImages set to true");
            
               // Remove the first item
               item = rasterImageList1.Items[0];
               rasterImageList1.Items.RemoveAt(0);
            
               // Try to save this item's image into a disk file
               // This will throw an exception since the item image has been dispose
               // as a result of having the AutoDisposeImages false set to true
               try
               {
                  codecs.Save(item.Image, @"C:\Test.jpg", RasterImageFormat.Jpeg, 24);
                  MessageBox.Show("Image saved correctly");
               }
               catch(Exception ex)
               {
                  MessageBox.Show(ex.Message);
               }
            
               MessageBox.Show("Removing an item then accesing its image with AutoDisposeImages set to false");
            
               // Now remove the next item, this time make sure to set the
               // AutoDisposeImages property to false before you remove the item
               // from the control collection
               item = rasterImageList1.Items[0];
            
               rasterImageList1.AutoDisposeImages = false;
               rasterImageList1.Items.RemoveAt(0);
               rasterImageList1.AutoDisposeImages = true;
            
               // Try to save this item's image into a disk file
               // This time, this should work correcly since the control did not dispose
               // the item image.
               try
               {
                  codecs.Save(item.Image, @"C:\Test.jpg", RasterImageFormat.Jpeg, 24);
                  MessageBox.Show("Image saved correctly");
               }
               catch(Exception ex)
               {
                  MessageBox.Show(ex.Message);
               }
            }
            </code>
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageList.AutoDisposeImagesChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.AutoDisposeImages"/> property changes.
            </summary>
            <remarks>
            <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.AutoDisposeImages"/> property is changed by either a programmatic
            modification or user interaction.</p>
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageList.FullVisibleRows">
            <summary>
            Gets the number of currently full-visible item rows in the control.
            </summary>
            <value>The total number of currently full-visible item rows in the control.</value>
            <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle"/>.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageList.FullVisibleColumns">
            <summary>
            Gets the number of currently full-visible item columns in the control.
            </summary>
            <value>The total number of currently full-visible item columns in the control.</value>
            <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle"/>.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageList.VisibleRows">
            <summary>
            Gets the number of currently full or partial -visible item rows in the control.
            </summary>
            <value>The total number of currently full or partial -visible item rows in the control.</value>
            <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle"/>.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageList.VisibleColumns">
            <summary>
            Gets the number of currently full or partial -visible item columns in the control.
            </summary>
            <value>The total number of currently full or partial -visible item columns in the control.</value>
            <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle"/>.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageList.TotalRows">
            <summary>
            Gets the number of total item rows in the control.
            </summary>
            <value>The number of total item rows in the control.</value>
            <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle"/>.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageList.TotalColumns">
            <summary>
            Gets the number of total item columns in the control.
            </summary>
            <value>The number of total item columns in the control.</value>
            <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle"/>.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageList.TopIndex">
            <summary>
            Gets or sets the index of the first visible item in the control.
            </summary>
            <value>The index of the first visible item in the control.</value>
            <remarks>
            Initially, the item with the index position of zero (0) is at the top of the <see cref="T:Leadtools.WinForms.RasterImageList"/>
            control. If the <see cref="T:Leadtools.WinForms.RasterImageList"/> control contents are scrolled, a different item can be at the top
            of the control. You can use this property to determine which item is visible at the top of the
            <see cref="T:Leadtools.WinForms.RasterImageList"/> control. To position a specific item in the visible region of the control, set its
            index to the <b>TopIndex</b> property.
            </remarks>
            <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle"/>
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageList.Scroll">
            <summary>
            Occurs when the content of control is scrolled.
            </summary>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageList.EnableKeyboard">
            <summary>
            Gets or sets a value indicating whether the control automatically processes the keyboard.
            </summary>
            <value><b>true</b> if the control automatically processes the keyboard; otherwise, false.
            Default value is <b>true</b>.</value>
            <remarks>
            <p>When automatic keyboard processing is enabled, the <see cref="T:Leadtools.WinForms.RasterImageList"/> Control will process the
            following keys:
            <list type="table">
              <listheader>
                 <term>Key</term>
                 <description>Event</description>
               </listheader>
              <item>
                 <term>PageUp, Up Arrow, Left Arrow</term>
                 <description>Scroll up/left one item (depends on <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle"/>)</description>
              </item>
              <item>
                 <term>PageDown, Down Arrow, Right Arrow</term>
                 <description>Scroll down/right one item (depends on <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle"/>)</description>
              </item>
              <item>
                 <term>Ctrl + PageUp, Ctrl + Up, Ctlr + Left, Home</term>
                 <description>Scroll to beginning of list (depends on <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle"/>)</description>
              </item>
              <item>
                 <term>Ctrl + PageDown, Ctrl + Down, Ctlr + Right, End</term>
                 <description>Scroll to end of list (depends on <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle"/>)</description>
              </item>
            </list>
            </p>
            <p>If the setting for <see cref="P:Leadtools.WinForms.RasterImageList.SelectionMode"/> is not <b>RasterImageListSelectionMode.None</b>, then
            the selected item will move up, down, left, or right, depending on the key(s) being processed.
            If <see cref="P:Leadtools.WinForms.RasterImageList.SelectionMode"/> is set to <b>RasterImageListSelectionMode.Multi</b>,
            multiple items can be selected using the CTRL and/or SHIFT keys in conjunction with the keys listed above.
            </p>
            </remarks>
            <example>
            Enable automatic keyboard processing in the <see cref="T:Leadtools.WinForms.RasterImageList"/>
            <p><b>VB.NET</b></p>
            <code>
            rasterImageList1.EnableKeyboard = True
            </code>
            <p><b>C#</b></p>
            <code>
            rasterImageList1.EnableKeyboard = true;
            </code>
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageList.EnableKeyboardChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.EnableKeyboard"/> property changes.
            </summary>
            <remarks>
            <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.EnableKeyboard"/> property is changed by either a programmatic
            modification or user interaction.</p>
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageList.Sorter">
            <summary>
            Gets or sets the sorting comparer for the control.
            </summary>
            <value>An IComparer that represents the sorting comparer for the control.</value>
            <remarks>
            <p>The <b>Sorter</b> property allows you to specify the object that performs the sorting of items in the
            <see cref="T:Leadtools.WinForms.RasterImageList"/>. You can use the <b>Sorter</b> property in combination with the <see cref="M:Leadtools.WinForms.RasterImageList.Sort"/>
            method to perform custom sorting. For example, you could create a class (that implements the
            <see cref="T:System.Collections.IComparer"/> interface) to support custom sorting in the <see cref="T:Leadtools.WinForms.RasterImageList"/> control.</p>
            <p>To control the sort order, use the <see cref="P:Leadtools.WinForms.RasterImageList.Sorting"/> property.</p>
            <p>Set the <b>Sorter</b> property to null (Nothing in Visual Basic) to fall back to the default sorter.</p>
            <p><b>Note:</b> Setting the value of the <b>Sorter</b> property causes the <see cref="M:Leadtools.WinForms.RasterImageList.Sort"/> method to be called
            automatically.</p>
            </remarks>
            <example>
            This example will create and populate a <see cref="T:Leadtools.WinForms.RasterImageList"/> control with 20 items.  It will use a
            custom <see cref="T:System.Collections.IComparer"/> that implements the Win32 <i>StrCmpLogicalW</i> API to sort the contents of the control.
            This example assumes that you have added the code to a Form and call the method created in the example from the
            constructor or another method on the form.<br/>
            <b>Note:</b> This example will only run on Windows XP and Windows 2003 Server.
            <p><b>VB.NET</b></p>
            <code>
            Imports Leadtools
            Imports Leadtools.Codecs
            Imports Leadtools.WinForms
            Imports System.Collections
            Imports System.Runtime.InteropServices
            
            Private Sub SortTest()
               ' Create a new RasterImageList control.
               Dim rasterImageList1 As New RasterImageList
               rasterImageList1.Bounds = New Rectangle(New Point(10, 10), New Size(400, 400))
            
               ' Sort the items in the list in ascending order
               rasterImageList1.Sorting = SortOrder.Ascending
            
               ' Use normal view style
               rasterImageList1.ViewStyle = RasterImageListViewStyle.Normal
            
               ' Add the RasterImageList to the control collection.
               Me.Controls.Add(rasterImageList1)
            
               ' Suspend painting the RasterImageList
               rasterImageList1.BeginUpdate()
            
               ' Add 20 items
               For i As Integer = 0 To 19
                  ' Use the item index as its text
                  Dim item As New RasterImageListItem(Nothing, i, i.ToString())
                  rasterImageList1.Items.Add(item)
               Next
            
               ' Resume painting
               rasterImageList1.EndUpdate()
            
               ' Sort using the default sorter
               rasterImageList1.Sort()
            
               MessageBox.Show("Default sort (0, 1, 10, 11, etc...)")
            
               ' Setup custom sorting
               rasterImageList1.Sorter = New MyRasterImageListItemComparer
            
               MessageBox.Show("Custom sort (0, 1, 2, 3, etc... ")
            End Sub
            
            &lt;DllImport( _
                "SHLWAPI.DLL", _
                EntryPoint:="StrCmpLogicalW", _
                SetLastError:=True, _
                CharSet:=CharSet.Unicode, _
                ExactSpelling:=True, _
                CallingConvention:=CallingConvention.StdCall)&gt; _
            Public Shared Function StrCmpLogicalW(ByVal psz1 As String, ByVal psz2 As String) As Integer
            End Function
            
            Class MyRasterImageListItemComparer
               Implements IComparer
               Public Sub New()
               End Sub
            
               Public Overridable Function Compare(ByVal x As Object, ByVal y As Object) As Integer Implements IComparer.Compare
                  Dim itemX As RasterImageListItem = DirectCast(x, RasterImageListItem)
                  Dim itemY As RasterImageListItem = DirectCast(y, RasterImageListItem)
            
                  Return StrCmpLogicalW(itemX.Text, itemY.Text)
               End Function
            End Class
            </code>
            <p><b>C#</b></p>
            <code>
            using Leadtools;
            using Leadtools.Codecs;
            using Leadtools.WinForms;
            using System.IO;
            using System.Collections;
            using System.Runtime.InteropServices;
            
            private void SortTest()
            {
               // Create a new RasterImageList control.
               RasterImageList rasterImageList1 = new RasterImageList();
               rasterImageList1.Bounds = new Rectangle(new Point(10, 10), new Size(400, 400));
            
               // Sort the items in the list in ascending order.
               rasterImageList1.Sorting = SortOrder.Ascending;
            
               // Use normal view style
               rasterImageList1.ViewStyle = RasterImageListViewStyle.Normal;
            
               // Add the RasterImageList to the control collection.
               this.Controls.Add(rasterImageList1);
            
               // Suspend painting the RasterImageList
               rasterImageList1.BeginUpdate();
            
               // Add 20 items
               for(int i = 0; i &lt; 20; i++)
               {
                  // Use the item index as its text
                  RasterImageListItem item = new RasterImageListItem(null, i, i.ToString());
                  rasterImageList1.Items.Add(item);
               }
            
               // Resume painting
               rasterImageList1.EndUpdate();
            
               // Sort using the default sorter
               rasterImageList1.Sort();
            
               MessageBox.Show("Default sort (0, 1, 10, 11, etc...)");
            
               // Setup custom sorting
               rasterImageList1.Sorter = new MyRasterImageListItemComparer();
            
               MessageBox.Show("Custom sort (0, 1, 2, 3, etc... ");
            }
            
            [DllImport(
                "SHLWAPI.DLL",
                EntryPoint="StrCmpLogicalW",
                SetLastError=true,
                CharSet=CharSet.Unicode,
                ExactSpelling=true,
                CallingConvention=CallingConvention.StdCall)]
            public static extern int StrCmpLogicalW(string psz1, string psz2);
            
            class MyRasterImageListItemComparer : IComparer
            {
               public MyRasterImageListItemComparer() 
               {
               }
            
               public int Compare(object x, object y)
               {
                  RasterImageListItem itemX = x as RasterImageListItem;
                  RasterImageListItem itemY = y as RasterImageListItem;
            
                  return StrCmpLogicalW(itemX.Text, itemY.Text);
               }
            }
            </code>
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageList.SorterChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.Sorter"/> property changes.
            </summary>
            <remarks>
            <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.Sorter"/> property is changed by either a programmatic
            modification or user interaction.</p>
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageList.Sorting">
            <summary>
            Gets or sets the sort order for items in the control.
            </summary>
            <value>One of the SortOrder values. The default is <b>SortOrder.None</b>.</value>
            <remarks>
            <p>The Sorting property allows you to specify whether or not items are sorted in the
            <see cref="T:Leadtools.WinForms.RasterImageList"/> control. By default, no sorting is performed. When the <b>Sorting</b> property
            is set to <b>SortOrder.Ascending</b> or <b>SortOrder.Descending</b>, the items in the
            <see cref="T:Leadtools.WinForms.RasterImageList"/> are sorted automatically in ascending alphabetical order (when the property is
            set to <b>SortOrder.Ascending</b>) or descending alphabetical order (when the property is set to
            <b>SortOrder.Descending</b>). You can use this property to automatically sort items that are displayed in your
            <see cref="T:Leadtools.WinForms.RasterImageList"/> control to make it easier for users to find items when a large number of items
            are available.</p>
            <p>After you change the <b>Sorting</b> property, call the <see cref="M:Leadtools.WinForms.RasterImageList.Sort"/> method to re-sort the items in
            the control.</p>
            <p>You can setup your own sorting by providing a custom <see cref="T:System.Collections.IComparer"/> object using the
            <see cref="P:Leadtools.WinForms.RasterImageList.Sorter"/> property.</p>
            </remarks>
            <example>
            For an example, refer to <see cref="M:Leadtools.WinForms.RasterImageList.Sort"/>.
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageList.SortingChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.Sorting"/> property changes.
            </summary>
            <remarks>
            <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.Sorting"/> property is changed by either a programmatic
            modification or user interaction.</p>
            </remarks>
        </member>
        <member name="T:Leadtools.WinForms.RasterImageListItem">
            <summary>
            Represents an item in a <see cref="T:Leadtools.WinForms.RasterImageList"/> control.
            </summary>
            <remarks>
            <p>The <see cref="T:Leadtools.WinForms.RasterImageList"/> control is similar to a <see cref="T:System.Windows.Forms.ListView"/> in that
            it displays a list of items. The main difference is that the <see cref="T:Leadtools.WinForms.RasterImageList"/> supports viewing <see cref="T:Leadtools.IRasterImage"/>
            images in a number of different ways items can be viewed by the user. The <b>RasterImageListItem</b> class defines
            the appearance and data associated with an item that is displayed in the <see cref="T:Leadtools.WinForms.RasterImageList"/> control.
            <see cref="T:Leadtools.WinForms.RasterImageListItem"/> objects can be displayed in the <see cref="T:Leadtools.WinForms.RasterImageList"/> control in the same
            way a <see cref="T:System.Windows.Forms.ListView"/> displayes its items as large icons.</p>
            <p>Most of the properties of the <b>RasterImageListItem</b> class provide ways to change the display of the item
            in the <see cref="T:Leadtools.WinForms.RasterImageList"/> control it is associated with. The <see cref="P:Leadtools.WinForms.RasterImageListItem.Image"/> and
            <see cref="P:Leadtools.WinForms.RasterImageListItem.Page"/> properties allows you to specify the image and its page number to view.
            Items can also be selected or not, You can use the <see cref="P:Leadtools.WinForms.RasterImageListItem.Selected"/> property to determine
            if an item is selected or to select or un-select the item at run time. Items also have a
            <see cref="P:Leadtools.WinForms.RasterImageListItem.Text"/> property that displays the text associated with this item.
            </p>
            </remarks>
            <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImageList"/>.
            </example>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageListItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Leadtools.WinForms.RasterImageListItem"/> class with default values.
            </summary>
            <remarks>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImageList"/>.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageListItem.#ctor(Leadtools.IRasterImage,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Leadtools.WinForms.RasterImageListItem"/> class with an image, its page and the text to be displayed.
            </summary>
            <param name="image">An <see cref="T:Leadtools.IRasterImage"/> object that specifies the image to be displayed in the item.</param>
            <param name="page">The page number (1-based) if the <i>image</i> has multiple pages.</param>
            <param name="text">The text to display for the item.</param>
            <remarks>
            <p>If <i>image</i> contains only one page, <i>page</i> must be 1.</p>
            </remarks>
            <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImageList"/>.
            </example>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageListItem.Invalidate">
            <summary>
            Redraws the item and causes a paint message to be sent to the <see cref="T:Leadtools.WinForms.RasterImageList"/> control
            that owns this item.
            </summary>
            <remarks>
            You can call <b>Invalidate</b> after you make changes to a certain <see cref="T:Leadtools.WinForms.RasterImageListItem"/> that belongs
            to a <see cref="T:Leadtools.WinForms.RasterImageList"/> control.  Calling <b>Invalidate</b> on the item causes only the portion of the
            control covered with the item to be invalidated as apposed to invalidating the surface of the whole control.
            </remarks>
            <example>
            This example shows how to manually select an item in a RasterImageListItem while updating only the 
            effected area.
            <p><b>VB.NET</b></p>
            <code>
            Imports Leadtools
            Imports Leadtools.WinForms
            
            Private Sub SelectImageListItem(ByVal imageList As RasterImageList, ByVal itemIndex As Integer)
               ' Loop through all the items in the list
               For i As Integer = 0 To imageList.Items.Count - 1
                  Dim item As RasterImageListItem = imageList.Items(i)
            
                  ' If this is not out item and is selected, de-select it
                  If i &lt;&gt; itemIndex AndAlso item.Selected Then
                     item.Selected = False
            
                     ' re-paint only this item
                     item.Invalidate()
                  End If
            
                  ' If this is our item and is not selected already, select it
                  If i = itemIndex AndAlso Not item.Selected Then
                     item.Selected = True
            
                     ' re-paint only this item
                     item.Invalidate()
                  End If
               Next
            End Sub
            </code>
            <p><b>C#</b></p>
            <code>
            using Leadtools;
            using Leadtools.WinForms
            
            private void SelectImageListItem(RasterImageList imageList, int itemIndex)
            {
               // Loop through all the items in the list
               for(int i = 0; i &lt; imageList.Items.Count; i++)
               {
                  RasterImageListItem item = imageList.Items[i];
            
                  // If this is not out item and is selected, de-select it
                  if(i != itemIndex &amp;&amp; item.Selected)
                  {
                     item.Selected = false;
            
                     // re-paint only this item
                     item.Invalidate();
                  }
            
                  // If this is our item and is not selected already, select it
                  if(i == itemIndex &amp;&amp; !item.Selected)
                  {
                     item.Selected = true;
            
                     // re-paint only this item
                     item.Invalidate();
                  }
               }
            }
            </code>
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageListItem.Image">
            <summary>
            The image associated with this <see cref="T:Leadtools.WinForms.RasterImageListItem"/> object.
            </summary>
            <value>An <see cref="T:Leadtools.IRasterImage"/> object associated with this <see cref="T:Leadtools.WinForms.RasterImageListItem"/> object.
            Default value is null (Nothing in Visual Basic).</value>
            <remarks>
            <p>The <see cref="P:Leadtools.WinForms.RasterImageListItem.Page"/> property specfies the 1-based page number to view from this image.</p>
            <p>The <see cref="T:Leadtools.WinForms.RasterImageList"/> control will paint this image into the item surface. If the item does not
            have an image, the value of this property is null (Nothing in Visual Basic) and, nothing is painted.</p>
            <p>The <see cref="T:Leadtools.WinForms.RasterImageList"/> control paints the image in the following manner:
            <list type="bullet">
            <item><description>If the image size is less than or equal to the <see cref="P:Leadtools.WinForms.RasterImageList.ItemImageSize"/> value,
            the image is painted with its original size only centered into the item surface.</description></item>
            <item><description>If the image size is grater than the <see cref="P:Leadtools.WinForms.RasterImageList.ItemImageSize"/> value,
            the image is stretched to this smaller size but keeping the aspect ratio the same.</description></item>
            <item><description>It is recommended that you populate the items with "thumbnail" images.  This will
            increase the performance of the item painting operation.  In this case, you can use the <see cref="P:Leadtools.WinForms.RasterImageListItem.Tag"/> or
            <see cref="P:Leadtools.WinForms.RasterImageListItem.FileName"/> properties to store the information needed to load the image in its original size when
            requested.</description></item>
            </list>
            </p>
            </remarks>
            <example>
            This example will create and populate a <see cref="T:Leadtools.WinForms.RasterImageList"/> control with thumbnails of images in a 
            given folder.  It will then load and displayes the user selected images into a <see cref="T:Leadtools.WinForms.RasterImageViewer"/>
            control.  This example assumes that you have added the code to a Form and call the method created in the example
            from the constructor or another method on the form.
            <p><b>VB.NET</b></p>
            <code>
            Imports Leadtools
            Imports Leadtools.Codecs
            Imports Leadtools.WinForms
            Imports System.IO
            
            ' The RasterImageList control
            Private rasterImageList1 As RasterImageList
            
            ' The RasterImageViewer control
            Private rasterImageViewer1 As RasterImageViewer
            
            ' The RasterCodecs object
            Private rasterCodecs1 As RasterCodecs
            
            Private Sub ThumbnailsTest()
               ' First, Create the controls:
               ' - A RasterImageList control docked to the left
               ' - A horizontal splitter in the middle
               ' - A RasterImageViewer control docked to fill
            
               Me.SuspendLayout()
            
               rasterImageList1 = New RasterImageList
               rasterImageList1.Dock = DockStyle.Left
               ' Allow only single selection
               rasterImageList1.SelectionMode = RasterImageListSelectionMode.Single
               Me.Controls.Add(rasterImageList1)
               rasterImageList1.BringToFront()
            
               ' Add a handler to the SelectedIndexChanged event
               AddHandler rasterImageList1.SelectedIndexChanged, AddressOf rasterImageList1_SelectedIndexChanged
            
               Dim splitter1 As New Splitter
               splitter1.Dock = DockStyle.Left
               Me.Controls.Add(splitter1)
               splitter1.BringToFront()
            
               rasterImageViewer1 = New RasterImageViewer
               rasterImageViewer1.Dock = DockStyle.Fill
               Me.Controls.Add(rasterImageViewer1)
               rasterImageViewer1.BringToFront()
            
               Me.ResumeLayout()
            
               ' Now load all our images
               RasterCodecs.CodecsPath = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin"
               rasterCodecs1 = New RasterCodecs
            
               Dim folderName As String = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images"
               Dim files() As String = Directory.GetFiles(folderName, "*.*")
            
               ' This is going to be a lengthy operation
               ' Suspend painting the RasterImageList
               rasterImageList1.BeginUpdate()
            
               For Each fileName As String In files
                  ' Load the image as a thumbnail
                  Dim image As IRasterImage = LoadThumbnail(fileName)
            
                  ' Only add an item if we loaded the image successfuly
                  If (Not image Is Nothing) Then
                     ' Create an item
                     Dim item As New RasterImageListItem
            
            
                     ' Setup the item information
                     item.Image = image
                     item.Text = Path.GetFileName(fileName)
                     item.Page = 1
            
                     ' To load this image in original size later
                     item.FileName = fileName
            
                     ' Add the item into RasterImageList
                     rasterImageList1.Items.Add(item)
                  End If
               Next
            
               rasterImageList1.EndUpdate()
            End Sub
            
            Private Sub rasterImageList1_SelectedIndexChanged(ByVal sender As Object, ByVal e As EventArgs)
               ' User has selected an item from the RasterImageList control.
               ' Re-load the item image and show it in original size in the viewer
            
               ' Get the selected item(s)
               Dim selectedItems As RasterImageListItemCollection = rasterImageList1.SelectedItems
               If (Not selectedItems Is Nothing AndAlso selectedItems.Count = 1) Then
                  Dim item As RasterImageListItem = selectedItems(0)
            
                  ' Load the image in its original size and set it in the viewer
                  rasterImageViewer1.Image = rasterCodecs1.Load( _
                     item.FileName, _
                     0, _
                     CodecsLoadByteOrder.BgrOrGray, _
                     1, _
                     1)
               End If
            End Sub
            
            Private Function LoadThumbnail(ByVal fileName As String) As IRasterImage
               Dim image As IRasterImage = Nothing
            
               Try
                  ' See if we can load this image
                  Dim info As CodecsImageInfo = rasterCodecs1.GetInformation(fileName, False, 1)
            
                  If (info.Format &lt;&gt; RasterImageFormat.Unknown) Then
                     ' Yes, calculate the thumbnail size to fit into RasterImageList.ItemImageSize
                     Dim rc As New Rectangle( _
                        0, _
                        0, _
                        rasterImageList1.ItemImageSize.Width, _
                        rasterImageList1.ItemImageSize.Height)
            
                     rc = RasterImageList.GetFixedAspectRatioImageRectangle(info.Width, info.Height, rc)
            
                     ' Load the thumbnail
                     image = rasterCodecs1.Load( _
                        fileName, _
                        rc.Width, _
                        rc.Height, _
                        24, _
                        RasterSizeFlags.Resample, _
                        CodecsLoadByteOrder.BgrOrGray, _
                        1, _
                        1)
                  Else
                     image = Nothing
                  End If
               Catch
                  image = Nothing
               End Try
            
               Return image
            End Function
            </code>
            <p><b>C#</b></p>
            <code>
            using Leadtools;
            using Leadtools.Codecs;
            using Leadtools.WinForms;
            using System.IO;
            
            // The RasterImageList control
            private RasterImageList rasterImageList1;
            
            // The RasterImageViewer control
            private RasterImageViewer rasterImageViewer1;
            
            // The RasterCodecs object
            private RasterCodecs rasterCodecs1;
            
            private void ThumbnailsTest()
            {
               // First, Create the controls:
               // - A RasterImageList control docked to the left
               // - A horizontal splitter in the middle
               // - A RasterImageViewer control docked to fill
            
               this.SuspendLayout();
            
               rasterImageList1 = new RasterImageList();
               rasterImageList1.Dock = DockStyle.Left;
               // Allow only single selection
               rasterImageList1.SelectionMode = RasterImageListSelectionMode.Single;
               this.Controls.Add(rasterImageList1);
               rasterImageList1.BringToFront();
            
               // Add a handler to the SelectedIndexChanged event
               rasterImageList1.SelectedIndexChanged += new EventHandler(rasterImageList1_SelectedIndexChanged);
            
               Splitter splitter1 = new Splitter();
               splitter1.Dock = DockStyle.Left;
               this.Controls.Add(splitter1);
               splitter1.BringToFront();
            
               rasterImageViewer1 = new RasterImageViewer();
               rasterImageViewer1.Dock = DockStyle.Fill;
               this.Controls.Add(rasterImageViewer1);
               rasterImageViewer1.BringToFront();
            
               this.ResumeLayout();
            
               // Now load all our images
               RasterCodecs.CodecsPath = @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin";
               rasterCodecs1 = new RasterCodecs();
            
               string folderName = @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images";
               string[] files = Directory.GetFiles(folderName, "*.*");
            
               // This is going to be a lengthy operation
               // Suspend painting the RasterImageList
               rasterImageList1.BeginUpdate();
            
               foreach(string fileName in files)
               {
                  // Load the image as a thumbnail
                  IRasterImage image = LoadThumbnail(fileName);
            
                  // Only add an item if we loaded the image successfuly
                  if(image != null)
                  {
                     // Create an item
                     RasterImageListItem item = new RasterImageListItem();
            
            
                     // Setup the item information
                     item.Image = image;
                     item.Text = Path.GetFileName(fileName);
                     item.Page = 1;
            
                     // To load this image in original size later
                     item.FileName = fileName;
            
                     // Add the item into RasterImageList
                     rasterImageList1.Items.Add(item);
                  }
               }
            
               rasterImageList1.EndUpdate();
            }
            
            private void rasterImageList1_SelectedIndexChanged(object sender, EventArgs e)
            {
               // User has selected an item from the RasterImageList control.
               // Re-load the item image and show it in original size in the viewer
            
               // Get the selected item(s)
               RasterImageListItemCollection selectedItems = rasterImageList1.SelectedItems;
               if(selectedItems != null &amp;&amp; selectedItems.Count == 1)
               {
                  RasterImageListItem item = selectedItems[0];
            
                  // Load the image in its original size and set it in the viewer
                  rasterImageViewer1.Image = rasterCodecs1.Load(
                     item.FileName,
                     0,
                     CodecsLoadByteOrder.BgrOrGray,
                     1,
                     1);
               }
            }
            
            private IRasterImage LoadThumbnail(string fileName)
            {
               IRasterImage image = null;
            
               try
               {
                  // See if we can load this image
                  CodecsImageInfo info = rasterCodecs1.GetInformation(fileName, false, 1);
            
                  if(info.Format != RasterImageFormat.Unknown)
                  {
                     // Yes, calculate the thumbnail size to fit into RasterImageList.ItemImageSize
                     Rectangle rc = new Rectangle(
                        0,
                        0,
                        rasterImageList1.ItemImageSize.Width,
                        rasterImageList1.ItemImageSize.Height);
            
                     rc = RasterImageList.GetFixedAspectRatioImageRectangle(info.Width, info.Height, rc);
            
                     // Load the thumbnail
                     image = rasterCodecs1.Load(
                        fileName,
                        rc.Width,
                        rc.Height,
                        24,
                        RasterSizeFlags.Resample,
                        CodecsLoadByteOrder.BgrOrGray,
                        1,
                        1);
                  }
                  else
                     image = null;
               }
               catch
               {
                  image = null;
               }
            
               return image;
            }
            </code>
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageListItem.Page">
            <summary>
            Image page number to display.
            </summary>
            <value>The 1-based page number index in <see cref="P:Leadtools.WinForms.RasterImageListItem.Image"/> to display.  Default value is 1.</value>
            <remarks>
            You can setup the <see cref="T:Leadtools.WinForms.RasterImageList"/> control to an individual page of a multi-page file in each item.
            To do that, simply set the <see cref="P:Leadtools.WinForms.RasterImageListItem.Image"/> property of each item into the multi-page image, then set the
            <b>Page</b> property to the desired page.
            </remarks>
            <example>
            This example will create and populate a <see cref="T:Leadtools.WinForms.RasterImageList"/> control with thumbnail of the pages in 
            multi-page image file.  This example assumes that you have added the code to a Form and call the method
            created in the example from the constructor or another method on the form.
            <p><b>VB.NET</b></p>
            <code>
            Imports Leadtools
            Imports Leadtools.Codecs
            Imports Leadtools.WinForms
            
            Private Sub PagesTest()
               ' Create a new RasterImageList control.
               Dim rasterImageList1 As New RasterImageList
               rasterImageList1.Bounds = New Rectangle(New Point(10, 10), New Size(300, 200))
            
               ' Sort the items in the list in ascending order.
               rasterImageList1.Sorting = SortOrder.Ascending
            
               ' Initialize the RasterCodecs class
               RasterCodecs.CodecsPath = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin"
               Dim codecs As New RasterCodecs
            
               ' Load a multi-page file
               Dim fileName As String = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\eye.gif"
               Dim image As IRasterImage = codecs.Load(fileName)
            
               ' Create the items (1 for each page)
               For page As Integer = 1 To image.PageCount
                  Dim item As New RasterImageListItem
            
                  item.Image = image  ' Use the same image for all items
                  item.Page = page  ' But with a different page number
                  item.Text = "Page " + page.ToString()
            
                  ' Add the item to the image list
                  rasterImageList1.Items.Add(item)
               Next
            
               ' Add the RasterImageList to the control collection.
               Me.Controls.Add(rasterImageList1)
            End Sub
            </code>
            <p><b>C#</b></p>
            <code>
            using Leadtools;
            using Leadtools.Codecs;
            using Leadtools.WinForms;
            
            private void PagesTest()
            {
               // Create a new RasterImageList control.
               RasterImageList rasterImageList1 = new RasterImageList();
               rasterImageList1.Bounds = new Rectangle(new Point(10, 10), new Size(300, 200));
            
               // Sort the items in the list in ascending order.
               rasterImageList1.Sorting = SortOrder.Ascending;
            
               // Initialize the RasterCodecs class
               RasterCodecs.CodecsPath = @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin";
               RasterCodecs codecs = new RasterCodecs();
            
               // Load a multi-page file
               string fileName = @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\eye.gif";
               IRasterImage image = codecs.Load(fileName);
            
               // Create the items (1 for each page)
               for(int page = 1; page &lt;= image.PageCount; page++)
               {
                  RasterImageListItem item = new RasterImageListItem();
            
                  item.Image = image;  // Use the same image for all items
                  item.Page = page;  // But with a different page number
                  item.Text = "Page " + page.ToString();
            
                  // Add the item to the image list
                  rasterImageList1.Items.Add(item);
               }
            
               // Add the RasterImageList to the control collection.
               this.Controls.Add(rasterImageList1);
            }
            </code>
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageListItem.Text">
            <summary>
            Gets or sets the text of the item.
            </summary>
            <value>The text to display for the item.  Default value is null (Nothing in Visual Basic).</value>
            <remarks>
            The <b>Text</b> property allows you to change the text displayed for the item.  This property is also used as the
            default parameter for sorting.
            </remarks>
            <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterImageListItem"/> class.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageListItem.FileName">
            <summary>
            Gets or sets the file name of the item.
            </summary>
            <value>The file name associated with this <see cref="T:Leadtools.WinForms.RasterImageListItem"/> object.
            Default value is null (Nothing in Visual Basic).</value>
            <remarks>
            <p>The <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser"/> class uses this property to store the fully qualified file name
            for the items added as a result of calling
            <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)">RasterThumbnailBrowser.LoadThumbnails</see></p>
            <p>The <see cref="T:Leadtools.WinForms.RasterImageList"/> class does not use this property.  However, you can use this property
            to set and get the file name when items are selected for example.</p>
            </remarks>
            <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageListItem.Image"/>.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageListItem.Selected">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Leadtools.WinForms.RasterImageListItem"/> is selected.
            </summary>
            <value><b>true</b> if this <see cref="T:Leadtools.WinForms.RasterImageListItem"/> is currently selected; otherwise, <b>false</b>.</value>
            <remarks>
            <p>You can check if a certain item is selected or not using this property.  Also you can use the
            <see cref="P:Leadtools.WinForms.RasterImageList.SelectedItems">RasterImageList.SelectedItems</see> property to obtain a collection of
            all the currently selected items in an <see cref="T:Leadtools.WinForms.RasterImageList"/> control.</p>
            <p>Items are usually selected/un-selected in the <see cref="T:Leadtools.WinForms.RasterImageList"/> control through the user
            interface when the user clicks on an item or using the keyboard.</p>
            <p>You can manually select/un-select items using this property.</p>
            </remarks>
            <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImageList"/>.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageListItem.Tag">
            <summary>
            Gets or sets the object that contains data about this <see cref="T:Leadtools.WinForms.RasterImageListItem"/>.
            </summary>
            <value>An <see cref="T:System.Object"/> that contains data about this <see cref="T:Leadtools.WinForms.RasterImageListItem"/>. The default is a null reference
            (Nothing in Visual Basic).</value>
            <remarks>
            <p>Any <see cref="T:System.Object"/> derived type can be assigned to this property.</p>
            <p>You can use this property to associate your own user-defined data with an item.</p>
            </remarks>
            <example>
            This example creates and popluates an RasterImageList control with a few items, it then associates each item with
            a user-defined object.  When the selected item is changed by the user interface, the corresponding user data
            is pulled from the selected item and shown in a message box.
            This example assumes that you have added the code to a Form and call the method created in the example from the
            constructor or another method on the form.
            <p><b>VB.NET</b></p>
            <code>
            Imports Leadtools
            Imports Leadtools.Codecs
            Imports Leadtools.WinForms
            
            Private Class UserData
               Public Number As Integer
               Public Text As String
            End Class
            
            Private Sub TagTest()
               ' Create a new RasterImageList control.
               Dim rasterImageList1 As New RasterImageList
               rasterImageList1.Bounds = New Rectangle(New Point(10, 10), New Size(300, 200))
            
               ' Sort the items in the list in ascending order.
               rasterImageList1.Sorting = SortOrder.Ascending
            
               ' Initialize the RasterCodecs class
               RasterCodecs.CodecsPath = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin"
               Dim codecs As New RasterCodecs
            
               ' Create three items
               Dim imagesPath As String = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\"
            
               For i As Integer = 0 To 2
                  ' Load the image
                  Dim index As Integer = i + 1
                  Dim imageFileName As String = imagesPath + "Image" + index.ToString() + ".cmp"
                  Dim image As IRasterImage = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
                  Dim item As New RasterImageListItem(image, 1, "Item" + index.ToString())
            
                  ' Select the first item
                  If (i = 0) Then
                     item.Selected = True
                  End If
            
                  ' Add the user data
                  Dim data As New UserData
                  data.Number = index
                  data.Text = "This is data number " + index.ToString()
                  item.Tag = data
            
                  ' Add the item to the image list
                  rasterImageList1.Items.Add(item)
               Next
            
               ' Add the RasterImageList to the control collection.
               Me.Controls.Add(rasterImageList1)
            
               ' Add a handler to the SelectedIndexChanged event
               AddHandler rasterImageList1.SelectedIndexChanged, AddressOf rasterImageList1_SelectedIndexChanged
            End Sub
            
            Private Sub rasterImageList1_SelectedIndexChanged(ByVal sender As Object, ByVal e As EventArgs)
               ' User has selected an item from the RasterImageList control.
               ' Get the user data associated with the currently selected item and
               ' show it in a message box
            
               Dim imageList As RasterImageList = DirectCast(sender, RasterImageList)
            
               ' Get the selected item(s)
               Dim selectedItems As RasterImageListItemCollection = imageList.SelectedItems
               If (Not selectedItems Is Nothing AndAlso selectedItems.Count = 1) Then
                  Dim item As RasterImageListItem = selectedItems(0)
            
                  ' Load the image in its original size and set it in the viewer
                  Dim data As UserData = DirectCast(item.Tag, UserData)
                  Dim msg As String = String.Format("Number = {0}{1}Text = {2}", data.Number, Environment.NewLine, data.Text)
                  MessageBox.Show(msg)
               End If
            End Sub
            </code>
            <p><b>C#</b></p>
            <code>
            using Leadtools;
            using Leadtools.Codecs;
            using Leadtools.WinForms;
            
            private class UserData
            {
               public int Number;
               public string Text;
            }
            
            private void TagTest()
            {
               // Create a new RasterImageList control.
               RasterImageList rasterImageList1 = new RasterImageList();
               rasterImageList1.Bounds = new Rectangle(new Point(10, 10), new Size(300, 200));
            
               // Sort the items in the list in ascending order.
               rasterImageList1.Sorting = SortOrder.Ascending;
            
               // Initialize the RasterCodecs class
               RasterCodecs.CodecsPath = @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin";
               RasterCodecs codecs = new RasterCodecs();
            
               // Create three items
               string imagesPath = @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\";
            
               for(int i = 0; i &lt; 3; i++)
               {
                  // Load the image
                  int index = i + 1;
                  string imageFileName = imagesPath + "Image" + index.ToString() + ".cmp";
                  IRasterImage image = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1);
                  RasterImageListItem item = new RasterImageListItem(image, 1, "Item" + index.ToString());
            
                  // Select the first item
                  if(i == 0)
                     item.Selected = true;
            
                  // Add the user data
                  UserData data = new UserData();
                  data.Number = index;
                  data.Text = "This is data number " + index.ToString();
                  item.Tag = data;
            
                  // Add the item to the image list
                  rasterImageList1.Items.Add(item);
               }
            
               // Add the RasterImageList to the control collection.
               this.Controls.Add(rasterImageList1);
            
               // Add a handler to the SelectedIndexChanged event
               rasterImageList1.SelectedIndexChanged += new EventHandler(rasterImageList1_SelectedIndexChanged);
            }
            
            private void rasterImageList1_SelectedIndexChanged(object sender, EventArgs e)
            {
               // User has selected an item from the RasterImageList control.
               // Get the user data associated with the currently selected item and
               // show it in a message box
            
               RasterImageList imageList = sender as RasterImageList;
            
               // Get the selected item(s)
               RasterImageListItemCollection selectedItems = imageList.SelectedItems;
               if(selectedItems != null &amp;&amp; selectedItems.Count == 1)
               {
                  RasterImageListItem item = selectedItems[0];
            
                  // Load the image in its original size and set it in the viewer
                  UserData data = item.Tag as UserData;
                  string msg = string.Format("Number = {0}{1}Text = {2}", data.Number, Environment.NewLine, data.Text);
                  MessageBox.Show(msg);
               }
            }
            </code>
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageListItem.ImageList">
            <summary>
            Gets the <see cref="T:Leadtools.WinForms.RasterImageList"/> control that contains this item.
            </summary>
            <value>A <see cref="T:Leadtools.WinForms.RasterImageList"/> that contains this <see cref="T:Leadtools.WinForms.RasterImageListItem"/>.</value>
            <remarks>
            <p>You can use this property to access the <see cref="T:Leadtools.WinForms.RasterImageList"/> control that owns this
            <see cref="T:Leadtools.WinForms.RasterImageListItem"/>.</p>
            <B>NOTE:</B> You cannot add an <see cref="T:Leadtools.WinForms.RasterImageListItem"/> to more than one <see cref="T:Leadtools.WinForms.RasterImageList"/> 
            control at the same time.  If you attempt to do this, an exception will be thrown.<br/>
            </remarks>
        </member>
        <member name="T:Leadtools.WinForms.RasterImageListItemCollection">
            <summary>
            Represents the collection of items in a <see cref="T:Leadtools.WinForms.RasterImageList"/> control.
            </summary>
            <remarks>
            <p>A <b>RasterImageListItemCollection</b> stores the items displayed in the <see cref="T:Leadtools.WinForms.RasterImageList"/> control.</p>
            <p>There are a number of ways to add items to the collection. The <see cref="M:Leadtools.WinForms.RasterImageListItemCollection.Add(Leadtools.WinForms.RasterImageListItem)"/>
            method adds a single item to the collection. To add a number of items to the collection, you create an array of
            items and pass it to the <see cref="M:Leadtools.RasterCollection.AddRange(System.Collections.ICollection)"/> method. If you want to insert an
            item at a specific location in the collection, you can use the <see cref="M:Leadtools.WinForms.RasterImageListItemCollection.Insert(System.Int32,Leadtools.WinForms.RasterImageListItem)"/>
            method. To remove items, you can use either the <see cref="M:Leadtools.WinForms.RasterImageListItemCollection.Remove(Leadtools.WinForms.RasterImageListItem)"/> method or the
            <see cref="M:Leadtools.RasterCollection.RemoveAt(System.Int32)"/> method if you know where the item is located in the
            collection. The <see cref="M:Leadtools.RasterCollection.Clear"/> method enables you to remove all items from the
            collection instead of using the <see cref="M:Leadtools.WinForms.RasterImageListItemCollection.Remove(Leadtools.WinForms.RasterImageListItem)"/> method to remove a single
            item at a time.</p>
            <p>In addition to methods and properties for adding and removing items, the
            <see cref="T:Leadtools.WinForms.RasterImageListItemCollection"/> also provides methods to find items in the collection. The
            <see cref="M:Leadtools.WinForms.RasterImageListItemCollection.Contains(Leadtools.WinForms.RasterImageListItem)"/> method enables you to determine whether an item is a member
            of the collection. Once you know that the item is located in the collection, you can use the
            <see cref="M:Leadtools.WinForms.RasterImageListItemCollection.IndexOf(Leadtools.WinForms.RasterImageListItem)"/> method to determine where the item is located in the
            collection.</p>
            <B>NOTE:</B> You cannot add an <see cref="T:Leadtools.WinForms.RasterImageListItem"/> to more than one <see cref="T:Leadtools.WinForms.RasterImageList"/> 
            control at the same time.  If you attempt to do this, an exception will be thrown.<br/>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageListItemCollection.#ctor(Leadtools.WinForms.RasterImageList)">
            <summary>
            Initializes a new instance of the <see cref="T:Leadtools.WinForms.RasterImageListItemCollection"/> class.
            </summary>
            <param name="imageList">The <see cref="T:Leadtools.WinForms.RasterImageList"/> that owns the collection.</param>
            <remarks>
            <p>You cannot create an instance of this class without associating it with a <see cref="T:Leadtools.WinForms.RasterImageList"/> control.</p>
            <p>You normally do not need to create an instance of this class manually, <see cref="T:Leadtools.WinForms.RasterImageList"/> generates
            one automatically that you can access through the <see cref="P:Leadtools.WinForms.RasterImageList.Items"/> property.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageListItemCollection.Add(Leadtools.WinForms.RasterImageListItem)">
            <summary>
            Adds an existing <see cref="T:Leadtools.WinForms.RasterImageListItem"/> object to the collection.
            </summary>
            <param name="item">The <see cref="T:Leadtools.WinForms.RasterImageListItem"/> to add to the collection.</param>
            <returns>The index of the added item.</returns>
            <remarks>
            You can use this method to add an existing <see cref="T:Leadtools.WinForms.RasterImageListItem"/> to the collection.<br/>
            <B>NOTE:</B> You cannot add an <see cref="T:Leadtools.WinForms.RasterImageListItem"/> to more than one <see cref="T:Leadtools.WinForms.RasterImageList"/> 
            control at the same time.  If you attempt to do this, an exception will be thrown.<br/>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageListItemCollection.Contains(Leadtools.WinForms.RasterImageListItem)">
            <summary>
            Determines whether the specified item is located in the collection.
            </summary>
            <param name="item">A <see cref="T:Leadtools.WinForms.RasterImageListItem"/> representing the item to locate in the collection.</param>
            <returns><b>true</b> if the item is contained in the collection; otherwise, <b>false</b>.</returns>
            <remarks>
            The Contains method enables you to determine whether a <see cref="T:Leadtools.WinForms.RasterImageListItem"/> is a member of the
            collection. Once you know that the item is the collection, you can use the <see cref="M:Leadtools.WinForms.RasterImageListItemCollection.IndexOf(Leadtools.WinForms.RasterImageListItem)"/> method to
            determine the position of the item in the collection.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageListItemCollection.IndexOf(Leadtools.WinForms.RasterImageListItem)">
            <summary>
            Returns the index within the collection of the specified item
            </summary>
            <param name="item">A <see cref="T:Leadtools.WinForms.RasterImageListItem"/> representing the item to locate in the collection.</param>
            <returns>The zero-based index of the item's location in the collection. If the item is not
            located in the collection, the return value is negative one (-1).</returns>
            <remarks>
            <p>The <see cref="M:Leadtools.WinForms.RasterImageListItemCollection.IndexOf(Leadtools.WinForms.RasterImageListItem)"/> method enables you to determine the position of an item in the collection.</p>
            <p>To determine whether an item is contained in the collection before calling this method, use the
            <see cref="M:Leadtools.WinForms.RasterImageListItemCollection.Contains(Leadtools.WinForms.RasterImageListItem)"/> method.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageListItemCollection.Insert(System.Int32,Leadtools.WinForms.RasterImageListItem)">
            <summary>
            Inserts an existing <see cref="T:Leadtools.WinForms.RasterImageListItem"/> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index location where the item is inserted.</param>
            <param name="item">The <see cref="T:Leadtools.WinForms.RasterImageListItem"/> that represents the item to insert.</param>
            <remarks>
            <p>This method allows you to insert an existing <see cref="T:Leadtools.WinForms.RasterImageListItem"/> at a specific position in
            the <see cref="T:Leadtools.WinForms.RasterImageListItemCollection"/>.</p>
            <p>To add an item without specifying a specific position in the collection to add the item, use the
            <see cref="M:Leadtools.WinForms.RasterImageListItemCollection.Add(Leadtools.WinForms.RasterImageListItem)"/> method.</p>
            <p>If you want to add an array of items to the collection, use the <see cref="M:Leadtools.RasterCollection.AddRange(System.Collections.ICollection)"/>
            method. You can use this method if you want to insert a new item into an existing collection of items.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageListItemCollection.Remove(Leadtools.WinForms.RasterImageListItem)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">A <see cref="T:Leadtools.WinForms.RasterImageListItem"/> representing the item to remove from the collection.</param>
            <remarks>
            When you remove an item from the collection, the indices change for subsequent items in the collection.
            All information about the removed item is deleted. You can use this method to remove a specific item from
            the collection by specifying the actual item to remove. To specify the index of the item to remove instead
            of the item itself, use the <see cref="M:Leadtools.RasterCollection.RemoveAt(System.Int32)"/> method. To remove all items from the
            collection, use the <see cref="M:Leadtools.RasterCollection.Clear"/> method.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageListItemCollection.OnItemAdded(Leadtools.RasterCollectionEventArgs)">
            <summary>
            Overrides the <see cref="M:Leadtools.RasterCollection.OnItemAdded(Leadtools.RasterCollectionEventArgs)"/> method.
            </summary>
            <remarks>
            For more information, refer to <see cref="M:Leadtools.RasterCollection.OnItemAdded(Leadtools.RasterCollectionEventArgs)"/>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageListItemCollection.OnItemRemoved(Leadtools.RasterCollectionEventArgs)">
            <summary>
            Overrides the <see cref="M:Leadtools.RasterCollection.OnItemRemoved(Leadtools.RasterCollectionEventArgs)"/> method.
            </summary>
            <remarks>
            For more information, refer to <see cref="M:Leadtools.RasterCollection.OnItemRemoved(Leadtools.RasterCollectionEventArgs)"/>
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageListItemCollection.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index within the collection.
            </summary>
            <value>A <see cref="T:Leadtools.WinForms.RasterImageListItem"/> representing the item located at the specified index within the
            collection.</value>
            <param name="index">The index of the item in the collection to get or set.</param>
            <remarks>
            You can use this method to obtain the <see cref="T:Leadtools.WinForms.RasterImageListItem"/> stored at a specific location in the
            collection. To determine the index of a specific item in the collection, use the <see cref="M:Leadtools.WinForms.RasterImageListItemCollection.IndexOf(Leadtools.WinForms.RasterImageListItem)"/> method.
            </remarks>
        </member>
        <member name="T:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs">
            <summary>
            Provides data for the
            <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnail">RasterThumbnailBrowser.LoadThumbnail</see> event.
            </summary>
            <remarks>
            <p>The <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnail">RasterThumbnailBrowser.LoadThumbnail</see> event is
            raised for each item found as a result of calling the
            <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)">RasterThumbnailBrowser.LoadThumbnails</see> method.</p>
            <p><b>RasterThumbnailBrowserLoadThumbnailEventArgs</b> contains the
            <see cref="P:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.FileName"/> property that will hold the physical path to the
            item being loaded.  You can use this property to manually load the image if you chose and set it up in the 
            <see cref="P:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.Image"/> property.</p>
            <p>The <see cref="P:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.Index"/> and
            <see cref="P:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.Total"/> properties gives you an indication of how far the
            loading process has progressed.  You can use this information to update a progress bar for the user.</p>
            <p>The <see cref="P:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.Cancel"/> property lets you abort the loading 
            process at anytime, for example, due to the user pressing a cancel button.</p>
            </remarks>
            <example>
            For an example, refer to <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnail">RasterThumbnailBrowser.LoadThumbnail</see>.
            </example>
        </member>
        <member name="M:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.#ctor(Leadtools.WinForms.RasterImageListItem,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs"/> class with the
            given values.
            </summary>
            <param name="item">The item to load.</param>
            <param name="fileName">The physical path to the file to load.</param>
            <param name="index">A zero-based integer that specifes the current position in number of items to load.</param>
            <param name="total">An integer value that represents the total number of items to load.</param>
            <remarks>
            This constructor is meant to be called internally from the LEADTOOLS for .NET framework.
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.FileName">
            <summary>
            The physical path to the file to load.
            </summary>
            <value>A <see cref="T:System.String"/> that contains the physical path to the file to load.</value>
            <example>
            For an example, refer to <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnail">RasterThumbnailBrowser.LoadThumbnail</see>.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.Index">
            <summary>
            A zero-based integer that specifes the current position in number of items to load.
            </summary>
            <value>The zero-based integer that specifes the current position in number of items to load.</value>
            <remarks>
            You can use the <b>Index</b> and the <see cref="P:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.Total"/> properties to update a progress bar for the load 
            process.  You need to setup the progress bar with the following:
            <list type="table">
              <listheader>
                 <term>Property</term>
                 <description>Value</description>
               </listheader>
              <item>
                 <term><see cref="P:System.Windows.Forms.ProgressBar.Minimum">ProgressBar.Minimum</see></term>
                 <description>0 - You only need to set this the first time</description>
              </item>
              <item>
                 <term><see cref="P:System.Windows.Forms.ProgressBar.Maximum">ProgressBar.Maximum</see></term>
                 <description><see cref="P:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.Total"/> - You only need to set this the first time</description>
              </item>
              <item>
                 <term><see cref="P:System.Windows.Forms.ProgressBar.Value">ProgressBar.Value</see></term>
                 <description><b>Index</b></description>
              </item>
            </list>
            </remarks>
            <example>
            For an example, refer to <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnail">RasterThumbnailBrowser.LoadThumbnail</see>.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.Total">
            <summary>
            An integer value that represents the total number of items to load.
            </summary>
            <value>The total number of items to load.</value>
            <remarks>
            You can use the <see cref="P:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.Index"/> and the <b>Total</b> properties to update a progress bar for the load 
            process.  You need to setup the progress bar with the following:
            <list type="table">
              <listheader>
                 <term>Property</term>
                 <description>Value</description>
               </listheader>
              <item>
                 <term><see cref="P:System.Windows.Forms.ProgressBar.Minimum">ProgressBar.Minimum</see></term>
                 <description>0 - You only need to set this the first time</description>
              </item>
              <item>
                 <term><see cref="P:System.Windows.Forms.ProgressBar.Maximum">ProgressBar.Maximum</see></term>
                 <description><b>Total</b> - You only need to set this the first time</description>
              </item>
              <item>
                 <term><see cref="P:System.Windows.Forms.ProgressBar.Value">ProgressBar.Value</see></term>
                 <description><see cref="P:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.Index"/></description>
              </item>
            </list>
            </remarks>
            <example>
            For an example, refer to <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnail">RasterThumbnailBrowser.LoadThumbnail</see>.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.Image">
            <summary>
            The image thumbnail to load.
            </summary>
            <value>An <see cref="T:Leadtools.IRasterImage"/> object of the item.</value>
            <remarks>
            The <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser"/> object fires the
            <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnail">RasterThumbnailBrowser.LoadThumbnail</see> once for each file
            found. Initially, the <b>Image</b> value of the <see cref="T:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs"/> event
            data will be set to a null reference (Nothing in Visual Basic).  If you decide to manually load the image
            yourself, you can set the object that you load in the <b>Image</b> property. 
            The <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser"/> object will check if the <b>Image</b> if still a null reference
            (Nothing in Visual Basic), and will only load the image if it is not.
            </remarks>
            <example>
            For an example, refer to <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnail">RasterThumbnailBrowser.LoadThumbnail</see>.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the loading event should be canceled.
            </summary>
            <value><b>true</b> if the loading event should be canceled; otherwise, <b>false</b>.</value>
            <example>
            For an example, refer to <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnail">RasterThumbnailBrowser.LoadThumbnail</see>.
            </example>
        </member>
        <member name="T:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventHandler">
            <summary>
            Represents the method that handles the
            <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnail">RasterThumbnailBrowser.LoadThumbnail</see> event.
            </summary>
            <parameters>
            The declaration of your event handler must have the same parameters as the
            <b>RasterThumbnailBrowserLoadThumbnailEventHandler</b> delegate declaration.
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs"/> that contains the event data.</param>
            </parameters>
            <remarks>
            Use this delegate to handle the <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnail">RasterThumbnailBrowser.LoadThumbnail</see>
            event.
            </remarks>
            <example>
            For an example, refer to <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnail">RasterThumbnailBrowser.LoadThumbnail</see>.
            </example>
        </member>
        <member name="T:Leadtools.WinForms.RasterThumbnailBrowser">
            <summary>
            Derives from the <see cref="T:Leadtools.WinForms.RasterImageList"/> control to provides functionality to automatically generate thumbnails
            for images in a disk folder.
            </summary>
            <remarks>
            <p>The <b>RasterThumbnailBrowser</b> lets you quickly and easily create thumbnails for images that reside on any
            file folder in the system.  Since the <b>RasterThumbnailBrowser</b> derives from the <see cref="T:Leadtools.WinForms.RasterImageList"/>
            control, you get all the visual styles available to the image list (different view styles, control the item size,
            color, etc.) as well as the same interface to manually add/remove/edit items.</p>
            <p>You call the <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)"/> method passing it the path of the folder for
            which you want to create thumbnails, a search pattern and a boolean value indicating whether you want the control
            to block until all thumbnails are created or to return immediately and continue loading the thumbnails in a 
            background thread.</p>
            <p>The control will first read the folder and create the items you need.  These items will initially have a default
            "loading" thumbnail set in their <see cref="P:Leadtools.WinForms.RasterImageListItem.Image">RasterImageListItem.Image</see> that you can
            access and change through the <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.LoadingThumbnails"/> property.  Once the item image
            file is loaded and its thumbnail extracted, the control will replace the item <see cref="P:Leadtools.WinForms.RasterImageListItem.Image"/>
            property with the correct thumbnail.  This gives the user a visual feedback on which items are loaded and which are
            yet to be loaded.  If the control cannot load a certain file (for example, if the file is not a valid image format
            file), an "error" thumbnail will be used in the item.  You can access and change this thumbnail image through the
            <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.ErrorThumbnail"/> property.</p>
            <p>During the loading operation, you can check the <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.IsLoadingThumbnails"/>
            property to determine if the control is still loading thumbnails in the background.  The
            <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.FinishedLoadingThumbnails"/> event will fire when the loading operation is done.
            You can subscribe to the <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnail"/> event to get feedback about the item
            currently being loaded.  You use this event also to update a progress bar on your application and to cancel
            the load process if neeeded.  The <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.CancelLoadingThumbnails"/> method lets you
            cancel the load operation at any time.</p>
            <p>The <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.ThumbnailSizeFlags"/> property lets you control the quality of the
            thumbnail images created by the <b>RasterThumbnailBrowser</b> control.</p>
            </remarks>
            <example>
            This example will create and add a <b>RasterThumbnailBrowser</b> control to a form.  It will add a "Browse" button,
            a "Cancel" button and a progress bar to the form. This example assumes that you have added the code to a Form and
            call the method created in the example from the constructor or another method on the form.
            <p><b>VB.NET</b></p>
            <code>
            Imports Leadtools
            Imports Leadtools.Codecs
            Imports Leadtools.WinForms
            
            ' Our form controls
            Private panel1 As Panel
            Private buttonBrowse As Button
            Private buttonCancel As Button
            Private progressBar1 As ProgressBar
            Private rasterThumbnailBrowser1 As RasterThumbnailBrowser
            
            ' Save the last folder the user browsed to.
            Private folderPath As String
            
            ' Informs us if the user canceled the operation
            Private cancelOperation As Boolean
            
            Private Sub TestThumbnailBrowser()
               ' First, Create the controls:
               ' - A "controls" panel dock to the top.
               ' - A "Browse" button for the user to select the folder to browse.
               ' - A progress bar and a "Cancel" button so the user can have visual feedback of the load
               '   process as well the ability to cancel the operation.
               ' - A RasterThumbnailBrowser control docked to fill
            
               Me.SuspendLayout()
            
               buttonBrowse = New Button
            
               panel1 = New Panel
               panel1.Dock = DockStyle.Top
               panel1.Height = buttonBrowse.Height
               Me.Controls.Add(panel1)
               panel1.BringToFront()
            
               buttonBrowse.Text = "Browse"
               buttonBrowse.FlatStyle = FlatStyle.System
               buttonBrowse.Dock = DockStyle.Left
               panel1.Controls.Add(buttonBrowse)
               buttonBrowse.BringToFront()
            
               buttonCancel = New Button
               buttonCancel.Text = "Cancel"
               buttonCancel.FlatStyle = FlatStyle.System
               buttonCancel.Dock = DockStyle.Left
               panel1.Controls.Add(buttonCancel)
               buttonCancel.BringToFront()
            
               progressBar1 = New ProgressBar
               progressBar1.Dock = DockStyle.Fill
               panel1.Controls.Add(progressBar1)
               progressBar1.BringToFront()
            
               rasterThumbnailBrowser1 = New RasterThumbnailBrowser
               rasterThumbnailBrowser1.Dock = DockStyle.Fill
               Me.Controls.Add(rasterThumbnailBrowser1)
               rasterThumbnailBrowser1.BringToFront()
            
               Me.ResumeLayout()
            
               ' Create a new RasterCodecs object and assign to the
               ' thumbnail browser
               RasterCodecs.CodecsPath = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin"
               Me.rasterThumbnailBrowser1.Codecs = New RasterCodecs
            
               ' Add handlers for the Click event of the buttons
               AddHandler buttonBrowse.Click, AddressOf buttonBrowse_Click
               AddHandler buttonCancel.Click, AddressOf buttonCancel_Click
            
               ' Add a handler to the LoadThumbnail event of the thumbnail browser control
               ' We will use this event to update the progress bar.
               AddHandler rasterThumbnailBrowser1.LoadThumbnail, AddressOf rasterThumbnailBrowser1_LoadThumbnail
            
               ' Add a handler to the FinishedLoadingThumbnails event of the thumbnail browser control.
               ' We will use this event to update the state of our application
               AddHandler Me.rasterThumbnailBrowser1.FinishedLoadingThumbnails, AddressOf rasterThumbnailBrowser1_FinishedLoadingThumbnails
            
               ' Use best quality when creating the thumbnails
               rasterThumbnailBrowser1.ThumbnailSizeFlags = RasterSizeFlags.Bicubic
            
               ' We are not loading anything yet
               buttonCancel.Enabled = False
            End Sub
            
            Private Sub buttonBrowse_Click(ByVal sender As Object, ByVal e As EventArgs)
               ' User clicked the Browse button.  Get the folder to browse to
               ' from the user
               Dim dlg As New FolderBrowserDialog
               dlg.Description = "Select the directory that contains the images you want."
               dlg.ShowNewFolderButton = False
            
               If (Not Me.folderPath Is Nothing) Then
                  dlg.SelectedPath = Me.folderPath
               End If
            
               If (dlg.ShowDialog(Me) = DialogResult.OK) Then
                  ' If we are already loading thumbails, cancel
                  ' this operation
                  If (Me.rasterThumbnailBrowser1.IsLoadingThumbnails) Then
                     Me.rasterThumbnailBrowser1.CancelLoadingThumbnails()
                  End If
            
                  ' Clean all the items
                  Me.rasterThumbnailBrowser1.Items.Clear()
            
                  ' Save the folder path
                  Me.folderPath = dlg.SelectedPath
            
                  ' Update the application state
                  Me.buttonCancel.Enabled = True
                  Me.progressBar1.Value = 0
            
                  ' And load the new thumbnails
                  Me.cancelOperation = False
                  Me.rasterThumbnailBrowser1.LoadThumbnails(folderPath, "*.*", RasterThumbnailBrowserLoadFlags.None)
               End If
            End Sub
            
            Private Sub rasterThumbnailBrowser1_LoadThumbnail(ByVal sender As Object, ByVal e As RasterThumbnailBrowserLoadThumbnailEventArgs)
               ' If this is the first iteration, update the progress bar minimum and maximum values
               If (e.Index = 0) Then
                  Me.progressBar1.Minimum = 0
                  Me.progressBar1.Maximum = e.Total - 1
               End If
            
               ' Update where we are in the loading operation
               Me.progressBar1.Value = e.Index
            
               ' Check if we need to cancel (due to the user clicking the Cancel button)
               If (Me.cancelOperation) Then
                  e.Cancel = True
               End If
            End Sub
            
            Private Sub rasterThumbnailBrowser1_FinishedLoadingThumbnails(ByVal sender As Object, ByVal e As EventArgs)
               ' We are done loading the thumbails, update the application state
               Me.buttonCancel.Enabled = False
            End Sub
            
            Private Sub buttonCancel_Click(ByVal sender As Object, ByVal e As EventArgs)
               ' The user has clicked the cancel button
               Me.cancelOperation = True
            End Sub
            </code>
            <p><b>C#</b></p>
            <code>
            using Leadtools;
            using Leadtools.Codecs;
            using Leadtools.WinForms;
            
            // Our form controls
            private Panel panel1;
            private Button buttonBrowse;
            private Button buttonCancel;
            private ProgressBar progressBar1;
            private RasterThumbnailBrowser rasterThumbnailBrowser1;
            
            // Save the last folder the user browsed to.
            private string folderPath;
            
            // Informs us if the user canceled the operation
            private bool cancelOperation;
            
            private void TestThumbnailBrowser()
            {
               // First, Create the controls:
               // - A "controls" panel dock to the top.
               // - A "Browse" button for the user to select the folder to browse.
               // - A progress bar and a "Cancel" button so the user can have visual feedback of the load
               //   process as well the ability to cancel the operation.
               // - A RasterThumbnailBrowser control docked to fill
            
               this.SuspendLayout();
            
               buttonBrowse = new Button();
            
               panel1 = new Panel();
               panel1.Dock = DockStyle.Top;
               panel1.Height = buttonBrowse.Height;
               this.Controls.Add(panel1);
               panel1.BringToFront();
            
               buttonBrowse.Text = "Browse";
               buttonBrowse.FlatStyle = FlatStyle.System;
               buttonBrowse.Dock = DockStyle.Left;
               panel1.Controls.Add(buttonBrowse);
               buttonBrowse.BringToFront();
            
               buttonCancel = new Button();
               buttonCancel.Text = "Cancel";
               buttonCancel.FlatStyle = FlatStyle.System;
               buttonCancel.Dock = DockStyle.Left;
               panel1.Controls.Add(buttonCancel);
               buttonCancel.BringToFront();
            
               progressBar1 = new ProgressBar();
               progressBar1.Dock = DockStyle.Fill;
               panel1.Controls.Add(progressBar1);
               progressBar1.BringToFront();
            
               rasterThumbnailBrowser1 = new RasterThumbnailBrowser();
               rasterThumbnailBrowser1.Dock = DockStyle.Fill;
               this.Controls.Add(rasterThumbnailBrowser1);
               rasterThumbnailBrowser1.BringToFront();
            
               this.ResumeLayout();
            
               // Create a new RasterCodecs object and assign to the
               // thumbnail browser
               RasterCodecs.CodecsPath = @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin";
               this.rasterThumbnailBrowser1.Codecs = new RasterCodecs();
            
               // Add handlers for the Click event of the buttons
               buttonBrowse.Click += new EventHandler(buttonBrowse_Click);
               buttonCancel.Click += new EventHandler(buttonCancel_Click);
            
               // Add a handler to the LoadThumbnail event of the thumbnail browser control
               // We will use this event to update the progress bar.
               rasterThumbnailBrowser1.LoadThumbnail += new RasterThumbnailBrowserLoadThumbnailEventHandler(rasterThumbnailBrowser1_LoadThumbnail);
            
               // Add a handler to the FinishedLoadingThumbnails event of the thumbnail browser control.
               // We will use this event to update the state of our application
               this.rasterThumbnailBrowser1.FinishedLoadingThumbnails += new EventHandler(rasterThumbnailBrowser1_FinishedLoadingThumbnails);
            
               // Use best quality when creating the thumbnails
               rasterThumbnailBrowser1.ThumbnailSizeFlags = RasterSizeFlags.Bicubic;
            
               // We are not loading anything yet
               buttonCancel.Enabled = false;
            }
            
            private void buttonBrowse_Click(object sender, EventArgs e)
            {
               // User clicked the Browse button.  Get the folder to browse to
               // from the user
               FolderBrowserDialog dlg = new FolderBrowserDialog();
               dlg.Description = "Select the directory that contains the images you want.";
               dlg.ShowNewFolderButton = false;
            
               if(this.folderPath != null)
                  dlg.SelectedPath = this.folderPath;
            
               if(dlg.ShowDialog(this) == DialogResult.OK)
               {
                  // If we are already loading thumbails, cancel
                  // this operation
                  if(this.rasterThumbnailBrowser1.IsLoadingThumbnails)
                     this.rasterThumbnailBrowser1.CancelLoadingThumbnails();
            
                  // Clean all the items
                  this.rasterThumbnailBrowser1.Items.Clear();
            
                  // Save the folder path
                  this.folderPath = dlg.SelectedPath;
            
                  // Update the application state
                  this.buttonCancel.Enabled = true;
                  this.progressBar1.Value = 0;
            
                  // And load the new thumbnails
                  this.cancelOperation = false;
                  this.rasterThumbnailBrowser1.LoadThumbnails(folderPath, "*.*", RasterThumbnailBrowserLoadFlags.None);
               }
            }
            
            private void rasterThumbnailBrowser1_LoadThumbnail(object sender, RasterThumbnailBrowserLoadThumbnailEventArgs e)
            {
               // If this is the first iteration, update the progress bar minimum and maximum values
               if(e.Index == 0)
               {
                  this.progressBar1.Minimum = 0;
                  this.progressBar1.Maximum = e.Total - 1;
               }
            
               // Update where we are in the loading operation
               this.progressBar1.Value = e.Index;
            
               // Check if we need to cancel (due to the user clicking the Cancel button)
               if(this.cancelOperation)
                  e.Cancel = true;
            }
            
            private void rasterThumbnailBrowser1_FinishedLoadingThumbnails(object sender, EventArgs e)
            {
               // We are done loading the thumbails, update the application state
               this.buttonCancel.Enabled = false;
            }
            
            private void buttonCancel_Click(object sender, EventArgs e)
            {
               // The user has clicked the cancel button
               this.cancelOperation = true;
            }
            </code>
            </example>
        </member>
        <member name="M:Leadtools.WinForms.RasterThumbnailBrowser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser"/> class.
            </summary>
            <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser"/>.
            </example>
        </member>
        <member name="M:Leadtools.WinForms.RasterThumbnailBrowser.Dispose(System.Boolean)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)">Control.Dispose</see>.
            </summary>
        </member>
        <member name="M:Leadtools.WinForms.RasterThumbnailBrowser.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Leadtools.WinForms.RasterThumbnailBrowser.OnCodecsChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.CodecsChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The <b>OnCodecsChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p><b>Notes to Inheritors:</b> When overriding <b>OnCodecsChanged</b> in a derived class, be sure to call
            the base class's <b>OnCodecsChanged</b> method so that registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterThumbnailBrowser.OnErrorThumbnailChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.ErrorThumbnailChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The <b>OnErrorThumbnailChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p><b>Notes to Inheritors:</b> When overriding <b>OnErrorThumbnailChanged</b> in a derived class, be sure to call
            the base class's <b>OnErrorThumbnailChanged</b> method so that registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterThumbnailBrowser.OnLoadingThumbnailChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadingThumbnailChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The <b>OnLoadingThumbnailChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p><b>Notes to Inheritors:</b> When overriding <b>OnLoadingThumbnailChanged</b> in a derived class, be sure to call
            the base class's <b>OnLoadingThumbnailChanged</b> method so that registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterThumbnailBrowser.OnThumbnailSizeFlagsChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.ThumbnailSizeFlagsChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The <b>OnThumbnailSizeFlagsChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p><b>Notes to Inheritors:</b> When overriding <b>OnThumbnailSizeFlagsChanged</b> in a derived class, be sure to call
            the base class's <b>OnThumbnailSizeFlagsChanged</b> method so that registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterThumbnailBrowser.OnLoadThumbnail(Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnail"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The <b>OnLoadThumbnail</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p><b>Notes to Inheritors:</b> When overriding <b>OnLoadThumbnail</b> in a derived class, be sure to call
            the base class's <b>OnLoadThumbnail</b> method so that registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterThumbnailBrowser.CancelLoadingThumbnails">
            <summary>
            Cancels the load operation at any time.
            </summary>
            <remarks>
            You can call this method at any time to abort loading remaining thumbnails (if any).  Thumbnails are
            loaded with the <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)"/> method.  At any time, you can check if the control has any 
            items that are yet to be loaded with the <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.IsLoadingThumbnails"/> property.
            </remarks>
            <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser"/>.
            </example>
        </member>
        <member name="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)">
            <summary>
            Browses the specified directory for supported images, and generates thumbnails for each image file that is found.
            </summary>
            <param name="path">The directory to browse.</param>
            <param name="searchPattern">The search string to match against the names of files in <i>path</i>. The parameter cannot
            end in two periods ("..") or contain two periods ("..") followed by <see cref="F:System.IO.Path.DirectorySeparatorChar"/> or
            <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>, nor can it contain any of the characters in
            <see cref="F:System.IO.Path.InvalidPathChars"/>.</param>
            <param name="flags">An <see cref="T:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags"/> enumeration that can be a combination of
            the following:
            <list type="table">
              <listheader>
                 <term>Value</term>
                 <description>Description</description>
               </listheader>
              <item>
                 <term><see cref="F:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags.None"/></term>
                 <description>Default mode, the method will return immediatly and the thumbnails are loaded in a
                 background thread.</description>
              </item>
              <item>
                 <term><see cref="F:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags.Block"/></term>
                 <description>The method will not return until all thumbnails are loaded.</description>
              </item>
              <item>
                 <term><see cref="F:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags.OnlyValidImageFiles"/></term>
                 <description>Only valid image files are loaded.  Any file that contains data not recognized by the 
                 <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.Codecs"/> object as a valid image file will not be loaded.</description>
              </item>
            </list>
            </param>
            <remarks>
            <p>Use the <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)"/> method to populate the <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser"/> control
            with the thumbnails of image files found in the directory specified by <i>path</i>.  The control will load the
            images in the following manner:
            <list type="bullet">
              <item><description>
              All items already in control are cleared.
              </description></item>
              <item><description>
              The control will create an item for each file that matches <i>searchPattern</i>.
              </description></item>
              <item><description>
              If <see cref="F:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags.OnlyValidImageFiles"/> is specified in
              <i>flags</i>, the control will use the <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.String,System.Boolean)"/> method of the
              <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.Codecs"/> object to check if the given file contains a valid image or not.  If it does not, no item
              will be created for this file.</description></item>
              <item><description>The control fills the <see cref="P:Leadtools.WinForms.RasterImageListItem.FileName"/> property of the item with
              the name of the file found, <see cref="P:Leadtools.WinForms.RasterImageListItem.Page"/> will be set to 1,
              <see cref="P:Leadtools.WinForms.RasterImageListItem.Text"/> with file name and extension of the specified file and
              <see cref="P:Leadtools.WinForms.RasterImageListItem.Image"/> with <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.LoadingThumbnail"/>.
              If <see cref="F:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags.Block"/> is specified in <i>flags</i>, the
              control will then continue to load the thumbnails for all items before returning.  If
              <see cref="F:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags.Block"/> is not specified, the control will create a background
              thread to load the thumbnails for all the items and return control to the caller at this stage.
              </description></item>
              <item><description>
              The control will raise the <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnail"/> event for each item before it creates the thumbnail
              for it.  You can use this event to update a progress bar, cancel the operation or load the thumbnail yourself.
              </description></item>
              <item><description>
              If the non-blocking loading operation is specified, you can check the <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.IsLoadingThumbnails"/> at 
              any time to determine whether the control has more items to load.
              </description></item>
              <item><description>
              The <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.FinishedLoadingThumbnails"/> event is raised by the control when the thumbnails of all items
              have been created.
              </description></item>
              <item><description>
              The <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.CancelLoadingThumbnails"/> method can be called at any time to abort creating the thumbnails of all
              items.
              </description></item>
            </list></p>
            </remarks>
            <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser"/>.
            </example>
        </member>
        <member name="M:Leadtools.WinForms.RasterThumbnailBrowser.OnFinishedLoadingThumbnails(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.FinishedLoadingThumbnails"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The <b>OnFinishedLoadingThumbnails</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p><b>Notes to Inheritors:</b> When overriding <b>OnFinishedLoadingThumbnails</b> in a derived class, be sure to call
            the base class's <b>OnFinishedLoadingThumbnails</b> method so that registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterThumbnailBrowser.Codecs">
            <summary>
            Gets and sets the <see cref="T:Leadtools.Codecs.RasterCodecs"/> object used to load the thumbnail images.
            </summary>
            <value>A <see cref="T:Leadtools.Codecs.RasterCodecs"/> object used to load the thumbnail images.  Default value is
            a null reference (Nothing in Visual Basic).</value>
            <remarks>
            The <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser"/> control automatically loads and creates thumbnails for the images found
            on the disk folder when the <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)"/> method is called.  You need to set the <b>Codecs</b>
            property with an instance of the <see cref="T:Leadtools.Codecs.RasterCodecs"/> class to be used to load these images.  You can
            re-use the <see cref="T:Leadtools.Codecs.RasterCodecs"/> object that you are using in your main application.
            </remarks>
            <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser"/>.
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterThumbnailBrowser.CodecsChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.Codecs"/> property changes.
            </summary>
            <remarks>
            <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.Codecs"/> property is changed by either a programmatic
            modification or user interaction.</p>
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterThumbnailBrowser.ErrorThumbnail">
            <summary>
            Gets and sets the image used to display items that could not be loaded.
            </summary>
            <value>An <see cref="T:Leadtools.IRasterImage"/> used to display items that could not be loaded.</value>
            <remarks>
            <p>During the loading operation as a result of calling the <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)"/> method, some of the files
            found in the folder may not be image files or are corrupted.  The <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser"/> control
            will assign the image set in the <b>ErrorThumbnail</b> property into the items that cannot be loaded.</p>
            <p>Initially, the the value of the <b>ErrorThumbnail</b> property is initialized with an image loaded
            from the DLL resource.  You can however change the value of this property to your own custom image.</p>
            </remarks>
            <example>
            This example will create custom images to use as the "error" and "loading" thumbnails.
            <p><b>VB.NET</b></p>
            <code>
            Imports Leadtools
            Imports Leadtools.WinForms
            
            Private Sub TestCustomImages(ByVal thumbnailBrowser As RasterThumbnailBrowser)
               ' Get the image size
               Dim imageSize As Size = thumbnailBrowser.ItemImageSize
            
               ' No "loading" thumbnail
               thumbnailBrowser.LoadingThumbnail = Nothing
            
               ' For the "error" thumbnail, create a red X image
               Dim image As New RasterImage( _
                  RasterMemoryFlags.Managed, _
                  imageSize.Width, _
                  imageSize.Height, _
                  24, _
                  RasterByteOrder.Bgr, _
                  RasterViewPerspective.TopLeft, _
                  Nothing, _
                  Nothing)
            
               Dim hdc As IntPtr = image.CreateLeadDC()
               Dim g As Graphics = Graphics.FromHdc(hdc)
            
               g.FillRectangle(Brushes.Magenta, 0, 0, imageSize.Width, imageSize.Height)
            
               g.DrawLine(Pens.Red, 0, 0, imageSize.Width, imageSize.Height)
               g.DrawLine(Pens.Red, imageSize.Width, 0, 0, imageSize.Height)
            
               g.Dispose()
               image.DeleteLeadDC(hdc)
            
               ' Make this image transparent
               image.Transparent = True
               image.TransparentColor = RasterColor.FromGdiPlusColor(Color.Magenta)
            
               thumbnailBrowser.ErrorThumbnail = image
            End Sub
            </code>
            <p><b>C#</b></p>
            <code>
            using Leadtools;
            using Leadtools.WinForms;
            
            private void TestCustomImages(RasterThumbnailBrowser thumbnailBrowser)
            {
               // Get the image size
               Size imageSize = thumbnailBrowser.ItemImageSize;
            
               // No "loading" thumbnail
               thumbnailBrowser.LoadingThumbnail = null;
            
               // For the "error" thumbnail, create a red X image
               RasterImage image = new RasterImage(
                  RasterMemoryFlags.Managed,
                  imageSize.Width,
                  imageSize.Height,
                  24,
                  RasterByteOrder.Bgr,
                  RasterViewPerspective.TopLeft,
                  null,
                  null);
            
               IntPtr hdc = image.CreateLeadDC();
               Graphics g = Graphics.FromHdc(hdc);
            
               g.FillRectangle(Brushes.Magenta, 0, 0, imageSize.Width, imageSize.Height);
            
               g.DrawLine(Pens.Red, 0, 0, imageSize.Width, imageSize.Height);
               g.DrawLine(Pens.Red, imageSize.Width, 0, 0, imageSize.Height);
            
               g.Dispose();
               image.DeleteLeadDC(hdc);
            
               // Make this image transparent
               image.Transparent = true;
               image.TransparentColor = RasterColor.FromGdiPlusColor(Color.Magenta);
            
               thumbnailBrowser.ErrorThumbnail = image;
            }
            </code>
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterThumbnailBrowser.ErrorThumbnailChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.ErrorThumbnail"/> property changes.
            </summary>
            <remarks>
            <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.ErrorThumbnail"/> property is changed by either a programmatic
            modification or user interaction.</p>
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterThumbnailBrowser.LoadingThumbnail">
            <summary>
            Gets and sets the image used to display items that have not yet been loaded.
            </summary>
            <value>An <see cref="T:Leadtools.IRasterImage"/> used to display items that have not yet been loaded.</value>
            <remarks>
            <p>During the loading operation as a result of calling the <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)"/> method, the 
            <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser"/> control will create all the items and assign to them the image stored
            in the <b>LoadingThumbnail</b> property first before actually loading any thumbnails.  This will give a visual
            feedback to the user of which items have been loaded and which are not.</p>
            <p>Initially, the the value of the <b>LoadingThumbnail</b> property is initialized with an image loaded
            from the DLL resource.  You can however change the value of this property to your own custom image.</p>
            </remarks>
            <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.ErrorThumbnail"/>.
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadingThumbnailChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.LoadingThumbnail"/> property changes.
            </summary>
            <remarks>
            <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.LoadingThumbnail"/> property is changed by either a programmatic
            modification or user interaction.</p>
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterThumbnailBrowser.ThumbnailSizeFlags">
            <summary>
            Controls the quality of the thumbnail images created by the control.
            </summary>
            <value>A <see cref="T:Leadtools.RasterSizeFlags"/> enumeration that controls quality of the thumbnail images
            created by the control.</value>
            <remarks>The <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser"/> control creates thumbnail for the images found as a result of
            calling the <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)"/> method. Some of these images might be larger than the
            <see cref="P:Leadtools.WinForms.RasterImageList.ItemImageSize"/> value, so the control will create a thumbnail of these images.
            You can control the speed and quality of the thumbnail creation operation by changing the
            <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.ThumbnailSizeFlags"/> property.  For example,
            <see cref="F:Leadtools.RasterSizeFlags.Normal">RasterSizeFlags.Normal</see> will result in the fastest thumbnail creation
            operation but with lower quality. <see cref="F:Leadtools.RasterSizeFlags.Bicubic"/> will result in very high quality
            thumbnails, but the process of creating these thumbnails is much slower.  Several other options are
            available, for more information, refer to the <see cref="T:Leadtools.RasterSizeFlags"/> enumeration.</remarks>
            <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser"/>.
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterThumbnailBrowser.ThumbnailSizeFlagsChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.ThumbnailSizeFlags"/> property changes.
            </summary>
            <remarks>
            <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.ThumbnailSizeFlags"/> property is changed by either a programmatic
            modification or user interaction.</p>
            </remarks>
        </member>
        <member name="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnail">
            <summary>
            Occurs when the control loads the thumbnail of an item.
            </summary>
            <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser"/>.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterThumbnailBrowser.IsLoadingThumbnails">
            <summary>
            Determines if the control is still loading thumbnails in the background.
            </summary>
            <value><b>true</b> if the control is still loading thumbnails in the background; otherwise, false.</value>
            <remarks>
            When the <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)"/> method is called in a non-blocking manner, the thumbnails for the items
            will be created in a background thread.  You can check the <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.IsLoadingThumbnails"/> property at any
            time to determine whether the control is still loading thumbnails or not.  You can also use the
            <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.FinishedLoadingThumbnails"/> event to receive notification from the control when the loading
            operation is complete.
            </remarks>
            <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser"/>.
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterThumbnailBrowser.FinishedLoadingThumbnails">
            <summary>
            Occurs when the loading operation finishes.
            </summary>
            <remarks>
            <p>This event is raised if when the loading operation (initiated by calling the <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)"/> method)
            is finished either due to all items being completely loaded or due to the user canceling the load operation.</p>
            </remarks>
            <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser"/>.
            </example>
        </member>
        <member name="T:Leadtools.WinForms.RasterMagnifyGlassCrosshair">
            <summary>
            Represents the type of the crosshair.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterMagnifyGlassCrosshair.None">
            <summary>
            No Crosshair.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterMagnifyGlassCrosshair.Fine">
            <summary>
            The crosshair shows with with lines, the width of which are specified by
             <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.CrosshairWidth"/> property, and the color of
             which are specified by <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.CrosshairColor"/> property.
            </summary>
        </member>
        <member name="T:Leadtools.WinForms.RasterMagnifyGlassShape">
            <summary>
            Represents the shape of the Magnifying Glass.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterMagnifyGlassShape.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterMagnifyGlassShape.Border3D">
            <summary>
            The rectangular Magnifying Glass appears with a 3D border. The border style is specified in the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Border3DStyle"/> property.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterMagnifyGlassShape.Rectangle">
            <summary>
            The Magnifying Glass is a Rectangle. The border color, and the border width of this rectangle are specified by the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.BorderColor"/>, and <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.BorderWidth"/> properties respectively.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterMagnifyGlassShape.RoundRectangle">
            <summary>
            The Magnifying Glass is a Round Rectangle. The border color, the border width, and the arc size of the rounded corners of this round rectangle region are specified by the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.BorderColor"/>, <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.BorderWidth"/>, and <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.RoundRectangleEllipseSize"/> properties respectively.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterMagnifyGlassShape.Ellipse">
            <summary>
            The Magnifying Glass is an Ellipse. The border color, and the border width of this ellipse region are specified by the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.BorderColor"/>, and <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.BorderWidth"/> properties respectively.
            </summary>
        </member>
        <member name="T:Leadtools.WinForms.RasterMagnifyGlass">
            <summary>
            Represents a Leadtools MagnifyGlass control for "zooming in" a portion of an image.
            </summary>
            <remarks>
            The <b>RasterMagnifyGlass</b> is used to "zoom in" a portion of an image displayed in <see cref="T:Leadtools.WinForms.RasterImageViewer"/> control.
            When a user clicks inside the <see cref="T:Leadtools.WinForms.RasterImageViewer"/> control associated with the <b>RasterMagnifyGlass</b> control, 
            the portion
            of the image around the mouse cursor will be zoomed in. When a user clicks inside the <see cref="T:Leadtools.WinForms.RasterImageViewer"/> control 
            and moves the mouse, while holding down the button, the zoomed in portion will change according to the
            mouse 
            pointer position on the bitmap.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterMagnifyGlass.#ctor">
            <summary>
            Initializes a new instance of the <b>RasterMagnifyGlass</b> class.
            </summary>
            <example>
            <para><b>VB.NET</b></para>
            <code>
            Dim magnifyGlass As RasterMagnifyGlass = New RasterMagnifyGlass
            </code>
            <para><b>C#</b></para>
            <code>
            RasterMagnifyGlass magnifyGlass = new RasterMagnifyGlass();
            </code>
            </example>
        </member>
        <member name="M:Leadtools.WinForms.RasterMagnifyGlass.OnViewerChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterMagnifyGlass.ViewerChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate. The <b>OnViewerChanged</b> method also allows 
            derived classes to handle the event without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. Notes to Inheritors: When overriding <b>OnViewerChanged</b> in a 
            derived class, be sure to call the base class's <b>OnViewerChanged</b> method so that registered delegates 
            receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterMagnifyGlass.OnSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterMagnifyGlass.SizeChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate. The <b>OnSizeChanged</b> method also allows 
            derived classes to handle the event without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. Notes to Inheritors: When overriding <b>OnSizeChanged</b> in a 
            derived class, be sure to call the base class's <b>OnSizeChanged</b> method so that registered delegates 
            receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterMagnifyGlass.OnScaleFactorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterMagnifyGlass.ScaleFactorChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate. The <b>OnScaleFactorChanged</b> method also allows 
            derived classes to handle the event without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. Notes to Inheritors: When overriding <b>OnScaleFactorChanged</b> in a 
            derived class, be sure to call the base class's <b>OnScaleFactorChanged</b> method so that registered delegates 
            receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterMagnifyGlass.OnShapeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterMagnifyGlass.ShapeChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate. The <b>OnShapeChanged</b> method also allows 
            derived classes to handle the event without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. Notes to Inheritors: When overriding <b>OnShapeChanged</b> in a 
            derived class, be sure to call the base class's <b>OnShapeChanged</b> method so that registered delegates 
            receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterMagnifyGlass.OnBorder3DStyleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterMagnifyGlass.Border3DStyleChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate. The <b>OnBorder3DStyleChanged</b> method also allows 
            derived classes to handle the event without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. Notes to Inheritors: When overriding <b>OnBorder3DStyleChanged</b> in a 
            derived class, be sure to call the base class's <b>OnBorder3DStyleChanged</b> method so that registered delegates 
            receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterMagnifyGlass.OnBorderColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterMagnifyGlass.BorderColorChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate. The <b>OnBorderColorChanged</b> method also allows 
            derived classes to handle the event without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. Notes to Inheritors: When overriding <b>OnBorderColorChanged</b> in a 
            derived class, be sure to call the base class's <b>OnBorderColorChanged</b> method so that registered delegates 
            receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterMagnifyGlass.OnBorderWidthChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterMagnifyGlass.BorderWidthChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate. The <b>OnBorderWidthChanged</b> method also allows 
            derived classes to handle the event without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. Notes to Inheritors: When overriding <b>OnBorderWidthChanged</b> in a 
            derived class, be sure to call the base class's <b>OnBorderWidthChanged</b> method so that registered delegates 
            receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterMagnifyGlass.OnCrosshairChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterMagnifyGlass.CrosshairChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate. The <b>OnCrosshairChanged</b> method also allows 
            derived classes to handle the event without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. Notes to Inheritors: When overriding <b>OnCrosshairChanged</b> in a 
            derived class, be sure to call the base class's <b>OnCrosshairChanged</b> method so that registered delegates 
            receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterMagnifyGlass.OnCrosshairColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterMagnifyGlass.CrosshairColorChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate. The <b>OnCrosshairColorChanged</b> method also allows 
            derived classes to handle the event without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. Notes to Inheritors: When overriding <b>OnCrosshairColorChanged</b> in a 
            derived class, be sure to call the base class's <b>OnCrosshairColorChanged</b> method so that registered delegates 
            receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterMagnifyGlass.OnCrosshairWidthChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterMagnifyGlass.CrosshairWidthChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate. The <b>OnCrosshairWidthChanged</b> method also allows 
            derived classes to handle the event without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. Notes to Inheritors: When overriding <b>OnCrosshairWidthChanged</b> in a 
            derived class, be sure to call the base class's <b>OnCrosshairWidthChanged</b> method so that registered delegates 
            receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterMagnifyGlass.OnRoundRectangleEllipseSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterMagnifyGlass.RoundRectangleEllipseSizeChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate. The <b>OnRoundRectangleEllipseSizeChanged</b> method also allows 
            derived classes to handle the event without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. Notes to Inheritors: When overriding <b>OnRoundRectangleEllipseSizeChanged</b> in a 
            derived class, be sure to call the base class's <b>OnRoundRectangleEllipseSizeChanged</b> method so that registered delegates 
            receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterMagnifyGlass.OnPaintImage(System.Drawing.Graphics,System.Drawing.Point)">
            <summary>
            Occurs when the Image for the Magnifying Glass is redrawn.
            </summary>
            <remarks>
            You can override this method in order to perform your own painting for the Magnifying Glass.
            Call the base class implementation for the default behavior.
            </remarks>
            <param name="g">The Graphics object used to paint.</param>
            <param name="centerPoint">The center point of the Magnifying Glass rectangle</param>
            <example>
            Refer to the tutorial <a href="Tutorials\AdvancedMagnifyingGlass.html">Advanced Magnifying Glass</a>.
            </example>
        </member>
        <member name="M:Leadtools.WinForms.RasterMagnifyGlass.OnPaintCrosshair(System.Drawing.Graphics,System.Drawing.Point)">
            <summary>
            Occurs when the Magnifying Glass crosshair is redrawn.
            </summary>
            <remarks>
            You can override this method in order to paint your own crosshair for the Magnifying Glass.
            Call the base class implementation for the default behavior.
            </remarks>
            <param name="g">The Graphics object used to paint.</param>
            <param name="centerPoint">The center point of the Magnifying Glass rectangle</param>
            <example>
            Refer to the tutorial <a href="Tutorials\AdvancedMagnifyingGlass.html">Advanced Magnifying Glass</a>.
            </example>
        </member>
        <member name="M:Leadtools.WinForms.RasterMagnifyGlass.OnPaintBorder(System.Drawing.Graphics,System.Drawing.Point)">
            <summary>
            Occurs when the Magnifying Glass border is redrawn.
            </summary>
            <remarks>
            You can override this method in order to paint your own border for the Magnifying Glass.
            Call the base class implementation for the default behavior.
            </remarks>
            <param name="g">The Graphics object used to paint.</param>
            <param name="centerPoint">The center point of the Magnifying Glass rectangle</param>
            <example>
            Refer to the tutorial <a href="Tutorials\AdvancedMagnifyingGlass.html">Advanced Magnifying Glass</a>.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterMagnifyGlass.Viewer">
            <summary>
            Gets the <see cref="T:Leadtools.WinForms.RasterImageViewer"/> currently assigned for magnifying process by the control.
            </summary>
            <value>
            The <see cref="T:Leadtools.WinForms.RasterImageViewer"/> object, which has an image to be magnify using the <b>RasterMagnifyGlass</b> control.
            </value>
            <remarks>
            This property contains the <see cref="T:Leadtools.WinForms.RasterImageViewer"/> object which 
            contains an image to be magnified using the <b>RasterMagnifyGlass</b> control.
            </remarks>
            <example>
            Refer to the tutorial <a href="Tutorials\AdvancedMagnifyingGlass.html">Advanced Magnifying Glass</a>.
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterMagnifyGlass.ViewerChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Viewer"/> property changes. 
            </summary>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Viewer"/> property is changed 
            by either a programmatic modification or user interaction.
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterMagnifyGlass.Size">
            <summary>
            Gets and sets the size of the Magnifying Glass.
            </summary>
            <value>
            The width and height of the Magnifying Glass.
            </value>
            <example>
            Refer to <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Shape"/> example.
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterMagnifyGlass.SizeChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Size"/> property changes.
            </summary>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Size"/> property is changed 
            by either a programmatic modification or user interaction.
            </remarks>
            <example> 
            Refer to <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Shape"/> example.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterMagnifyGlass.ScaleFactor">
            <summary>
            Gets and sets the zoom factor used to display the magnified image.
            </summary>
            <value>
            The zoom factor used to display the magnified image.
            </value>
            <example>
            Refer to <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Shape"/> example.
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterMagnifyGlass.ScaleFactorChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.ScaleFactor"/> property changes.
            </summary>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.ScaleFactor"/> property is changed 
            by either a programmatic modification or user interaction.
            </remarks>
            <example> 
            Refer to <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Shape"/> example.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterMagnifyGlass.Shape">
            <summary>
            Gets and sets the Shape of the Magnifying Glass.
            </summary>
            <value>
            The shape of the Magnifying Glass.
            </value>
            <remarks>
            Using the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Border3DStyle"/>, the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.BorderWidth"/>, 
            the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.BorderColor"/>, and the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.RoundRectangleEllipseSize"/> properties depends on the value of this property.
            <li>if it set to <see cref="F:Leadtools.WinForms.RasterMagnifyGlassShape.None"/> : none of the above will be used.</li>
            <li>if it set to <see cref="F:Leadtools.WinForms.RasterMagnifyGlassShape.Border3D"/> : only the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Border3DStyle"/> property will be use.</li>
            <li>if it set to <see cref="F:Leadtools.WinForms.RasterMagnifyGlassShape.Rectangle"/> or set to <see cref="F:Leadtools.WinForms.RasterMagnifyGlassShape.Ellipse"/>: only the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.BorderWidth"/>, and the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.BorderColor"/> properties will be use.</li>
            <li>if it set to <see cref="F:Leadtools.WinForms.RasterMagnifyGlassShape.RoundRectangle"/> : the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.BorderWidth"/>, the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.BorderColor"/>, and the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.RoundRectangleEllipseSize"/> properties will be use.</li>
            </remarks>
            <example>
            <para><b>VB.NET</b></para>
            <code>
            Private Sub InitRasterMagnifyGlass()
               AddHandler _viewer.MagnifyGlass.SizeChanged, AddressOf _magnifyGlass_SizeChanged
               AddHandler _viewer.MagnifyGlass.BorderColorChanged, AddressOf _magnifyGlass_BorderColorChanged
               AddHandler _viewer.MagnifyGlass.BorderWidthChanged, AddressOf _magnifyGlass_BorderWidthChanged
               AddHandler _viewer.MagnifyGlass.CrosshairChanged, AddressOf _magnifyGlass_CrosshairChanged
               AddHandler _viewer.MagnifyGlass.CrosshairColorChanged, AddressOf _magnifyGlass_CrosshairColorChanged
               AddHandler _viewer.MagnifyGlass.CrosshairWidthChanged, AddressOf _magnifyGlass_CrosshairWidthChanged
               AddHandler _viewer.MagnifyGlass.RoundRectangleEllipseSizeChanged, AddressOf _magnifyGlass_RoundRectangleEllipseSizeChanged
               AddHandler _viewer.MagnifyGlass.ScaleFactorChanged, AddressOf _magnifyGlass_ScaleFactorChanged
               AddHandler _viewer.MagnifyGlass.ShapeChanged, AddressOf _magnifyGlass_ShapeChanged
            
               _viewer.MagnifyGlass.Size = New Size(180, 180)
               _viewer.MagnifyGlass.BorderColor = Color.Red
               _viewer.MagnifyGlass.BorderWidth = 2
               _viewer.MagnifyGlass.Crosshair = RasterMagnifyGlassCrosshair.Fine
               _viewer.MagnifyGlass.CrosshairColor = Color.Blue
               _viewer.MagnifyGlass.CrosshairWidth = 3
               _viewer.MagnifyGlass.RoundRectangleEllipseSize = New Size(20, 20)
               _viewer.MagnifyGlass.ScaleFactor = 2
               _viewer.MagnifyGlass.Shape = RasterMagnifyGlassShape.Ellipse
               _viewer.InteractiveMode = RasterViewerInteractiveMode.MagnifyGlass
            End Sub
            
            Private Sub _magnifyGlass_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
               MessageBox.Show("Size Changed to " + _viewer.MagnifyGlass.Size.ToString())
            End Sub
            
            Private Sub _magnifyGlass_BorderColorChanged(ByVal sender As Object, ByVal e As EventArgs)
               MessageBox.Show("BorderColor Changed to " + _viewer.MagnifyGlass.BorderColor.ToString())
            End Sub
            
            Private Sub _magnifyGlass_BorderWidthChanged(ByVal sender As Object, ByVal e As EventArgs)
               MessageBox.Show("BorderWidth Changed to " + _viewer.MagnifyGlass.BorderWidth.ToString())
            End Sub
            
            Private Sub _magnifyGlass_CrosshairChanged(ByVal sender As Object, ByVal e As EventArgs)
               MessageBox.Show("Crosshair Changed to " + _viewer.MagnifyGlass.Crosshair.ToString())
            End Sub
            
            Private Sub _magnifyGlass_CrosshairColorChanged(ByVal sender As Object, ByVal e As EventArgs)
               MessageBox.Show("CrosshairColor Changed to " + _viewer.MagnifyGlass.CrosshairColor.ToString())
            End Sub
            
            Private Sub _magnifyGlass_CrosshairWidthChanged(ByVal sender As Object, ByVal e As EventArgs)
               MessageBox.Show("CrosshairWidth Changed to " + _viewer.MagnifyGlass.CrosshairWidth.ToString())
            End Sub
            
            Private Sub _magnifyGlass_RoundRectangleEllipseSizeChanged(ByVal sender As Object, ByVal e As EventArgs)
               MessageBox.Show("RoundRectangleEllipseSize Changed to " + _viewer.MagnifyGlass.RoundRectangleEllipseSize.ToString())
            End Sub
            
            Private Sub _magnifyGlass_ScaleFactorChanged(ByVal sender As Object, ByVal e As EventArgs)
               MessageBox.Show("ScaleFactor Changed to " + _viewer.MagnifyGlass.ScaleFactor.ToString())
            End Sub
            
            Private Sub _magnifyGlass_ShapeChanged(ByVal sender As Object, ByVal e As EventArgs)
               MessageBox.Show("Shape Changed to " + _viewer.MagnifyGlass.Shape.ToString())
            End Sub
            </code>
            <para><b>C#</b></para>
            <code>
            private void InitRasterMagnifyGlass()
            {
               _viewer.MagnifyGlass.SizeChanged += new EventHandler(_magnifyGlass_SizeChanged);
               _viewer.MagnifyGlass.BorderColorChanged += new EventHandler(_magnifyGlass_BorderColorChanged);
               _viewer.MagnifyGlass.BorderWidthChanged += new EventHandler(_magnifyGlass_BorderWidthChanged);
               _viewer.MagnifyGlass.CrosshairChanged += new EventHandler(_magnifyGlass_CrosshairChanged);
               _viewer.MagnifyGlass.CrosshairColorChanged += new EventHandler(_magnifyGlass_CrosshairColorChanged);
               _viewer.MagnifyGlass.CrosshairWidthChanged += new EventHandler(_magnifyGlass_CrosshairWidthChanged);
               _viewer.MagnifyGlass.RoundRectangleEllipseSizeChanged += new EventHandler(_magnifyGlass_RoundRectangleEllipseSizeChanged);
               _viewer.MagnifyGlass.ScaleFactorChanged += new EventHandler(_magnifyGlass_ScaleFactorChanged);
               _viewer.MagnifyGlass.ShapeChanged += new EventHandler(_magnifyGlass_ShapeChanged);
               
               _viewer.MagnifyGlass.Size = new Size(180, 180);
               _viewer.MagnifyGlass.BorderColor = Color.Red;
               _viewer.MagnifyGlass.BorderWidth = 2;
               _viewer.MagnifyGlass.Crosshair = RasterMagnifyGlassCrosshair.Fine;
               _viewer.MagnifyGlass.CrosshairColor = Color.Blue;
               _viewer.MagnifyGlass.CrosshairWidth = 3;
               _viewer.MagnifyGlass.RoundRectangleEllipseSize = new Size(20, 20);
               _viewer.MagnifyGlass.ScaleFactor = 2;
               _viewer.MagnifyGlass.Shape = RasterMagnifyGlassShape.Ellipse;
               _viewer.InteractiveMode= RasterViewerInteractiveMode.MagnifyGlass;
            }
            
            private void _magnifyGlass_SizeChanged(object sender, EventArgs e)
            {
               MessageBox.Show("Size Changed to " + _viewer.MagnifyGlass.Size.ToString());
            }
            
            private void _magnifyGlass_BorderColorChanged(object sender, EventArgs e)
            {
               MessageBox.Show("BorderColor Changed to " + _viewer.MagnifyGlass.BorderColor.ToString());
            }
            
            private void _magnifyGlass_BorderWidthChanged(object sender, EventArgs e)
            {
               MessageBox.Show("BorderWidth Changed to " + _viewer.MagnifyGlass.BorderWidth.ToString());
            }
            
            private void _magnifyGlass_CrosshairChanged(object sender, EventArgs e)
            {
               MessageBox.Show("Crosshair Changed to " + _viewer.MagnifyGlass.Crosshair.ToString());
            }
            
            private void _magnifyGlass_CrosshairColorChanged(object sender, EventArgs e)
            {
               MessageBox.Show("CrosshairColor Changed to " + _viewer.MagnifyGlass.CrosshairColor.ToString());
            }
            
            private void _magnifyGlass_CrosshairWidthChanged(object sender, EventArgs e)
            {
               MessageBox.Show("CrosshairWidth Changed to " + _viewer.MagnifyGlass.CrosshairWidth.ToString());
            }
            
            private void _magnifyGlass_RoundRectangleEllipseSizeChanged(object sender, EventArgs e)
            {
               MessageBox.Show("RoundRectangleEllipseSize Changed to " + _viewer.MagnifyGlass.RoundRectangleEllipseSize.ToString());
            }
            
            private void _magnifyGlass_ScaleFactorChanged(object sender, EventArgs e)
            {
               MessageBox.Show("ScaleFactor Changed to " + _viewer.MagnifyGlass.ScaleFactor.ToString());
            }
            
            private void _magnifyGlass_ShapeChanged(object sender, EventArgs e)
            {
               MessageBox.Show("Shape Changed to " + _viewer.MagnifyGlass.Shape.ToString());
            }
            </code>
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterMagnifyGlass.ShapeChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Shape"/> property changes.
            </summary>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Shape"/> property is changed 
            by either a programmatic modification or user interaction.
            </remarks>
            <example> 
            Refer to <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Shape"/> example.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterMagnifyGlass.Border3DStyle">
            <summary>
            Gets and sets the <see cref="T:System.Windows.Forms.Border3DStyle"/> of the Magnifying Glass border.
            </summary>
            <value>
            The <see cref="T:System.Windows.Forms.Border3DStyle"/> of the Magnifying Glass border.
            </value>
            <remarks>
            This valus is used only if the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Shape"/> property is set <see cref="F:Leadtools.WinForms.RasterMagnifyGlassShape.Border3D"/>.
            </remarks>
            <example>
            <para><b>VB.NET</b></para>
            <code>
            Private Sub ChangeBorder(ByVal border3DStyle As Border3DStyle)
               If (Not _viewer.MagnifyGlass.Shape = RasterMagnifyGlassShape.Border3D) Then
                  _viewer.MagnifyGlass.Shape = RasterMagnifyGlassShape.Border3D
                  AddHandler _viewer.MagnifyGlass.Border3DStyleChanged, AddressOf _magnifyGlass_Border3DStyleChanged
                  _viewer.MagnifyGlass.Border3DStyle = border3DStyle
               End If
            End Sub
            
            Private Sub _magnifyGlass_Border3DStyleChanged(ByVal sender As Object, ByVal e As EventArgs)
               MessageBox.Show("Border3DStyle Changed to " + _viewer.MagnifyGlass.Border3DStyle.ToString())
            End Sub
            </code>
            <para><b>C#</b></para>
            <code>
            private void ChangeBorder(Border3DStyle border3DStyle)
            {
               if(_viewer.MagnifyGlass.Shape != RasterMagnifyGlassShape.Border3D)
               {
                  _viewer.MagnifyGlass.Shape = RasterMagnifyGlassShape.Border3D;
                  _viewer.MagnifyGlass.Border3DStyleChanged += new EventHandler(_magnifyGlass_Border3DStyleChanged);
                  _viewer.MagnifyGlass.Border3DStyle = border3DStyle;
               }
            }
            
            private void _magnifyGlass_Border3DStyleChanged(object sender, EventArgs e)
            {
               MessageBox.Show("Border3DStyle Changed to " + _viewer.MagnifyGlass.Border3DStyle.ToString());
            }
            </code>
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterMagnifyGlass.Border3DStyleChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Border3DStyle"/> property changes.
            </summary>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Border3DStyle"/> property is changed 
            by either a programmatic modification or user interaction.
            </remarks>
            <example> 
            Refer to <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Border3DStyle"/> example.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterMagnifyGlass.BorderColor">
            <summary>
            Gets and sets the Color of the Magnifying Glass border.
            </summary>
            <value>
            The color of the Magnifying Glass border.
            </value>
            <remarks>
            This valus is used only if the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Shape"/> property is set to <see cref="F:Leadtools.WinForms.RasterMagnifyGlassShape.Rectangle"/>, to <see cref="F:Leadtools.WinForms.RasterMagnifyGlassShape.RoundRectangle"/>, or to <see cref="F:Leadtools.WinForms.RasterMagnifyGlassShape.Ellipse"/>.
            </remarks>
            <example>
            Refer to <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Shape"/> example.
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterMagnifyGlass.BorderColorChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.BorderColor"/> property changes.
            </summary>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.BorderColor"/> property is changed 
            by either a programmatic modification or user interaction.
            </remarks>
            <example> 
            Refer to <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Shape"/> example.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterMagnifyGlass.BorderWidth">
            <summary>
            Gets and sets the size of the Magnifying Glass border in pixels.
            </summary>
            <value>
            The width of the Magnifying Glass border in pixels.
            </value>
            <remarks>
            This valus is used only if the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Shape"/> property is set to <see cref="F:Leadtools.WinForms.RasterMagnifyGlassShape.Rectangle"/>, to <see cref="F:Leadtools.WinForms.RasterMagnifyGlassShape.RoundRectangle"/>, or to <see cref="F:Leadtools.WinForms.RasterMagnifyGlassShape.Ellipse"/>.
            </remarks>
            <example>
            Refer to <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Shape"/> example.
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterMagnifyGlass.BorderWidthChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.BorderWidth"/> property changes.
            </summary>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.BorderWidth"/> property is changed 
            by either a programmatic modification or user interaction.
            </remarks>
            <example> 
            Refer to <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Shape"/> example.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterMagnifyGlass.Crosshair">
            <summary>
            Gets and sets the type of the crosshair.
            </summary>
            <value>
            The Crosshair type.
            </value>
            <remarks>
            Using the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.CrosshairWidth"/> and 
            <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.CrosshairColor"/> properties depends on the value of this property.
            <li>if it set to <see cref="F:Leadtools.WinForms.RasterMagnifyGlassCrosshair.Fine"/> both of them will be used.</li>
            <li>if it set to <see cref="F:Leadtools.WinForms.RasterMagnifyGlassCrosshair.None"/> none of them will be used.</li>
            </remarks>
            <example>
            Refer to <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Shape"/> example.
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterMagnifyGlass.CrosshairChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Crosshair"/> property changes.
            </summary>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Crosshair"/> property is changed 
            by either a programmatic modification or user interaction.
            </remarks>
            <example> 
            Refer to <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Shape"/> example.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterMagnifyGlass.CrosshairColor">
            <summary>
            Gets and sets the color of the crosshair.
            </summary>
            <value>
            The Crosshair color.
            </value>
            <remarks>
            This property value is used only if <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Crosshair"/> property was set to <see cref="F:Leadtools.WinForms.RasterMagnifyGlassCrosshair.Fine"/>.
            </remarks>
            <example>
            Refer to <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Shape"/> example.
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterMagnifyGlass.CrosshairColorChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.CrosshairColor"/> property changes.
            </summary>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.CrosshairColor"/> property is changed 
            by either a programmatic modification or user interaction.
            </remarks>
            <example> 
            Refer to <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Shape"/> example.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterMagnifyGlass.CrosshairWidth">
            <summary>
            Gets and sets the width of the crosshair.
            </summary>
            <value>
            The Crosshair width.
            </value>
            <remarks>
            This property value is used only if <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Crosshair"/> property was set to <see cref="F:Leadtools.WinForms.RasterMagnifyGlassCrosshair.Fine"/>.
            </remarks>
            <example>
            Refer to <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Shape"/> example.
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterMagnifyGlass.CrosshairWidthChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.CrosshairWidth"/> property changes.
            </summary>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.CrosshairWidth"/> property is changed 
            by either a programmatic modification or user interaction.
            </remarks>
            <example> 
            Refer to <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Shape"/> example.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterMagnifyGlass.RoundRectangleEllipseSize">
            <summary>
            Gets and sets the width and height of the ellipse that describes the arc of the rounded corners.
            </summary>
            <value>
            The width and the height of the ellipse that describes the arc of the rounded corners of the Magnifying Glass shape.
            </value>
            <remarks>
            This property value is used only if <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Shape"/> property was set to <see cref="F:Leadtools.WinForms.RasterMagnifyGlassShape.RoundRectangle"/>.
            </remarks>
            <example>
            Refer to <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Shape"/> example.
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterMagnifyGlass.RoundRectangleEllipseSizeChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.RoundRectangleEllipseSize"/> property changes.
            </summary>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.RoundRectangleEllipseSize"/> property is changed 
            by either a programmatic modification or user interaction.
            </remarks>
            <example> 
            Refer to <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Shape"/> example.
            </example>
        </member>
        <member name="T:Leadtools.WinForms.RasterImagePanViewerStatus">
            <summary>
            Represents the current panning process status.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterImagePanViewerStatus.Begin">
            <summary>
            The user started the panning process.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterImagePanViewerStatus.Panning">
            <summary>
            The user is panning now. 
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterImagePanViewerStatus.End">
            <summary>
            The user ended the panning process. 
            </summary>
        </member>
        <member name="T:Leadtools.WinForms.RasterImagePanViewerEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Leadtools.WinForms.RasterImagePanViewer.Pan"/> event.
            </summary>
            <param name="sender">The source of the sender</param>
            <param name="e">A <see cref="T:Leadtools.WinForms.RasterImagePanViewerEventArgs"/> object that contains the event data.</param>
            <remarks>
            <li>When you create a <b>RasterImagePanViewerPanEventHandler</b> delegate, you identify the method that will 
                handle the event. To associate the event with your event handler, add an instance of the delegate 
                to the event. The event handler is called whenever the event occurs, unless you remove the delegate. 
                Delegates are similar to the method pointers of C++ and have two main uses: performing callbacks, 
                and defining events. Delegates are defined at run time. Callback methods allow asynchronous 
                processing: the method being called starts a thread and returns, during which time the thread does 
                most of the work and calls the callback only when needed. Events use a publish and subscribe type 
                pattern. A class 'publishes' an event and any number of classes can 'subscribe' to that event. The 
                runtime notifies subscribers when an event occurs. Delegates that are used in defining events must be 
                defined as taking two arguments: a publisher object, and an event information object (derived from 
                the .NET <see cref="T:System.EventArgs"/> class).</li>
            <li>The delegate method is called whenever the Pan process status has changed.  You can cancel the Pan process 
                by setting the <see cref="P:Leadtools.WinForms.RasterImagePanViewerEventArgs.Cancel"/> property to false.</li>
            </remarks>
        </member>
        <member name="T:Leadtools.WinForms.RasterImagePanViewer">
            <summary>
            Represents a Leadtools <b>RasterImagePanViewer</b> control for displaying a scaled view of an image.
            </summary>
            <remarks>
            The <b>RasterImagePanViewer</b> is used to display a scaled view of an image, which is also being 
            displayed in the <see cref="T:Leadtools.WinForms.RasterImageViewer"/> control at a size that would require scrolling. 
            The <b>RasterImagePanViewer</b> will maintain the image’s aspect ratio. 
            In the <b>RasterImagePanViewer</b>, a colored Pan rect will be displayed to 
            indicate the portion of the image currently being displayed in the 
            <see cref="T:Leadtools.WinForms.RasterImageViewer"/> associated with this PanViewer control. 
            When a user clicks inside the <b>RasterImagePanViewer</b> and moves the 
            mouse, while holding down the button, the Pan rect will move with the 
            mouse pointer. Set the <see cref="P:Leadtools.WinForms.RasterImagePanViewer.Viewer"/> property 
            to a <see cref="T:Leadtools.WinForms.RasterImageViewer"/> object to be panned.
            </remarks>
        </member>
        <member name="F:Leadtools.WinForms.RasterImagePanViewer.components">
            Required designer variable.
        </member>
        <member name="M:Leadtools.WinForms.RasterImagePanViewer.#ctor">
            <summary> 
            Initializes a new instance of the <see cref="T:Leadtools.WinForms.RasterImagePanViewer"/> class.
            </summary>
            <example>
            Refer to <see cref="P:Leadtools.WinForms.RasterImagePanViewer.Viewer"/> example.
            </example>
        </member>
        <member name="M:Leadtools.WinForms.RasterImagePanViewer.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Leadtools.WinForms.RasterImagePanViewer.InitializeComponent">
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
        </member>
        <member name="M:Leadtools.WinForms.RasterImagePanViewer.OnBorderStyleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImagePanViewer.BorderStyleChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate. The <b>OnBorderStyleChanged</b> method also allows 
            derived classes to handle the event without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. Notes to Inheritors: When overriding <b>OnBorderStyleChanged</b> in a 
            derived class, be sure to call the base class's <b>OnBorderStyleChanged</b> method so that registered delegates 
            receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImagePanViewer.OnViewerChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImagePanViewer.ViewerChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate. The <b>OnViewerChanged</b> method also allows 
            derived classes to handle the event without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. Notes to Inheritors: When overriding <b>OnViewerChanged</b> in a 
            derived class, be sure to call the base class's <b>OnViewerChanged</b> method so that registered delegates 
            receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImagePanViewer.OnRectangleColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImagePanViewer.RectangleColorChanged"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate. The <b>OnRectangleColorChanged</b> method 
            also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class. Notes to Inheritors: When overriding 
            <b>OnRectangleColorChanged</b> in a derived class, be sure to call the base class's <b>OnRectangleColorChanged</b>
            method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImagePanViewer.OnImageColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImagePanViewer.ImageColorChanged"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate. The <b>OnImageColorChanged</b> method 
            also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class. Notes to Inheritors: When overriding 
            <b>OnImageColorChanged</b> in a derived class, be sure to call the base class's <b>OnImageColorChanged</b>
            method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImagePanViewer.OnClipCursorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImagePanViewer.ClipCursorChanged"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate. The <b>OnClipCursorChanged</b> method 
            also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class. Notes to Inheritors: When overriding 
            <b>OnClipCursorChanged</b> in a derived class, be sure to call the base class's <b>OnClipCursorChanged</b>
            method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImagePanViewer.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Leadtools.WinForms.RasterImagePanViewer.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Leadtools.WinForms.RasterImagePanViewer.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs when the user presses a mouse button. 
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Leadtools.WinForms.RasterImagePanViewer.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs when the user moves the mouse over the control.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Leadtools.WinForms.RasterImagePanViewer.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs when the user releases a mouse button.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Leadtools.WinForms.RasterImagePanViewer.OnLostFocus(System.EventArgs)">
            <summary>
            Occurs when the control loses focus.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Leadtools.WinForms.RasterImagePanViewer.OnSizeChanged(System.EventArgs)">
            <summary>
            Occurs when the control is resized.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:Leadtools.WinForms.RasterImagePanViewer.BorderStyle">
            <summary>
            Sets the border style of the control.
            </summary>
            <value>
            The border style of the control.
            </value>
            <example>
            <para><b>VB.NET</b></para>
            <code>
            Private _panViewer As RasterImagePanViewer
            
            Private Sub ChangeEvents_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ChangeEvents.Click
               AddHandler _panViewer.BorderStyleChanged, AddressOf _panViewer_BorderStyleChanged
               AddHandler _panViewer.RectangleColorChanged, AddressOf _panViewer_RectColorChanged
               AddHandler _panViewer.ImageColorChanged, AddressOf _panViewer_ImageColorChanged
               AddHandler _panViewer.ClipCursorChanged, AddressOf _panViewer_ClipCursorChanged
               If (Not(_panViewer.BorderStyle = BorderStyle.None)) Then
                  _panViewer.BorderStyle = BorderStyle.None
               End If
               _panViewer.RectangleColor = Color.Black
               _panViewer.ImageColor = Color.Red
               _panViewer.ClipCursor = False
               
               _panViewer.Refresh()
            End Sub
            
            Private Sub _panViewer_BorderStyleChanged(ByVal sender As Object, ByVal e As EventArgs)
               MessageBox.Show("BorderStyle Changed to " + _panViewer.BorderStyle.ToString())
            End Sub
            
            Private Sub _panViewer_RectColorChanged(ByVal sender As Object, ByVal e As EventArgs)
               MessageBox.Show("Rectangle Color Changed to " + _panViewer.RectangleColor.ToString())
            End Sub
            
            Private Sub _panViewer_ImageColorChanged(ByVal sender As Object, ByVal e As EventArgs)
               MessageBox.Show("Image Color Changed to " + _panViewer.ImageColor.ToString())
            End Sub
            
            Private Sub _panViewer_ClipCursorChanged(ByVal sender As Object, ByVal e As EventArgs)
               MessageBox.Show("Clip Cursor changed to " + _panViewer.ClipCursor.ToString())
            End Sub
            </code>
            <para><b>C#</b></para>
            <code>
            private RasterImagePanViewer _panViewer;
            
            private void ChangeEvents_Click(object sender, System.EventArgs e)
            {
               _panViewer.BorderStyleChanged += new EventHandler(_panViewer_BorderStyleChanged);
               _panViewer.RectangleColorChanged += new EventHandler(_panViewer_RectColorChanged);
               _panViewer.ImageColorChanged += new EventHandler(_panViewer_ImageColorChanged);
               _panViewer.ClipCursorChanged += new EventHandler(_panViewer_ClipCursorChanged);
               if(_panViewer.BorderStyle != BorderStyle.None)
               {
                  _panViewer.BorderStyle = BorderStyle.None;
               }
               _panViewer.RectangleColor = Color.Black;
               _panViewer.ImageColor = Color.Red;
               _panViewer.ClipCursor = false;
               _panViewer.Refresh();
            }
               
            private void _panViewer_BorderStyleChanged(object sender, EventArgs e)
            {
               MessageBox.Show("BorderStyle Changed to " + _panViewer.BorderStyle.ToString());
            }
            
            private void _panViewer_RectColorChanged(object sender, EventArgs e)
            {
               MessageBox.Show("Rectangle Color Changed to " + _panViewer.RectangleColor.ToString());
            }
            
            private void _panViewer_ImageColorChanged(object sender, EventArgs e)
            {
               MessageBox.Show("Image Color Changed to " + _panViewer.ImageColor.ToString());
            }
            
            private void _panViewer_ClipCursorChanged(object sender, EventArgs e)
            {
               MessageBox.Show("Clip Cursor changed to " + _panViewer.ClipCursor.ToString());
            }
            </code>
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImagePanViewer.BorderStyleChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImagePanViewer.BorderStyle"/> property changes.
            </summary>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImagePanViewer.BorderStyle"/> property is changed 
            by either a programmatic modification or user interaction.
            </remarks>
            <example> 
            Refer to <see cref="P:Leadtools.WinForms.RasterImagePanViewer.BorderStyle"/> example.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImagePanViewer.CreateParams">
            <summary>
            Overrides <see cref="P:System.Windows.Forms.Control.CreateParams"/>.
            </summary>
        </member>
        <member name="P:Leadtools.WinForms.RasterImagePanViewer.Viewer">
            <summary>
            Gets and sets the viewer currently assigned for panning process by the control.
            </summary>
            <value>
            The viewer object, which has an image to be pan using the <see cref="T:Leadtools.WinForms.RasterImagePanViewer"/> control.
            </value>
            <remarks>
            This property contains the <see cref="T:Leadtools.WinForms.RasterImageViewer"/> object which 
            contains an image to be pan using the <see cref="T:Leadtools.WinForms.RasterImagePanViewer"/> control. Whenever the <b>Viewer</b> property 
            is changed, the image displayed in the <see cref="T:Leadtools.WinForms.RasterImagePanViewer"/> control is affect by this change.
            </remarks>
            <example>
            <para><b>VB.NET</b></para>
            <code>
            Private _viewer As RasterImageViewer
            Private _panViewer As RasterImagePanViewer
            
            Private Sub InitRasterImagePanViewer()
               _panViewer = New RasterImagePanViewer
               _panViewer.Width = 200
               _panViewer.Dock = DockStyle.Bottom
               _panViewer.BackColor = Color.Bisque
               _panViewer.BorderStyle = BorderStyle.Fixed3D
               Controls.Add(_panViewer)
               _panViewer.BringToFront()
               AddHandler _panViewer.Pan, AddressOf _panViewer_Pan
               _panViewer.RectangleColor = Color.Blue
               _panViewer.ImageColor = Color.FromArgb(128, 0, 0, 0)
               _panViewer.Cursor = Cursors.Hand
               
               _panViewer.Viewer = _viewer
            End Sub
            
            Private Sub _panViewer_Pan(ByVal sender As Object, ByVal e As RasterImagePanViewerPanEventArgs)
               Select Case (e.Status)
                  Case RasterImagePanViewerPanStatus.Begin, _
                       RasterImagePanViewerPanStatus.Panning, _
                       RasterImagePanViewerPanStatus.End
                     Me.Text = "Pan Status = " + e.Status.ToString() + " Rectangle =" + e.Rectangle.ToString() + " Cancel = " + e.Cancel.ToString()
               End Select
            End Sub
            </code>
            <para><b>C#</b></para>
            <code>
            private RasterImageViewer _viewer;
            private RasterImagePanViewer _panViewer;
            
            private void InitRasterImagePanViewer()
            {
              _panViewer = new RasterImagePanViewer();
              _panViewer.Width = 200;
              _panViewer.Dock = DockStyle.Bottom;
              _panViewer.BackColor = Color.Bisque;
              _panViewer.BorderStyle = BorderStyle.Fixed3D;
              Controls.Add(_panViewer);
              _panViewer.BringToFront();
              _panViewer.Pan += new RasterImagePanViewerPanEventHandler(_panViewer_Pan);
              _panViewer.RectangleColor = Color.Blue;
              _panViewer.ImageColor = Color.FromArgb(128, 0, 0, 0);
              _panViewer.Cursor = Cursors.Hand;
              _panViewer.Viewer = _viewer;
            }
            
            private void _panViewer_Pan(object sender, RasterImagePanViewerPanEventArgs e)
            {
               switch(e.Status)
               {
                  case RasterImagePanViewerPanStatus.Begin:
                  case RasterImagePanViewerPanStatus.Panning:
                  case RasterImagePanViewerPanStatus.End:
                  {
                     this.Text = "Pan Status = " + e.Status.ToString() + " Rectangle =" + e.Rectangle.ToString() + " Cancel = " + e.Cancel.ToString();
                     break;
                  }
               }
            }
            </code>
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImagePanViewer.ViewerChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImagePanViewer.Viewer"/> property changes. 
            </summary>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImagePanViewer.Viewer"/> property is changed 
            by either a programmatic modification or user interaction.
            </remarks>
            <example>
            <para><b>VB.NET</b></para>
            <code>
            Private _panViewer As RasterImagePanViewer
            
            Private Sub ViewerChanged_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ViewerChanged.Click
               AddHandler _panViewer.ViewerChanged, AddressOf _panViewer_ViewerChanged
               _panViewer.Viewer = Nothing
               _panViewer.Refresh()
            End Sub
            
            Private Sub _panViewer_ViewerChanged(ByVal sender As Object, ByVal e As EventArgs)
               If (_panViewer.Viewer Is Nothing) Then
                  MessageBox.Show("There is no Viewer control associated with RasterImagePanViewer Control")
               End If
            End Sub
            </code>
            <para><b>C#</b></para>
            <code>
            private RasterImagePanViewer _panViewer;
            
            private void ViewerChanged_Click(object sender, System.EventArgs e)
            {
               _panViewer.ViewerChanged += new EventHandler(_panViewer_ViewerChanged);
               _panViewer.Viewer = null;
               _panViewer.Refresh();
            }
            
            private void _panViewer_ViewerChanged(object sender, EventArgs e)
            {
               if(_panViewer.Viewer == null)
                  MessageBox.Show("There is no Viewer control associated with RasterImagePanViewer Control");
            }
            </code>
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImagePanViewer.RectangleColor">
            <summary>
            Gets or sets the color used to draw the Pan Rectangle.
            </summary>
            <value>
            The Pan Rectangle color. The default is red.
            </value>
            <example>
            Refer to <see cref="P:Leadtools.WinForms.RasterImagePanViewer.Viewer"/> example.
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImagePanViewer.RectangleColorChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImagePanViewer.RectangleColor"/> property changes.
            </summary>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImagePanViewer.RectangleColor"/> property is changed by 
            either a programmatic modification or user interaction.
            </remarks>
            <example> 
            Refer to <see cref="P:Leadtools.WinForms.RasterImagePanViewer.BorderStyle"/> example.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImagePanViewer.ImageColor">
            <summary>
            The <see cref="T:System.Drawing.Color"/> that covers the un-panned area.
            </summary>
            <value>
            The surrounding Pan Rectangle color.
            </value>
            <remarks>
            This property contains the color of the area that surrounds the Pan Rectangle.<br/>
            The default is <b>Transparent</b> color.
            </remarks>
            <example> 
            Refer to <see cref="P:Leadtools.WinForms.RasterImagePanViewer.Viewer"/> example.
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImagePanViewer.ImageColorChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImagePanViewer.ImageColor"/> property changes.
            </summary>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImagePanViewer.ImageColor"/> property is changed by either 
            a programmatic modification or user interaction.
            </remarks> 
            <example> 
            Refer to <see cref="P:Leadtools.WinForms.RasterImagePanViewer.BorderStyle"/> example.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImagePanViewer.ClipCursor">
            <summary>
            Enables and disables clipping the cursor.
            </summary>
            <value>
            true to clip the cursor to the bounding Rectangle of the <see cref="T:Leadtools.WinForms.RasterImagePanViewer"/> control.
            false to allow the cursor to move outside the bounding rectangle of the <see cref="T:Leadtools.WinForms.RasterImagePanViewer"/> control.
            The default is true.
            </value>
            <example> 
            Refer to <see cref="P:Leadtools.WinForms.RasterImagePanViewer.BorderStyle"/> example.
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImagePanViewer.ClipCursorChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImagePanViewer.ClipCursor"/> property changes.
            </summary>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImagePanViewer.ClipCursor"/> property is changed by either 
            a programmatic modification or user interaction.
            </remarks> 
            <example> 
            Refer to <see cref="P:Leadtools.WinForms.RasterImagePanViewer.BorderStyle"/> example.
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImagePanViewer.Pan">
            <summary>
            Occurs when the user performs a panning process for the <see cref="T:Leadtools.WinForms.RasterImagePanViewer"/> displayed image.
            </summary>
            <remarks>
            This property gives the current status of pan operation, whether it was Began, in panning, or Ended.
            </remarks>
            <example> 
            Refer to <see cref="P:Leadtools.WinForms.RasterImagePanViewer.Viewer"/> example.
            </example>
        </member>
        <member name="T:Leadtools.WinForms.RasterImagePanViewerEventArgs">
            <summary>
            The <b>RasterImagePanViewerEventArgs</b> class provides information about the <see cref="E:Leadtools.WinForms.RasterImagePanViewer.Pan"/> event. 
            </summary>
            <example>
            Refer to <see cref="P:Leadtools.WinForms.RasterImagePanViewer.Viewer"/> example.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImagePanViewerEventArgs.Status">
            <summary>
            The Pan process current status.
            </summary>
            <value>
            <see cref="T:Leadtools.WinForms.RasterImagePanViewerStatus"/> value which contains the status of the current Pan Process.
            </value>
            <example>
            Refer to <see cref="P:Leadtools.WinForms.RasterImagePanViewer.Viewer"/> example.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImagePanViewerEventArgs.Rectangle">
            <summary>
            The Pan Rectangle.
            </summary>
            <value>
            The Pan Rectangle currently being drawn.
            </value>
            <example>
            Refer to <see cref="P:Leadtools.WinForms.RasterImagePanViewer.Viewer"/> example.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImagePanViewerEventArgs.Cancel">
            <summary>
            Specifies whether or not to cancel the current panning process.
            </summary>
            <value> true to cancel the panning process, false to continue normally.</value>
            <example>
            Refer to <see cref="P:Leadtools.WinForms.RasterImagePanViewer.Viewer"/> example.
            </example>
        </member>
        <member name="T:Leadtools.WinForms.RasterImagePrinter">
            <summary>
            Supports printing of an <see cref="T:Leadtools.IRasterImage"/>
            </summary>
            <remarks>
            <p>The <b>RasterImagePrinter</b> provides properties and method to make the process of printing an <see cref="T:Leadtools.IRasterImage"/> easier.</p>
            <p>Printing using the .NET framework involves adding a handler to the <see cref="E:System.Drawing.Printing.PrintDocument.PrintPage"/> event.  In that event handler, you setup a new instance of the <b>RasterImagePrinter</b> class, setup its properties as desired then call the <see cref="M:Leadtools.WinForms.RasterImagePrinter.Print(Leadtools.IRasterImage,System.Int32,System.Drawing.Printing.PrintPageEventArgs)"/> method passing it the <see cref="T:Leadtools.IRasterImage"/> to print, the page number to print and the <see cref="T:System.Drawing.Printing.PrintPageEventArgs"/> object obtained through your <see cref="T:System.Drawing.Printing.PrintPageEventHandler"/>.</p>
            </remarks>
            <example>
            This example will loads an image then prints it with using the image DPI.
            <p><b>VB.NET</b></p>
            <code>
            Private myImage As IRasterImage
            
            Private Sub RasterImagePrinterTest()
               ' load an image
               RasterCodecs.CodecsPath = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin"
               Dim codecs As New RasterCodecs
               myImage = codecs.Load("C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\Ocr1.tif")
            
               ' intitialize a new PrintDocument object
               Dim pd As New PrintDocument
               AddHandler pd.PrintPage, AddressOf PrintDocument_PrintPage
            
               ' print this image through a print preview dialog
               Dim dlg As New PrintPreviewDialog
               dlg.Document = pd
               dlg.ShowDialog(Me)
            End Sub
            
            Private Sub PrintDocument_PrintPage(ByVal sender As Object, ByVal e As PrintPageEventArgs)
               ' initialize a new RasterImagePrinter object
               Dim printer As New RasterImagePrinter
            
               ' We want normal size (not zoomed) but centered
               printer.SizeMode = RasterViewerSizeMode.Normal
               printer.CenterMode = RasterViewerCenterMode.Both
            
               ' print the whole image
               printer.ImageRectangle = Rectangle.Empty
            
               ' use maximum page
               printer.PageRectangle = RectangleF.Empty
            
               ' use the image DPI, Win32 GDI printing and scale to gray
               Dim props As RasterPaintProperties = RasterPaintProperties.Default
               props.UseDpi = True
               props.PaintEngine = RasterPaintEngine.Gdi
               props.PaintDisplayMode = props.PaintDisplayMode Or RasterPaintDisplayModeFlags.ScaleToGray
               printer.PaintProperties = props
            
               ' print the image
               printer.Print(myImage, myImage.Page, e)
            
               ' dispose the image
               myImage.Dispose()
            End Sub
            </code>
            <p><b>C#</b></p>
            <code>
            private IRasterImage myImage;
            
            private void RasterImagePrinterTest()
            {
               // load an image
               RasterCodecs.CodecsPath = @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin";
               RasterCodecs codecs = new RasterCodecs();
               myImage = codecs.Load(@"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\Ocr1.tif");
            
               // intitialize a new PrintDocument object
               PrintDocument pd = new PrintDocument();
               pd.PrintPage += new PrintPageEventHandler(PrintDocument_PrintPage);
            
               // print this image through a print preview dialog
               PrintPreviewDialog dlg = new PrintPreviewDialog();
               dlg.Document = pd;
               dlg.ShowDialog(this);
            
               // dispose the image
               myImage.Dispose();
            }
            
            private void PrintDocument_PrintPage(object sender, PrintPageEventArgs e)
            {
               // initialize a new RasterImagePrinter object
               RasterImagePrinter printer = new RasterImagePrinter();
            
               // We want normal size (not zoomed) but centered
               printer.SizeMode = RasterViewerSizeMode.Normal;
               printer.CenterMode = RasterViewerCenterMode.Both;
            
               // print the whole image
               printer.ImageRectangle = Rectangle.Empty;
            
               // use maximum page
               printer.PageRectangle = RectangleF.Empty;
            
               // use the image DPI, Win32 GDI printing and scale to gray
               RasterPaintProperties props = RasterPaintProperties.Default;
               props.UseDpi = true;
               props.PaintEngine = RasterPaintEngine.Gdi;
               props.PaintDisplayMode |= RasterPaintDisplayModeFlags.ScaleToGray;
               printer.PaintProperties = props;
            
               // print the image
               printer.Print(myImage, myImage.Page, e);
            }
            </code>
            </example>
        </member>
        <member name="M:Leadtools.WinForms.RasterImagePrinter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Leadtools.WinForms.RasterImagePrinter"/> class.
            </summary>
            <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter"/> example.
            </example>
        </member>
        <member name="M:Leadtools.WinForms.RasterImagePrinter.OnSizeModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImagePrinter.SizeModeChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnSizeModeChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnSizeModeChanged</b> in a derived class, be sure to call the base class's <b>OnSizeModeChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImagePrinter.OnCenterModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImagePrinter.CenterModeChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnCenterModeChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnCenterModeChanged</b> in a derived class, be sure to call the base class's <b>OnCenterModeChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImagePrinter.OnImageRectangleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImagePrinter.ImageRectangleChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnImageRectangleChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnImageRectangleChanged</b> in a derived class, be sure to call the base class's <b>OnImageRectangleChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImagePrinter.OnPageRectangleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImagePrinter.PageRectangleChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnPageRectangleChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnPageRectangleChanged</b> in a derived class, be sure to call the base class's <b>OnPageRectangleChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImagePrinter.OnPaintPropertiesChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImagePrinter.PaintPropertiesChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnPaintPropertiesChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnPaintPropertiesChanged</b> in a derived class, be sure to call the base class's <b>OnPaintPropertiesChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImagePrinter.Print(Leadtools.IRasterImage,System.Int32,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Prints the specified <see cref="T:Leadtools.IRasterImage"/>.
            </summary>
            <param name="image">The <see cref="T:Leadtools.IRasterImage"/> to print.</param>
            <param name="page">The page number to print.</param>
            <param name="e">An <see cref="T:System.Drawing.Printing.PrintPageEventArgs"/> object that contains print data.</param>
            <remarks>
            <p><i>page</i> is 1-based.</p>
            <p>You usually call this method from your <see cref="E:System.Drawing.Printing.PrintDocument.PrintPage"/> event handler of a <see cref="T:System.Drawing.Printing.PrintDocument"/> object.  You must pass the <see cref="T:System.Drawing.Printing.PrintPageEventArgs"/> obtained in the <see cref="E:System.Drawing.Printing.PrintDocument.PrintPage"/> event handler to this method as the <i>e</i> parameter.</p>
            </remarks>
            <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter"/> class.
            </example>
        </member>
        <member name="M:Leadtools.WinForms.RasterImagePrinter.Prepare(System.Int32,System.Int32,System.Single,System.Single,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Prepares this <see cref="T:Leadtools.WinForms.RasterImagePrinter"/> object state for printing.
            </summary>
            <param name="width">Width of the image to print.</param>
            <param name="height">Height of the image to print.</param>
            <param name="dpiX">Horizontal DPI value of the image to print.</param>
            <param name="dpiY">Vertical DPI value of the image to print.</param>
            <param name="e">An <see cref="T:System.Drawing.Printing.PrintPageEventArgs"/> object that contains print data.</param>
            <remarks>
            Derive classes should call this method from <see cref="M:Leadtools.WinForms.RasterImagePrinter.Print(Leadtools.IRasterImage,System.Int32,System.Drawing.Printing.PrintPageEventArgs)"/> to prepare the <see cref="P:Leadtools.WinForms.RasterImagePrinter.SourceRectangle"/>, <see cref="P:Leadtools.WinForms.RasterImagePrinter.DestinationRectangle"/> and <see cref="P:Leadtools.WinForms.RasterImagePrinter.DestinationClipRectangle"/> properties.
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterImagePrinter.SizeMode">
            <summary>
            Gets or sets the size mode of this <see cref="T:Leadtools.WinForms.RasterImagePrinter"/>
            </summary>
            <value>An <see cref="T:Leadtools.WinForms.RasterViewerSizeMode"/> enumeration value that determine how the class prints the image and the automatic adjustments of the display rectangles.</value>
            <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter"/> example.
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImagePrinter.SizeModeChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImagePrinter.SizeMode"/> property changes.
            </summary>
            <event>The event handler receives an argument of type <see cref="T:System.EventArgs"/>.</event>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImagePrinter.SizeMode"/> property is changed.
            </remarks>
            <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter"/> example.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImagePrinter.CenterMode">
            <summary>
            Gets or sets a value to determine how to center the image in the print page.
            </summary>
            <value>An <see cref="T:Leadtools.WinForms.RasterViewerCenterMode"/> enumeration value that determine how to center the image in the print page.</value>
            <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter"/> example.
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImagePrinter.CenterModeChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImagePrinter.CenterMode"/> property changes.
            </summary>
            <event>The event handler receives an argument of type <see cref="T:System.EventArgs"/>.</event>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImagePrinter.CenterMode"/> property is changed.
            </remarks>
            <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter"/> example.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle">
            <summary>
            Gets or sets the rectangle that specifies the portion of the image to print.
            </summary>
            <value>A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the image to print.</value>
            <remarks>
            <p>This rectangle must be in image coordinates.  To convert between image and device coordinates refer to <see cref="M:Leadtools.IRasterImage.RectangleFromImage(Leadtools.RasterViewPerspective,System.Drawing.Rectangle)"/> and <see cref="M:Leadtools.IRasterImage.RectangleToImage(Leadtools.RasterViewPerspective,System.Drawing.Rectangle)"/></p>
            <p>You can also pass <b>Rectangle.Empty</b> to use the whole image.</p>
            </remarks>
            <example>
            This example will loads an image then prints the top-left corner of the image to the bottom-right corner of the page.
            <p><b>VB.NET</b></p>
            <code>
            Private imageToPrint As IRasterImage
            
            Private Sub RasterImagePrinterRectanglesTest()
               ' load an image
               RasterCodecs.CodecsPath = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin"
               Dim codecs As New RasterCodecs
               imageToPrint = codecs.Load("C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\Sample1.cmp")
            
               ' intitialize a new PrintDocument object
               Dim pd As New PrintDocument
               AddHandler pd.PrintPage, AddressOf pd_PrintPage
            
               ' print this image through a print preview dialog
               Dim dlg As New PrintPreviewDialog
               dlg.Document = pd
               dlg.ShowDialog(Me)
            
               ' dispose the image
               imageToPrint.Dispose()
            End Sub
            
            Private Sub pd_PrintPage(ByVal sender As Object, ByVal e As PrintPageEventArgs)
               ' initialize a new RasterImagePrinter object
               Dim printer As New RasterImagePrinter
            
               ' Use stretch so we fill out the page rectangle
               printer.SizeMode = RasterViewerSizeMode.Stretch
               printer.CenterMode = RasterViewerCenterMode.None
            
               ' print the top-left quarter corner portion of the image
               Dim rc As New Rectangle(0, 0, CType(imageToPrint.Width / 2, Integer), CType(imageToPrint.Height / 2, Integer))
               rc = imageToPrint.RectangleToImage(RasterViewPerspective.TopLeft, rc)
               printer.ImageRectangle = rc
            
               ' print to the bottom-right corner of the image
               Dim pageWidth As Single = e.MarginBounds.Width / 2.0F
               Dim pageHeight As Single = e.MarginBounds.Height / 2.0F
               printer.PageRectangle = New RectangleF(pageWidth, pageHeight, pageWidth, pageHeight)
            
               ' print the image
               printer.Print(imageToPrint, imageToPrint.Page, e)
            End Sub
            </code>
            <p><b>C#</b></p>
            <code>
            private IRasterImage imageToPrint;
            
            private void RasterImagePrinterRectanglesTest()
            {
               // load an image
               RasterCodecs.CodecsPath = @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin";
               RasterCodecs codecs = new RasterCodecs();
               imageToPrint = codecs.Load(@"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\Sample1.cmp");
            
               // intitialize a new PrintDocument object
               PrintDocument pd = new PrintDocument();
               pd.PrintPage += new PrintPageEventHandler(pd_PrintPage);
            
               // print this image through a print preview dialog
               PrintPreviewDialog dlg = new PrintPreviewDialog();
               dlg.Document = pd;
               dlg.ShowDialog(this);
            
               // dispose the image
               imageToPrint.Dispose();
            }
            
            private void pd_PrintPage(object sender, PrintPageEventArgs e)
            {
               // initialize a new RasterImagePrinter object
               RasterImagePrinter printer = new RasterImagePrinter();
            
               // Use stretch so we fill out the page rectangle
               printer.SizeMode = RasterViewerSizeMode.Stretch;
               printer.CenterMode = RasterViewerCenterMode.None;
            
               // print the top-left quarter corner portion of the image
               Rectangle rc = new Rectangle(0, 0, imageToPrint.Width / 2, imageToPrint.Height / 2);
               rc = imageToPrint.RectangleToImage(RasterViewPerspective.TopLeft, rc);
               printer.ImageRectangle = rc;
            
               // print to the bottom-right corner of the image
               float pageWidth = e.MarginBounds.Width / 2F;
               float pageHeight = e.MarginBounds.Height / 2F;
               printer.PageRectangle = new RectangleF(pageWidth, pageHeight, pageWidth, pageHeight);
            
               // print the image
               printer.Print(imageToPrint, imageToPrint.Page, e);
            }
            </code>
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImagePrinter.ImageRectangleChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle"/> property changes.
            </summary>
            <event>The event handler receives an argument of type <see cref="T:System.EventArgs"/>.</event>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle"/> property is changed.
            </remarks>
            <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter"/> example.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImagePrinter.PageRectangle">
            <summary>
            Gets or sets the rectangular area that represents the total area of the page.
            </summary>
            <value>A <see cref="T:System.Drawing.Rectangle"/> represents the total area of the page.</value>
            <remarks>
            <p>This specifies the destination rectangle on the page to where the image is to be printed.  Normally, you obtain the page rectangle through the <see cref="P:System.Drawing.Printing.PrintPageEventArgs.MarginBounds"/> or the <see cref="T:System.Drawing.Printing.PrintPageEventArgs"/> object passed to your <see cref="T:System.Drawing.Printing.PrintPageEventHandler"/>.</p>
            <p>You can also pass <b>RectangleF.Empty</b> to use the whole print page.</p>
            </remarks>
            <example>
            Refer to <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle"/> example.
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImagePrinter.PageRectangleChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImagePrinter.PageRectangle"/> property changes.
            </summary>
            <event>The event handler receives an argument of type <see cref="T:System.EventArgs"/>.</event>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImagePrinter.PageRectangle"/> property is changed.
            </remarks>
            <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter"/> example.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImagePrinter.PaintProperties">
            <summary>
            Gets and sets the <see cref="T:Leadtools.RasterPaintProperties"/> which control the print properties of this <see cref="T:Leadtools.WinForms.RasterImagePrinter"/>.
            </summary>
            <value>The <see cref="T:Leadtools.RasterPaintProperties"/> which control the print properties of this <see cref="T:Leadtools.WinForms.RasterImagePrinter"/>.</value>
            <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter"/> example.
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImagePrinter.PaintPropertiesChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImagePrinter.PaintProperties"/> property changes.
            </summary>
            <event>The event handler receives an argument of type <see cref="T:System.EventArgs"/>.</event>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImagePrinter.PaintProperties"/> property is changed.
            </remarks>
            <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter"/> example.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImagePrinter.SourceRectangle">
            <summary>
            Gets the actual source rectangle to print.
            </summary>
            <value>A <see cref="T:System.Drawing.Rectangle"/> structure that specifies the actual source rectangle to use when printing.</value>
            <remarks>
            The value of this property is updated after you call <see cref="M:Leadtools.WinForms.RasterImagePrinter.Prepare(System.Int32,System.Int32,System.Single,System.Single,System.Drawing.Printing.PrintPageEventArgs)"/>.
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterImagePrinter.DestinationRectangle">
            <summary>
            Gets the actual destination rectangle to print.
            </summary>
            <value>A <see cref="T:System.Drawing.Rectangle"/> structure that specifies the actual destination rectangle to use when printing.</value>
            <remarks>
            The value of this property is updated after you call <see cref="M:Leadtools.WinForms.RasterImagePrinter.Prepare(System.Int32,System.Int32,System.Single,System.Single,System.Drawing.Printing.PrintPageEventArgs)"/>.
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterImagePrinter.DestinationClipRectangle">
            <summary>
            Gets the actual destination clip rectangle to print.
            </summary>
            <value>A <see cref="T:System.Drawing.Rectangle"/> structure that specifies the actual destination clip rectangle to use when printing.</value>
            <remarks>
            The value of this property is updated after you call <see cref="M:Leadtools.WinForms.RasterImagePrinter.Prepare(System.Int32,System.Int32,System.Single,System.Single,System.Drawing.Printing.PrintPageEventArgs)"/>.
            </remarks>
        </member>
        <member name="T:Leadtools.WinForms.RasterViewerSizeMode">
            <summary>
            Values for the <see cref="P:Leadtools.WinForms.RasterImageViewer.SizeMode"/> property.
            </summary>
            <remarks>
            The <see cref="P:Leadtools.WinForms.RasterImageViewer.SizeMode"/> property controls how the image is displayed.
            </remarks>
        </member>
        <member name="F:Leadtools.WinForms.RasterViewerSizeMode.Normal">
            <summary>
            Width is the image <see cref="P:Leadtools.IRasterImage.Width"/>. Height is the image <see cref="P:Leadtools.IRasterImage.Height"/>.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterViewerSizeMode.Fit">
            <summary>
            The largest possible width or height is set to the control's client area width or height. 
            The remaining dimension is set proportionally to maintain the aspect ratio of the image.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterViewerSizeMode.FitWidth">
            <summary>
            Width is the control's client area width. Height is set proportionally to maintain the aspect ratio of the image.
            If necessary, the control will implement a vertical scroll bar.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterViewerSizeMode.Stretch">
            <summary>
            Width is the control's client area width. Height is the client area height. The aspect ratio of the image 
            is not preserved.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterViewerSizeMode.FitIfLarger">
            <summary>
            Same as <b>Fit</b> if the image width or height is than the viewing area, otherwise, same as <b>Normal</b>.  Aspect ratio of the image i smaintained.
            </summary>
        </member>
        <member name="T:Leadtools.WinForms.RasterViewerCenterMode">
            <summary>
            Values for the CenterMode property.
            </summary>
            <remarks>
            The <see cref="P:Leadtools.WinForms.RasterImageViewer.CenterMode"/> property controls how the image is displayed.
            </remarks>
        </member>
        <member name="F:Leadtools.WinForms.RasterViewerCenterMode.None">
            <summary>
            Default, no centering, display the image starting at the top, left.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterViewerCenterMode.Horizontal">
            <summary>
            Center the image horizontally.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterViewerCenterMode.Vertical">
            <summary>
            Center the image vertically.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterViewerCenterMode.Both">
            <summary>
            Center the image horizontally and vertically.
            </summary>
        </member>
        <member name="T:Leadtools.WinForms.RasterViewerInteractiveMode">
            <summary>
            Values for the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode"/> property.
            </summary>
            <remarks>
            The <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode"/> property controls user interaction with the control's display.
            </remarks>
        </member>
        <member name="F:Leadtools.WinForms.RasterViewerInteractiveMode.None">
            <summary>
            Default, no user interaction.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterViewerInteractiveMode.Pan">
            <summary>
            Allows the user to pan the image using the mouse.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterViewerInteractiveMode.CenterAt">
            <summary>
            Centers the image at the mouse coordinates of the last user click.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterViewerInteractiveMode.ZoomTo">
            <summary>
            Zooms the image to the rectangle created by the user.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterViewerInteractiveMode.Region">
            <summary>
            Creates a region based on user interaction.
            </summary>
            <remarks>
            The type of region created depends on the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveRegionType"/> property.
            </remarks>
        </member>
        <member name="F:Leadtools.WinForms.RasterViewerInteractiveMode.MagnifyGlass">
            <summary>
            Starts the <see cref="P:Leadtools.WinForms.RasterImageViewer.MagnifyGlass"/>.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterViewerInteractiveMode.Floater">
            <summary>
            Starts moving the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage"/>.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterViewerInteractiveMode.Offset">
            <summary>
            Allows the user to offset the image using the mouse.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterViewerInteractiveMode.Page">
            <summary>
            Allows the user to change the current page in the image using the mouse.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterViewerInteractiveMode.Scale">
            <summary>
            Allows the user to change the current scale factor of the image using the mouse.
            </summary>
        </member>
        <member name="T:Leadtools.WinForms.RasterViewerInteractiveRegionType">
            <summary>
            Values for the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveRegionType"/> property.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterViewerInteractiveRegionType.Rectangle">
            <summary>
            Create a rectangle region.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterViewerInteractiveRegionType.Ellipse">
            <summary>
            Create an elliptical region.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterViewerInteractiveRegionType.Freehand">
            <summary>
            Create a freehand region.
            </summary>
        </member>
        <member name="T:Leadtools.WinForms.RasterImageViewer">
            <summary>
            Represents a Leadtools ImageViewer control for displaying an image.
            </summary>
            <remarks>
            The <b>RasterImageViewer</b> is used to display graphics from a bitmap, metafile, icon, JPEG, GIF or PNG (or any other image file format supported by Leadtools) file.<br/>
            Set the <see cref="P:Leadtools.WinForms.RasterImageViewer.Image"/> property to an <see cref="T:Leadtools.IRasterImage"/> object to be displayed.<br/>
            The <b>RasterImageViewer</b> control can automatically handle zooming and scrolling.<br/>
            For information on using Annotations with the <b>RasterImageViewer</b>, refer to <a href="ImplementingAnnotations.htm">Implementing Annotations</a>.
            </remarks>
            <example>
            <para><b>VB.NET</b></para>
            <code>
              Imports System.IO
              Imports Leadtools
              Imports Leadtools.Codecs
              Imports Leadtools.WinForms
            
              Public Class Form1
                 Inherits System.Windows.Forms.Form
            
              #Region " Windows Form Designer generated code "
            
                 Public Sub New()
                    MyBase.New()
                    RasterCodecs.CodecsPath = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin"
            
                    ' Put all files of the specified directory in Files array 
                    files = Directory.GetFiles("C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images", "*.*")
                    fileIndex = 0 '  Set thye file index to Zero (laod the first file)
            
            
                    'This call is required by the Windows Form Designer.
                    InitializeComponent()
            
                    'Add any initialization after the InitializeComponent() call
            
                 End Sub
            
                 'Form overrides dispose to clean up the component list.
                 Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)
                    If disposing Then
                       If Not (components Is Nothing) Then
                          components.Dispose()
                       End If
                    End If
                    MyBase.Dispose(disposing)
                 End Sub
            
                 'Required by the Windows Form Designer
                 Private components As System.ComponentModel.IContainer
            
                 'NOTE: The following procedure is required by the Windows Form Designer
                 'It can be modified using the Windows Form Designer.  
                 'Do not modify it using the code editor.
                 Friend WithEvents panel1 As System.Windows.Forms.Panel
                 Friend WithEvents autoScroll As System.Windows.Forms.CheckBox
                 Friend WithEvents autoScale As System.Windows.Forms.CheckBox
                 Friend WithEvents zoomIn As System.Windows.Forms.Button
                 Friend WithEvents zoomOut As System.Windows.Forms.Button
                 Friend WithEvents LoadPrevious As System.Windows.Forms.Button
                 Friend WithEvents LoadNext As System.Windows.Forms.Button
                 Friend WithEvents rasterImageViewer1 As Leadtools.WinForms.RasterImageViewer
                 &lt;System.Diagnostics.DebuggerStepThrough()&gt; Private Sub InitializeComponent()
                    Dim resources As System.Resources.ResourceManager = New System.Resources.ResourceManager(GetType(Form1))
                    Me.panel1 = New System.Windows.Forms.Panel
                    Me.autoScroll = New System.Windows.Forms.CheckBox
                    Me.autoScale = New System.Windows.Forms.CheckBox
                    Me.zoomIn = New System.Windows.Forms.Button
                    Me.zoomOut = New System.Windows.Forms.Button
                    Me.LoadPrevious = New System.Windows.Forms.Button
                    Me.LoadNext = New System.Windows.Forms.Button
                    Me.rasterImageViewer1 = New Leadtools.WinForms.RasterImageViewer
                    Me.panel1.SuspendLayout()
                    Me.SuspendLayout()
                    '
                    'panel1
                    '
                    Me.panel1.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D
                    Me.panel1.Controls.Add(Me.autoScroll)
                    Me.panel1.Controls.Add(Me.autoScale)
                    Me.panel1.Controls.Add(Me.zoomIn)
                    Me.panel1.Controls.Add(Me.zoomOut)
                    Me.panel1.Controls.Add(Me.LoadPrevious)
                    Me.panel1.Controls.Add(Me.LoadNext)
                    Me.panel1.Location = New System.Drawing.Point(8, 400)
                    Me.panel1.Name = "panel1"
                    Me.panel1.Size = New System.Drawing.Size(568, 72)
                    Me.panel1.TabIndex = 2
                    '
                    'autoScroll
                    '
                    Me.autoScroll.Location = New System.Drawing.Point(224, 40)
                    Me.autoScroll.Name = "autoScroll"
                    Me.autoScroll.Size = New System.Drawing.Size(96, 16)
                    Me.autoScroll.TabIndex = 5
                    Me.autoScroll.Text = "Auto Scroll"
                    '
                    'autoScale
                    '
                    Me.autoScale.Location = New System.Drawing.Point(224, 8)
                    Me.autoScale.Name = "autoScale"
                    Me.autoScale.Size = New System.Drawing.Size(80, 24)
                    Me.autoScale.TabIndex = 4
                    Me.autoScale.Text = "Auto Scale"
                    '
                    'zoomIn
                    '
                    Me.zoomIn.Location = New System.Drawing.Point(24, 16)
                    Me.zoomIn.Name = "zoomIn"
                    Me.zoomIn.TabIndex = 3
                    Me.zoomIn.Text = "Zoom In"
                    '
                    'zoomOut
                    '
                    Me.zoomOut.Location = New System.Drawing.Point(104, 16)
                    Me.zoomOut.Name = "zoomOut"
                    Me.zoomOut.TabIndex = 2
                    Me.zoomOut.Text = "Zoom Out"
                    '
                    'LoadPrevious
                    '
                    Me.LoadPrevious.Location = New System.Drawing.Point(352, 16)
                    Me.LoadPrevious.Name = "LoadPrevious"
                    Me.LoadPrevious.Size = New System.Drawing.Size(96, 24)
                    Me.LoadPrevious.TabIndex = 1
                    Me.LoadPrevious.Text = "Load Previous "
                    '
                    'LoadNext
                    '
                    Me.LoadNext.Location = New System.Drawing.Point(456, 16)
                    Me.LoadNext.Name = "LoadNext"
                    Me.LoadNext.Size = New System.Drawing.Size(96, 24)
                    Me.LoadNext.TabIndex = 0
                    Me.LoadNext.Text = "Load Next"
                    '
                    'rasterImageViewer1
                    '
                    Me.rasterImageViewer1.AnimateRegion = True
                    Me.rasterImageViewer1.AutoResetScaleFactor = True
                    Me.rasterImageViewer1.AutoResetScrollPosition = True
                    Me.rasterImageViewer1.AutoScroll = True
                    Me.rasterImageViewer1.AutoScrollMinSize = New System.Drawing.Size(30, 30)
                    Me.rasterImageViewer1.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D
                    Me.rasterImageViewer1.CenterMode = Leadtools.WinForms.RasterViewerCenterMode.None
                    Me.rasterImageViewer1.DoubleBuffer = True
                    Me.rasterImageViewer1.FrameColor = System.Drawing.Color.Black
                    Me.rasterImageViewer1.FrameIsPartOfView = True
                    Me.rasterImageViewer1.FrameShadowColor = System.Drawing.Color.FromArgb(CType(128, Byte), CType(0, Byte), CType(0, Byte), CType(0, Byte))
                    Me.rasterImageViewer1.FrameShadowIsPartOfView = True
                    Me.rasterImageViewer1.FrameShadowSize = CType(resources.GetObject("rasterImageViewer1.FrameShadowSize"), System.Drawing.SizeF)
                    Me.rasterImageViewer1.FrameSize = CType(resources.GetObject("rasterImageViewer1.FrameSize"), System.Drawing.SizeF)
                    Me.rasterImageViewer1.Image = Nothing
                    Me.rasterImageViewer1.InteractiveMode = Leadtools.WinForms.RasterViewerInteractiveMode.None
                    Me.rasterImageViewer1.InteractiveRegionCombineMode = Leadtools.RasterRegionCombineMode.Set
                    Me.rasterImageViewer1.InteractiveRegionType = Leadtools.WinForms.RasterViewerInteractiveRegionType.Rectangle
                    Me.rasterImageViewer1.Location = New System.Drawing.Point(8, 24)
                    Me.rasterImageViewer1.Name = "rasterImageViewer1"
                    Me.rasterImageViewer1.ScaleFactor = 1.0!
                    Me.rasterImageViewer1.Size = New System.Drawing.Size(568, 368)
                    Me.rasterImageViewer1.SizeMode = Leadtools.WinForms.RasterViewerSizeMode.Normal
                    Me.rasterImageViewer1.TabIndex = 3
                    Me.rasterImageViewer1.Text = "rasterImageViewer1"
                    '
                    'Form1
                    '
                    Me.AutoScaleBaseSize = New System.Drawing.Size(5, 13)
                    Me.ClientSize = New System.Drawing.Size(584, 493)
                    Me.Controls.Add(Me.rasterImageViewer1)
                    Me.Controls.Add(Me.panel1)
                    Me.Name = "Form1"
                    Me.Text = "Form1"
                    Me.panel1.ResumeLayout(False)
                    Me.ResumeLayout(False)
            
                 End Sub
            
              #End Region
            
                 Private files() As String ' string array for file names
                 Private fileIndex As Integer
            
                 Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
            
                 End Sub
            
                 Private Sub zoomIn_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles zoomIn.Click
                    rasterImageViewer1.BeginUpdate()  ' suspend painting of the image 
            
                    rasterImageViewer1.ScaleFactor = rasterImageViewer1.ScaleFactor * 2.0F
                    centerImage(rasterImageViewer1)
            
                    rasterImageViewer1.EndUpdate() ' start painting of the image 
            
                 End Sub
            
                 Private Sub zoomOut_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles zoomOut.Click
                    rasterImageViewer1.BeginUpdate() ' suspend painting of the image 
            
                    rasterImageViewer1.ScaleFactor = rasterImageViewer1.ScaleFactor * 0.5F
                    centerImage(rasterImageViewer1)
            
                    rasterImageViewer1.EndUpdate() ' start painting of the image 
            
                 End Sub
            
                 Private Sub autoScale_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles autoScale.CheckedChanged
            
                 End Sub
            
                 Private Sub autoScroll_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles autoScroll.CheckedChanged
            
                 End Sub
            
                 Private Sub LoadPrevious_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LoadPrevious.Click
                    rasterImageViewer1.BeginUpdate() ' suspend painting of the image 
            
                    ' if AutoResetScaleFactor is true the new loaded image will
                    ' use the previous rasterImageViewer1.ScaleFactor
                    rasterImageViewer1.AutoResetScaleFactor = autoScale.Checked
            
                    ' if AutoResetScrollPosition is true the both horizontal and vertical
                    ' scroll bars will keep it position when the next image will be loaded 
                    rasterImageViewer1.AutoResetScrollPosition = autoScroll.Checked
            
                    fileIndex = fileIndex - 1 ' Decrease file index
                    If (fileIndex &lt; 0) Then
                       fileIndex = files.Length - 1
                    End If
            
                    loadImage()  ' load the image
            
                    centerImage(rasterImageViewer1)   ' center the image in the viewer
            
                    rasterImageViewer1.EndUpdate() ' start painting of the image 
            
                 End Sub
            
            
                 ' center the loaded image in the middle of rasterImageViewer if the image smaller than the viewer size
                 Private Sub centerImage(ByVal rasterImageViewer As RasterImageViewer)
                    ' do center only when RasterViewerSizeMode == Normal
                    If (rasterImageViewer1.SizeMode = RasterViewerSizeMode.Normal) Then
                       If (rasterImageViewer1.IsImageAvailable = True) Then
                          If (rasterImageViewer1.Image.IsAllocated = True) Then
                             Dim viewerWidth As Integer = rasterImageViewer.Right - rasterImageViewer.Left
                             Dim viewerHeight As Integer = rasterImageViewer.Bottom - rasterImageViewer.Top
                             Dim imageWidth As Integer = (rasterImageViewer.LogicalViewRectangle.Width * rasterImageViewer1.ScaleFactor)
                             Dim imageHeight As Integer = (rasterImageViewer.LogicalViewRectangle.Height * rasterImageViewer1.ScaleFactor)
            
                             If (imageWidth &lt; viewerWidth) Then
                                rasterImageViewer.BorderPadding.Left = (viewerWidth - imageWidth) / 2
                             Else
                                rasterImageViewer.BorderPadding.Left = 0
                             End If
            
                             If (imageHeight &lt; viewerHeight) Then
                                rasterImageViewer.BorderPadding.Top = (viewerHeight - imageHeight) / 2
                             Else
                                rasterImageViewer.BorderPadding.Top = 0
                             End If
                          End If
                       End If
                    End If
                 End Sub
            
                 ' load image file
                 Private Sub loadImage()
                    Dim codecs As RasterCodecs = New RasterCodecs
            
                    Dim canLoad As Boolean = False
            
                    Try
                       Dim info As CodecsImageInfo = codecs.GetInformation(files(fileIndex), True)
                       canLoad = True
                    Catch
                    End Try
            
                    If (canLoad) Then
                       Try
                          rasterImageViewer1.Image = codecs.Load(files(fileIndex))
                       Catch
                       End Try
                    End If
                 End Sub
            
            
            
                 Private Sub LoadNext_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LoadNext.Click
                    rasterImageViewer1.BeginUpdate() ' suspend painting of the image 
            
                    rasterImageViewer1.AutoResetScaleFactor = autoScale.Checked
                    rasterImageViewer1.AutoResetScrollPosition = autoScroll.Checked
            
                    fileIndex = fileIndex + 1 ' increse file index
            
                    If (fileIndex - 1 &gt;= files.Length) Then
                       fileIndex = 0
                    End If
            
                    loadImage()  'load the image
            
                    centerImage(rasterImageViewer1)   ' center the image in the viewer
            
                    rasterImageViewer1.EndUpdate() ' start painting of the image 
            
                 End Sub
              End Class
            </code>
            <para><b>C#</b></para>
            <code>
              using System.IO;
              using Leadtools;
              using Leadtools.WinForms;
              using Leadtools.Codecs;
            
              namespace LoadScale
              {
                 public class Form1 : System.Windows.Forms.Form
                 {
                    private RasterImageViewer rasterImageViewer1;
                    private System.Windows.Forms.Panel panel1;
                    private System.Windows.Forms.Button LoadNext;
                    private System.Windows.Forms.Button LoadPrevious;
                    private System.Windows.Forms.Button zoomOut;
                    private System.Windows.Forms.Button zoomIn;
                    private System.Windows.Forms.CheckBox autoScale;  // index of the file name loaded
                    private System.Windows.Forms.CheckBox autoScroll;
                    private System.Windows.Forms.MainMenu mainMenu1;
                    private System.Windows.Forms.MenuItem View;
                    private System.Windows.Forms.MenuItem Normal;
                    private System.Windows.Forms.MenuItem Fit;
                    private System.Windows.Forms.MenuItem FitWidth;
                    private System.Windows.Forms.MenuItem Stretch;
                       
                    private string[] files; // string array for file names
                    private int fileIndex;
                       
                    /// Required designer variable.
                    private System.ComponentModel.Container components = null;
                       
                    public Form1()
                    {
                       RasterCodecs.CodecsPath = @"E:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin";
                       		
                       /* Put all files of the specified directory in Files array */
                       files = Directory.GetFiles( @"E:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images" ,"*.*" );			
                       fileIndex = 0; // Set thye file index to Zero (laod the first file)
                       
                       InitializeComponent();
                    }
                       
                    /// Clean up any resources being used.
                    protected override void Dispose( bool disposing )
                    {
                       if( disposing )
                       {
                          if (components != null) 
                          {
                             components.Dispose();
                          }
                       }
                       base.Dispose( disposing );
                    }
                       
                    #region Windows Form Designer generated code
                    // Required method for Designer support - do not modify
                    //the contents of this method with the code editor.
                    private void InitializeComponent()
                    {
                       System.Resources.ResourceManager resources = new System.Resources.ResourceManager(typeof(Form1));
                       this.rasterImageViewer1 = new RasterImageViewer();
                       this.panel1 = new System.Windows.Forms.Panel();
                       this.autoScroll = new System.Windows.Forms.CheckBox();
                       this.autoScale = new System.Windows.Forms.CheckBox();
                       this.zoomIn = new System.Windows.Forms.Button();
                       this.zoomOut = new System.Windows.Forms.Button();
                       this.LoadPrevious = new System.Windows.Forms.Button();
                       this.LoadNext = new System.Windows.Forms.Button();
                       this.mainMenu1 = new System.Windows.Forms.MainMenu();
                       this.View = new System.Windows.Forms.MenuItem();
                       this.Normal = new System.Windows.Forms.MenuItem();
                       this.Fit = new System.Windows.Forms.MenuItem();
                       this.FitWidth = new System.Windows.Forms.MenuItem();
                       this.Stretch = new System.Windows.Forms.MenuItem();
                       this.panel1.SuspendLayout();
                       this.SuspendLayout();
                       // 
                       // rasterImageViewer1
                       // 
                       this.rasterImageViewer1.AnimateRegion = true;
                       this.rasterImageViewer1.AutoResetScaleFactor = true;
                       this.rasterImageViewer1.AutoResetScrollPosition = true;
                       this.rasterImageViewer1.AutoScroll = true;
                       this.rasterImageViewer1.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
                       this.rasterImageViewer1.CenterMode = RasterViewerCenterMode.None;
                       this.rasterImageViewer1.DoubleBuffer = true;
                       this.rasterImageViewer1.FrameColor = System.Drawing.Color.Black;
                       this.rasterImageViewer1.FrameIsPartOfView = true;
                       this.rasterImageViewer1.FrameShadowColor = System.Drawing.Color.FromArgb(((System.Byte)(128)), ((System.Byte)(0)), ((System.Byte)(0)), ((System.Byte)(0)));
                       this.rasterImageViewer1.FrameShadowIsPartOfView = true;
                       this.rasterImageViewer1.FrameShadowSize = new System.Drawing.SizeF(10.0f, 10.0f);
                       this.rasterImageViewer1.FrameSize = new System.Drawing.SizeF(10.0f, 10.0f);
                       this.rasterImageViewer1.Image = null;
                       this.rasterImageViewer1.InteractiveMode = RasterViewerInteractiveMode.None;
                       this.rasterImageViewer1.InteractiveRegionCombineMode = RasterRegionCombineMode.Set;
                       this.rasterImageViewer1.InteractiveRegionType = RasterViewerInteractiveRegionType.Rectangle;
                       this.rasterImageViewer1.Location = new System.Drawing.Point(16, 24);
                       this.rasterImageViewer1.Name = "rasterImageViewer1";
                       this.rasterImageViewer1.ScaleFactor = 1F;
                       this.rasterImageViewer1.Size = new System.Drawing.Size(568, 432);
                       this.rasterImageViewer1.SizeMode = RasterViewerSizeMode.Normal;
                       this.rasterImageViewer1.TabIndex = 0;
                       this.rasterImageViewer1.Text = "rasterImageViewer1";
                       // 
                       // panel1
                       // 
                       this.panel1.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
                       this.panel1.Controls.Add(this.autoScroll);
                       this.panel1.Controls.Add(this.autoScale);
                       this.panel1.Controls.Add(this.zoomIn);
                       this.panel1.Controls.Add(this.zoomOut);
                       this.panel1.Controls.Add(this.LoadPrevious);
                       this.panel1.Controls.Add(this.LoadNext);
                       this.panel1.Location = new System.Drawing.Point(16, 472);
                       this.panel1.Name = "panel1";
                       this.panel1.Size = new System.Drawing.Size(568, 72);
                       this.panel1.TabIndex = 1;
                       // 
                       // autoScroll
                       // 
                       this.autoScroll.Location = new System.Drawing.Point(224, 40);
                       this.autoScroll.Name = "autoScroll";
                       this.autoScroll.Size = new System.Drawing.Size(96, 16);
                       this.autoScroll.TabIndex = 5;
                       this.autoScroll.Text = "Auto Scroll";
                       // 
                       // autoScale
                       // 
                       this.autoScale.Location = new System.Drawing.Point(224, 8);
                       this.autoScale.Name = "autoScale";
                       this.autoScale.Size = new System.Drawing.Size(80, 24);
                       this.autoScale.TabIndex = 4;
                       this.autoScale.Text = "Auto Scale";
                       // 
                       // zoomIn
                       // 
                       this.zoomIn.Location = new System.Drawing.Point(24, 16);
                       this.zoomIn.Name = "zoomIn";
                       this.zoomIn.TabIndex = 3;
                       this.zoomIn.Text = "Zoom In";
                       this.zoomIn.Click += new System.EventHandler(this.zoomIn_Click);
                       // 
                       // zoomOut
                       // 
                       this.zoomOut.Location = new System.Drawing.Point(104, 16);
                       this.zoomOut.Name = "zoomOut";
                       this.zoomOut.TabIndex = 2;
                       this.zoomOut.Text = "Zoom Out";
                       this.zoomOut.Click += new System.EventHandler(this.zoomOut_Click);
                       // 
                       // LoadPrevious
                       // 
                       this.LoadPrevious.Location = new System.Drawing.Point(352, 16);
                       this.LoadPrevious.Name = "LoadPrevious";
                       this.LoadPrevious.Size = new System.Drawing.Size(96, 24);
                       this.LoadPrevious.TabIndex = 1;
                       this.LoadPrevious.Text = "Load Previous ";
                       this.LoadPrevious.Click += new System.EventHandler(this.LoadPrevious_Click);
                       // 
                       // LoadNext
                       // 
                       this.LoadNext.Location = new System.Drawing.Point(456, 16);
                       this.LoadNext.Name = "LoadNext";
                       this.LoadNext.Size = new System.Drawing.Size(96, 24);
                       this.LoadNext.TabIndex = 0;
                       this.LoadNext.Text = "Load Next";
                       this.LoadNext.Click += new System.EventHandler(this.LoadNext_Click);
                       // 
                       // mainMenu1
                       // 
                       this.mainMenu1.MenuItems.AddRange(new System.Windows.Forms.MenuItem[] {
                                                                                                this.View});
                       // 
                       // View
                       // 
                       this.View.Index = 0;
                       this.View.MenuItems.AddRange(new System.Windows.Forms.MenuItem[] {
                                                                                           this.Normal,
                                                                                           this.Fit,
                                                                                           this.FitWidth,
                                                                                           this.Stretch});
                       this.View.Text = "View";
                       // 
                       // Normal
                       // 
                       this.Normal.Checked = true;
                       this.Normal.Index = 0;
                       this.Normal.Text = "Normal";
                       this.Normal.Click += new System.EventHandler(this.Normal_Click);
                       // 
                       // Fit
                       // 
                       this.Fit.Index = 1;
                       this.Fit.Text = "Fit";
                       this.Fit.Click += new System.EventHandler(this.Fit_Click);
                       // 
                       // FitWidth
                       // 
                       this.FitWidth.Index = 2;
                       this.FitWidth.Text = "Fit Width";
                       this.FitWidth.Click += new System.EventHandler(this.FitWidth_Click);
                       // 
                       // Stretch
                       // 
                       this.Stretch.Index = 3;
                       this.Stretch.Text = "Stretch";
                       this.Stretch.Click += new System.EventHandler(this.Stretch_Click);
                       // 
                       // Form1
                       // 
                       this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
                       this.ClientSize = new System.Drawing.Size(608, 557);
                       this.Controls.Add(this.panel1);
                       this.Controls.Add(this.rasterImageViewer1);
                       this.Menu = this.mainMenu1;
                       this.Name = "Form1";
                       this.Text = "Form1";
                       this.Load += new System.EventHandler(this.Form1_Load);
                       this.panel1.ResumeLayout(false);
                       this.ResumeLayout(false);
                       
                    }
                    #endregion
                       
                    /// The main entry point for the application.
                    [STAThread]
                    static void Main() 
                    {
                       Application.Run(new Form1());
                    }
                       
                       	
                    private void Form1_Load(object sender, System.EventArgs e)
                    {
                       	
                    }
                       
                    private void LoadNext_Click(object sender, System.EventArgs e)
                    {
                       rasterImageViewer1.BeginUpdate();// suspend painting of the image 
                       
                       rasterImageViewer1.AutoResetScaleFactor = autoScale.Checked;
                       rasterImageViewer1.AutoResetScrollPosition = autoScroll.Checked;
                       
                       fileIndex++;// increse file index
                                
                       if( fileIndex - 1  &gt;= files.Length )
                          fileIndex = 0;
                       
                       loadImage( ); // load the image
                       
                       centerImage( rasterImageViewer1 ); // center the image in the viewer
                       
                       rasterImageViewer1.EndUpdate(); // start painting of the image 
                    }
                       
                    private void LoadPrevious_Click(object sender, System.EventArgs e)
                    {
                       rasterImageViewer1.BeginUpdate();// suspend painting of the image 
                       
                       // if AutoResetScaleFactor is true the new loaded image will
                       // use the previous rasterImageViewer1.ScaleFactor
                       rasterImageViewer1.AutoResetScaleFactor = autoScale.Checked;
                       
                       // if AutoResetScrollPosition is true the both horizontal and vertical
                       // scroll bars will keep it position when the next image will be loaded 
                       rasterImageViewer1.AutoResetScrollPosition = autoScroll.Checked;
                       
                       fileIndex--; // Decrease file index
                       if( fileIndex &lt; 0 )
                          fileIndex = files.Length - 1;
                       
                       loadImage( ); // load the image
                       
                       centerImage( rasterImageViewer1 ); // center the image in the viewer
                       
                       rasterImageViewer1.EndUpdate(); // start painting of the image 
                    }
                       
                    /* center the loaded image in the middle of rasterImageViewer if the image smaller than the viewer size */
                    private void centerImage( RasterImageViewer rasterImageViewer )
                    {
                       // do center only when RasterViewerSizeMode == Normal
                       if( rasterImageViewer1.SizeMode == RasterViewerSizeMode.Normal ) 
                       {
                          if( rasterImageViewer1.IsImageAvailable == true )
                          {
                             if( rasterImageViewer1.Image.IsAllocated == true )
                             {
                                int viewerWidth = rasterImageViewer.Right - rasterImageViewer.Left;
                                int viewerHeight = rasterImageViewer.Bottom - rasterImageViewer.Top;
                                int imageWidth = (int)(rasterImageViewer.LogicalViewRectangle.Width * rasterImageViewer1.ScaleFactor);
                                int imageHeight = (int)(rasterImageViewer.LogicalViewRectangle.Height * rasterImageViewer1.ScaleFactor);
                       				
                                if( imageWidth &lt; viewerWidth)
                                   rasterImageViewer.BorderPadding.Left = (viewerWidth - imageWidth) / 2;
                                else
                                   rasterImageViewer.BorderPadding.Left = 0;
                       
                                if( imageHeight &lt; viewerHeight )
                                   rasterImageViewer.BorderPadding.Top = (viewerHeight - imageHeight) / 2;
                                else
                                   rasterImageViewer.BorderPadding.Top = 0;
                             }
                          }
                       }
                    }
                       
                    /* load image file */
                    private void loadImage( )
                    {
                       RasterCodecs codecs = new RasterCodecs();
                       
                       bool canLoad = false;
                       
                       try
                       {
                          CodecsImageInfo info = codecs.GetInformation( files[fileIndex], true );
                          canLoad = true;
                       }
                       catch
                       {
                       }
                       
                       if( canLoad )
                       {
                          try
                          {
                             rasterImageViewer1.Image = codecs.Load( files[fileIndex] );
                          }
                          catch
                          {
                          }
                       }
                    }
                       
                    private void zoomOut_Click(object sender, System.EventArgs e)
                    {
                       rasterImageViewer1.BeginUpdate();// suspend painting of the image 
                       
                       rasterImageViewer1.ScaleFactor *= 0.5F;
                       centerImage( rasterImageViewer1 );
                       
                       rasterImageViewer1.EndUpdate(); // start painting of the image 
                    }
                       
                    private void zoomIn_Click(object sender, System.EventArgs e)
                    {
                       rasterImageViewer1.BeginUpdate();// suspend painting of the image 
                       		
                       rasterImageViewer1.ScaleFactor *= 2.0F;
                       centerImage( rasterImageViewer1 );
                       
                       rasterImageViewer1.EndUpdate(); // start painting of the image 
                    }
                       
                    private void Normal_Click(object sender, System.EventArgs e)
                    {
                       rasterImageViewer1.SizeMode = RasterViewerSizeMode.Normal;
                       Normal.Checked = true;
                       Fit.Checked = false;
                       FitWidth.Checked = false;
                       Stretch.Checked = false;
                       // center the image in this case
                    }
                       
                    private void Fit_Click(object sender, System.EventArgs e)
                    {
                       rasterImageViewer1.SizeMode = RasterViewerSizeMode.Fit;				
                       Normal.Checked = false;
                       Fit.Checked = true;
                       FitWidth.Checked = false;
                       Stretch.Checked = false;
                       
                       // Do mot center the image in this case
                       rasterImageViewer1.BorderPadding.Left = 0;
                       rasterImageViewer1.BorderPadding.Top = 0;
                    }
                       
                    private void FitWidth_Click(object sender, System.EventArgs e)
                    {
                       rasterImageViewer1.SizeMode = RasterViewerSizeMode.FitWidth;				
                       Normal.Checked = false;
                       Fit.Checked = false;
                       FitWidth.Checked = true;
                       Stretch.Checked = false;
                       
                       // Do mot center the image in this case
                       rasterImageViewer1.BorderPadding.Left = 0;
                       rasterImageViewer1.BorderPadding.Top = 0;
                    }
                       
                    private void Stretch_Click(object sender, System.EventArgs e)
                    {
                       rasterImageViewer1.SizeMode = RasterViewerSizeMode.Stretch;		
                       Normal.Checked = false;
                       Fit.Checked = false;
                       FitWidth.Checked = false;
                       Stretch.Checked = true;
                      
                       // Do mot center the image in this case
                       rasterImageViewer1.BorderPadding.Left = 0;
                       rasterImageViewer1.BorderPadding.Top = 0;
                    }
                 }
              }
            </code>
            </example>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.#ctor">
            <summary>
            Initializes a new instance of the RasterImageViewer class.
            </summary>
            <example>Refer to <see cref="E:Leadtools.WinForms.RasterImageViewer.CenterModeChanged"/>.</example>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnDoubleBufferChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.DoubleBufferChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnDoubleBufferChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnDoubleBufferChanged</b> in a derived class, be sure to call the base class's <b>OnDoubleBufferChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnBorderStyleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.BorderStyleChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnBorderStyleChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnBorderStyleChanged</b> in a derived class, be sure to call the base class's <b>OnBorderStyleChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnScaleFactorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.ScaleFactorChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnScaleFactorChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnScaleFactorChanged</b> in a derived class, be sure to call the base class's <b>OnScaleFactorChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnAutoResetScaleFactorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.AutoResetScaleFactorChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnAutoResetScaleFactorChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnAutoResetScaleFactorChanged</b> in a derived class, be sure to call the base class's <b>OnAutoResetScaleFactorChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnAutoResetOffsetChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.AutoResetOffsetChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnAutoResetOffsetChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnAutoResetOffsetChanged</b> in a derived class, be sure to call the base class's <b>OnAutoResetOffsetChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnAutoResetScrollPositionChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.AutoResetScrollPositionChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnAutoResetScrollPositionChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnAutoResetScrollPositionChanged</b> in a derived class, be sure to call the base class's <b>OnAutoResetScrollPositionChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnSizeModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.SizeModeChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnSizeModeChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnSizeModeChanged</b> in a derived class, be sure to call the base class's <b>OnSizeModeChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnCenterModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.CenterModeChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnCenterModeChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnCenterModeChanged</b> in a derived class, be sure to call the base class's <b>OnCenterModeChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnFrameSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.FrameSizeChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnFrameSizeChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnFrameSizeChanged</b> in a derived class, be sure to call the base class's <b>OnFrameSizeChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnOffsetChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.OffsetChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnOffsetChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnOffsetChanged</b> in a derived class, be sure to call the base class's <b>OnOffsetChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnFrameColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.FrameColorChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnFrameColorChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnFrameColorChanged</b> in a derived class, be sure to call the base class's <b>OnFrameColorChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnFrameIsPartOfViewChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.FrameIsPartOfViewChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnFrameIsPartOfViewChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnFrameIsPartOfViewChanged</b> in a derived class, be sure to call the base class's <b>OnFrameIsPartOfViewChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnFrameShadowSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.FrameShadowSizeChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnFrameShadowSizeChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnFrameShadowSizeChanged</b> in a derived class, be sure to call the base class's <b>OnFrameShadowSizeChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnFrameShadowIsPartOfViewChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.FrameShadowIsPartOfViewChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnFrameShadowIsPartOfViewChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnFrameShadowIsPartOfViewChanged</b> in a derived class, be sure to call the base class's <b>OnFrameShadowIsPartOfViewChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnFrameShadowColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.FrameShadowColorChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnFrameShadowColorChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnFrameShadowColorChanged</b> in a derived class, be sure to call the base class's <b>OnFrameShadowColorChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnTransformChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.TransformChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnTransformChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnTransformChanged</b> in a derived class, be sure to call the base class's <b>OnTransformChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.BeginUpdate">
            <summary>
            Prevents the control from drawing until the <see cref="M:Leadtools.WinForms.RasterImageViewer.EndUpdate"/> method is called.
            </summary>
            <remarks>
            When you want to disable repainting of the viewer, call <b>BeginUpdate</b>.<br/>
            When you are ready to resume painting call <see cref="M:Leadtools.WinForms.RasterImageViewer.EndUpdate"/>.
            </remarks>
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer"/>.</example>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.EndUpdate">
            <summary>
            Resumes drawing which was disabled by a call to <see cref="M:Leadtools.WinForms.RasterImageViewer.BeginUpdate"/>.
            </summary>
            <remarks>
            When you want to disable repainting of the viewer, call <see cref="M:Leadtools.WinForms.RasterImageViewer.BeginUpdate"/>.<br/>
            When you are ready to resume painting call <b>EndUpdate</b>.
            </remarks>
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer"/>.</example>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.CenterAtPoint(System.Drawing.Point)">
            <summary>
            Centers the image display at the specified point.
            </summary>
            <param name="pt">The point at which to center the image display, in client coordiantes.</param>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor"/>.</example>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.ZoomToRectangle(System.Drawing.Rectangle)">
            <summary>
            Zooms the image to the specified rectangle.
            </summary>
            <param name="rc">The rectangle to which the image should be zoomed, in client coordinates.</param>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor"/>.</example>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overrides <b>System.Windows.Forms.ScrollableControl.WndProc</b>.
            </summary>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnScroll(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.Scroll"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnScroll</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnScroll</b> in a derived class, be sure to call the base class's <b>OnScroll</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnAutoDisposeImagesChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.AutoDisposeImagesChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnAutoDisposeImagesChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnAutoDisposeImagesChanged</b> in a derived class, be sure to call the base class's <b>OnAutoDisposeImagesChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnImageChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.ImageChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnImageChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnImageChanged</b> in a derived class, be sure to call the base class's <b>OnImageChanged</b> method so that registered delegates receive the event.<br/>
            Do not confuse this with <see cref="M:Leadtools.IRasterImage.OnChanged(Leadtools.RasterImageChangedEventArgs)"/>.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnPaintPropertiesChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.PaintPropertiesChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnPaintPropertiesChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnPaintPropertiesChanged</b> in a derived class, be sure to call the base class's <b>OnPaintPropertiesChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.CalculateTransform">
            <summary>
            Recalculates the <see cref="P:Leadtools.WinForms.RasterImageViewer.Transform"/> for the viewer.
            </summary>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor"/>.</example>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnSizeChanged(System.EventArgs)">
            <summary>
            Occurs when the size of the control has changed.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overrides <b>System.Windows.Forms.ScrollableControl.OnPaint</b>.
            </summary>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnPaint(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Occurs when the control repaints it's client area.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <param name="src">Rectangle which describes the source area within the image being painted.</param>
            <param name="srcClip">Rectangle which describes the source clip area within the image being painted.</param>
            <param name="dest">Rectanble which describes the area of the client area that was updated.</param>
             <param name="destClip">Rectanble which describes the clip area of the client area that was updated.</param>
            <remarks>Override this method to provide your own (or extra) image display functionality.</remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnAnimateRegionChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.AnimateRegionChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnAnimateRegionChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnAnimateRegionChanged</b> in a derived class, be sure to call the base class's <b>OnAnimateRegionChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnPreTransformPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.PreTransformPaint"/> event.
            </summary>
            <param name="e">An <b>PaintEventArgs</b> that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnPreTransformPaint</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnPreTransformPaint</b> in a derived class, be sure to call the base class's <b>OnPreTransformPaint</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnPreViewPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.PreViewPaint"/> event.
            </summary>
            <param name="e">An <b>PaintEventArgs</b> that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnPreViewPaint</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnPreViewPaint</b> in a derived class, be sure to call the base class's <b>OnPreViewPaint</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnPostViewPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.PostViewPaint"/> event.
            </summary>
            <param name="e">An <b>PaintEventArgs</b> that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnPostViewPaint</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnPostViewPaint</b> in a derived class, be sure to call the base class's <b>OnPostViewPaint</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnPostTransformPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.PostTransformPaint"/> event.
            </summary>
            <param name="e">An <b>PaintEventArgs</b> that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnPostTransformPaint</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnPostTransformPaint</b> in a derived class, be sure to call the base class's <b>OnPostTransformPaint</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnInteractiveModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveModeChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnInteractiveModeChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnInteractiveModeChanged</b> in a derived class, be sure to call the base class's <b>OnInteractiveModeChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnInteractiveRegionTypeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionTypeChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnInteractiveRegionTypeChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnInteractiveRegionTypeChanged</b> in a derived class, be sure to call the base class's <b>OnInteractiveRegionTypeChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnInteractiveRegionCombineModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionCombineModeChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnInteractiveRegionCombineModeChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnInteractiveRegionCombineModeChanged</b> in a derived class, be sure to call the base class's <b>OnInteractiveRegionCombineModeChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs when the user presses a mouse button. 
            </summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs when the user moves the mouse over the control.
            </summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs when the user releases a mouse button.
            </summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnLostFocus(System.EventArgs)">
            <summary>
            Occurs when the control loses focus.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnInteractivePan(Leadtools.WinForms.RasterViewerLineEventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractivePan"/> event.
            </summary>
            <param name="e">A <see cref="T:Leadtools.WinForms.RasterViewerLineEventArgs"/> that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnInteractivePan</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnInteractivePan</b> in a derived class, be sure to call the base class's <b>OnInteractivePan</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnInteractiveOffset(Leadtools.WinForms.RasterViewerLineEventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveOffset"/> event.
            </summary>
            <param name="e">A <see cref="T:Leadtools.WinForms.RasterViewerLineEventArgs"/> that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnInteractiveOffset</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnInteractiveOffset</b> in a derived class, be sure to call the base class's <b>OnInteractiveOffset</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnInteractivePage(Leadtools.WinForms.RasterViewerLineEventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractivePage"/> event.
            </summary>
            <param name="e">A <see cref="T:Leadtools.WinForms.RasterViewerLineEventArgs"/> that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnInteractivePage</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnInteractivePage</b> in a derived class, be sure to call the base class's <b>OnInteractivePage</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnInteractiveScale(Leadtools.WinForms.RasterViewerLineEventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveScale"/> event.
            </summary>
            <param name="e">A <see cref="T:Leadtools.WinForms.RasterViewerLineEventArgs"/> that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnInteractiveScale</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnInteractiveScale</b> in a derived class, be sure to call the base class's <b>OnInteractiveScale</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnInteractiveMagnifyGlass(Leadtools.WinForms.RasterViewerLineEventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveMagnifyGlass"/> event.
            </summary>
            <param name="e">A <see cref="T:Leadtools.WinForms.RasterViewerLineEventArgs"/> that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnInteractiveMagnifyGlass</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnInteractiveMagnifyGlass</b> in a derived class, be sure to call the base class's <b>OnInteractiveMagnifyGlass</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnInteractiveCenterAt(Leadtools.WinForms.RasterViewerPointEventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveCenterAt"/> event.
            </summary>
            <param name="e">A RasterViewerPointEventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnInteractiveCenterAt</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnInteractiveCenterAt</b> in a derived class, be sure to call the base class's <b>OnInteractiveCenterAt</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnInteractiveZoomTo(Leadtools.WinForms.RasterViewerRectangleEventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveZoomTo"/> event.
            </summary>
            <param name="e">A RasterViewerRectangleEventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnInteractiveZoomTo</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnInteractiveZoomTo</b> in a derived class, be sure to call the base class's <b>OnInteractiveZoomTo</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnInteractiveRegionRectangle(Leadtools.WinForms.RasterViewerRectangleEventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionRectangle"/> event.
            </summary>
            <param name="e">A RasterViewerRectangleEventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnInteractiveRegionRectangle</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnInteractiveRegionRectangle</b> in a derived class, be sure to call the base class's <b>OnInteractiveRegionRectangle</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnInteractiveRegionEllipse(Leadtools.WinForms.RasterViewerRectangleEventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionEllipse"/> event.
            </summary>
            <param name="e">A RasterViewerRectangleEventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnInteractiveRegionEllipse</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnInteractiveRegionEllipse</b> in a derived class, be sure to call the base class's <b>OnInteractiveRegionEllipse</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnInteractiveRegionFreehand(Leadtools.WinForms.RasterViewerPointsEventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionFreehand"/> event.
            </summary>
            <param name="e">A RasterViewerPointsEventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnInteractiveRegionFreehand</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnInteractiveRegionFreehand</b> in a derived class, be sure to call the base class's <b>OnInteractiveRegionFreehand</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnMagnifyGlassChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.MagnifyGlassChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnMagnifyGlassChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnMagnifyGlassChanged</b> in a derived class, be sure to call the base class's <b>OnMagnifyGlassChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnFloaterImageChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.FloaterImageChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnFloaterImageChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnFloaterImageChanged</b> in a derived class, be sure to call the base class's <b>OnFloaterImageChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnFloaterPositionChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.FloaterPositionChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnFloaterPositionChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnFloaterPositionChanged</b> in a derived class, be sure to call the base class's <b>OnFloaterPositionChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnFloaterVisibleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.FloaterVisibleChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnFloaterVisibleChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnFloaterVisibleChanged</b> in a derived class, be sure to call the base class's <b>OnFloaterVisibleChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnInteractiveFloater(Leadtools.WinForms.RasterViewerPointEventArgs)">
            <summary>
            Raises the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode"/> event.
            </summary>
            <param name="e">A <see cref="T:Leadtools.WinForms.RasterViewerPointEventArgs"/> that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnInteractiveMode</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnInteractiveMode</b> in a derived class, be sure to call the base class's <b>OnInteractiveMode</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.CombineFloater(System.Boolean,Leadtools.ImageProcessing.CombineFastCommandFlags)">
            <summary>
            Combines the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage"/> with the <see cref="P:Leadtools.WinForms.RasterImageViewer.Image"/> currently inside this <see cref="T:Leadtools.WinForms.RasterImageViewer"/>.
            </summary>
            <param name="autoColorResolution">If true, automatically checks if the <see cref="P:Leadtools.IRasterImage.BitsPerPixel"/> value of <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage"/> is different than that of <see cref="P:Leadtools.WinForms.RasterImageViewer.Image"/> and converts the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage"/> prior to combining if necessary.</param>
            <param name="combineFlags">A <see cref="T:Leadtools.ImageProcessing.CombineFastCommandFlags"/> determining the source and destination operation used when combining the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage"/> with the <see cref="P:Leadtools.WinForms.RasterImageViewer.Image"/>.</param>
            <remarks>
            <p>This method will use the <see cref="T:Leadtools.ImageProcessing.CombineFastCommand"/> image processing command to combine the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage"/> with <see cref="P:Leadtools.WinForms.RasterImageViewer.Image"/>.  The <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage"/> will be combined at the position specified by <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterPosition"/>.</p>
            <p>If the value of <i>autoColorResolution</i> is set to true and <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage"/> has a different bits/pixel value of <see cref="P:Leadtools.WinForms.RasterImageViewer.Image"/>, this method will first use the <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand"/> image processing command to convert <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage"/> to the same bits/pixel of <see cref="P:Leadtools.WinForms.RasterImageViewer.Image"/>.  If the value of <i>autoColorResolution</i> is false, no conversion will take place and this method might throw an exception of the bits/pixel value of the two images are not compatible.</p>
            <p>After you call this method, you can set the value of <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage"/> to null (Nothing in Visual Basic) to dispose it.</p>
            </remarks>
            <example>
            Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage"/>.
            </example>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.RegionToFloater">
            <summary>
            Converts the image region to a floater.
            </summary>
            <remarks>
            <p>Call this method to convert the current region inside <see cref="P:Leadtools.WinForms.RasterImageViewer.Image"/> to a floater.  The <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterPosition"/> is automatically updated after you call this method.</p>
            <p>This method will not delete the region from <see cref="P:Leadtools.WinForms.RasterImageViewer.Image"/>.  If you need to do that, call <see cref="M:Leadtools.IRasterImage.MakeRegionEmpty"/> after you call this method.</p>
            <p>If the <see cref="P:Leadtools.WinForms.RasterImageViewer.Image"/> inside this <see cref="T:Leadtools.WinForms.RasterImageViewer"/> does not have a region, this method will do nothing.</p>
            <p>This method uses the <see cref="T:Leadtools.ImageProcessing.CopyRectangleCommand"/> image processing command to convert the image region to a floater image.</p>
            </remarks>
            <example>
            Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage"/>.
            </example>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnAnimateFloaterChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.AnimateFloaterChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnAnimateFloaterChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnAnimateFloaterChanged</b> in a derived class, be sure to call the base class's <b>OnAnimateFloaterChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnInteractiveModeEnded(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveModeEnded"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnInteractiveModeEnded</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnInteractiveModeEnded</b> in a derived class, be sure to call the base class's <b>OnInteractiveModeEnded</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnRightAlignImageChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.RightAlignImageChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnRightAlignImageChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnRightAlignImageChanged</b> in a derived class, be sure to call the base class's <b>OnRightAlignImageChanged</b> method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnEnableKeyboardChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.EnableKeyboardChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The <b>OnEnableKeyboardChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p><b>Notes to Inheritors:</b> When overriding <b>OnEnableKeyboardChanged</b> in a derived class, be sure to call
            the base class's <b>OnEnableKeyboardChanged</b> method so that registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)">Control.IsInputKey</see>.
            </summary>
        </member>
        <member name="M:Leadtools.WinForms.RasterImageViewer.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)">Control.OnKeyDown</see>.
            </summary>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.DoubleBuffer">
            <summary>
            Enables or disables double buffer painting, which eliminates flicker.
            </summary>
            <value>true to enable double buffer painting, false to disable it.</value>
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.DoubleBufferChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.DoubleBuffer"/> property changes.
            </summary>
            <event>The event handler receives an argument of type EventArgs.</event>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.DoubleBuffer"/> property is changed by either a programmatic modification or user interaction.
            </remarks>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.BorderStyle">
            <summary>
            Sets the border style of the control.
            </summary>
            <value>The border style of the control.</value>
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.BorderStyleChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.BorderStyle"/> property changes.
            </summary>
            <event>The event handler receives an argument of type EventArgs.</event>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.BorderStyle"/> property is changed by either a programmatic modification or user interaction.
            </remarks>
            <example>
            <para><b>VB.NET</b></para>
            <code>
               Imports Leadtools.WinForms
               
               Private viewer As RasterImageViewer
               Private Sub TestBorderStyleChanged()
                   viewer = New RasterImageViewer
                   AddHandler viewer.BorderStyleChanged, AddressOf viewer_BorderStyleChanged
               End Sub
               Private Sub viewer_BorderStyleChanged(ByVal sender As Object, ByVal e As EventArgs)
                   'Do Something
               End Sub
            </code>
            <para><b>C#</b></para>
            <code>
                 using Leadtools.WinForms;
                 private RasterImageViewer viewer;
                 private void TestBorderStyleChanged()
                 {
                    viewer = new RasterImageViewer();         
                    viewer.BorderStyleChanged += new EventHandler(viewer_BorderStyleChanged );
                 }
                 private void viewer_BorderStyleChanged (object sender, EventArgs e)
                 {  
                    // Do Something
                 }
            </code>
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.CreateParams">
            <summary>
            Overrides <b>System.Windows.Forms.ScrollableControl.Createparams</b>.
            </summary>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.ScaleFactor">
            <summary>
            The zoom factor used to display the image.
            </summary>
            <value>The zoom factor used to display the image.</value>
            <remarks>
            You can get and set this property when the <see cref="P:Leadtools.WinForms.RasterImageViewer.SizeMode"/> 
            property is <see cref="F:Leadtools.WinForms.RasterViewerSizeMode.Normal"/>.<br/>
            This property is read only when the <see cref="P:Leadtools.WinForms.RasterImageViewer.SizeMode"/> property 
            is set to any other value.
            When <see cref="P:Leadtools.WinForms.RasterImageViewer.SizeMode"/> is set to <see cref="F:Leadtools.WinForms.RasterViewerSizeMode.Stretch"/>, 
            the zoom factor is the smallest of the Width or Height zoom factors (the aspect ratio is not preserved).
            </remarks>
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.ScaleFactorChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.ScaleFactor"/> property changes.
            </summary>
            <event>The event handler receives an argument of type EventArgs.</event>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.ScaleFactor"/> property is changed by either a programmatic modification or user interaction.
            </remarks>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.AutoResetScaleFactor">
            <summary>
            Enables or disables the automatic reset of the <see cref="P:Leadtools.WinForms.RasterImageViewer.ScaleFactor"/> property.
            </summary>
            <value>true to enable automatic reset, false to disable it.</value>
            <remarks>When set to true, this will automatically reset the <see cref="P:Leadtools.WinForms.RasterImageViewer.ScaleFactor"/> property back to 1.0 when a new image is set to the viewer.</remarks>
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.AutoResetScaleFactorChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.AutoResetScaleFactor"/> property changes.
            </summary>
            <event>The event handler receives an argument of type EventArgs.</event>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.AutoResetScaleFactor"/> property is changed by either a programmatic modification or user interaction.
            </remarks>
            <example>
            <para><b>VB.NET</b></para>
            <code>
               Imports Leadtools.WinForms
               Private viewer As RasterImageViewer
               Private Sub TestAutoResetScaleFactorChanged()
                   viewer = New RasterImageViewer
                   AddHandler viewer.AutoResetScaleFactorChanged, AddressOf viewer_AutoResetScaleFactorChanged
               End Sub
               Private Sub viewer_AutoResetScaleFactorChanged(ByVal sender As Object, ByVal e As EventArgs)
                   'Do Something
               End Sub
            </code>
            <para><b>C#</b></para>
            <code>
                 using Leadtools.WinForms;
                 private RasterImageViewer viewer;
                 private void TestAutoResetScaleFactorChanged()
                 {
                    viewer = new RasterImageViewer();         
                    viewer.AutoResetScaleFactorChanged += new EventHandler(viewer_AutoResetScaleFactorChanged);
                 }
                 private void viewer_AutoResetScaleFactorChanged(object sender, EventArgs e)
                 {  
                    // Do Something
                 }
            </code>
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.AutoResetOffset">
            <summary>
            Enables or disables the automatic reset of the <see cref="P:Leadtools.WinForms.RasterImageViewer.Offset"/> property.
            </summary>
            <value>true to enable automatic reset, false to disable it.</value>
            <remarks>When set to true, this will automatically reset the <see cref="P:Leadtools.WinForms.RasterImageViewer.Offset"/> property back to 1.0 when a new image is set to the viewer.</remarks>
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.AutoResetOffsetChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.AutoResetOffset"/> property changes.
            </summary>
            <event>The event handler receives an argument of type EventArgs.</event>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.AutoResetOffset"/> property is changed by either a programmatic modification or user interaction.
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.AutoResetScrollPosition">
            <summary>
            Enables or disables the automatic reset of the <b>AutoScrollPosition</b> property.
            </summary>
            <value>true to enable automatic reset, false to disable it.</value>
            <remarks>When set to true, this will automatically reset the <b>AutoScrollPosition</b> property back to (0,0) when a new image is set to the viewer.</remarks>
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.AutoResetScrollPositionChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.AutoResetScrollPosition"/> property changes.
            </summary>
            <event>The event handler receives an argument of type EventArgs.</event>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.AutoResetScrollPosition"/> property is changed by either a programmatic modification or user interaction.
            </remarks>
            <example>
            <para><b>C#</b></para>
            <code>
            private RasterImageViewer viewer;
            private void TestAutoResetScrollPositionChanged()
            {
               viewer = new RasterImageViewer();         
               viewer.AutoResetScrollPositionChanged += new EventHandler(viewer_AutoResetScrollPositionChanged);
            }
            private void viewer_AutoResetScrollPositionChanged(object sender, EventArgs e)
            {  
               // Do Something
            }
            </code>
            <para><b>VB.NET</b></para>
            <code>
            Private viewer As RasterImageViewer
            Private Sub TestAutoResetScrollPositionChanged()
               viewer = New RasterImageViewer
               AddHandler viewer.AutoResetScrollPositionChanged, AddressOf viewer_AutoResetScrollPositionChanged
            End Sub
            Private Sub viewer_AutoResetScrollPositionChanged(ByVal sender As Object, ByVal e As EventArgs)
               'Do Something
            End Sub
            </code>
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.SizeMode">
            <summary>
            Determines how the control displays the image and the automatic adjustments of the display rectangles.
            </summary>
            <value>Value which determines how the control displays the image and the automatic adjustments of the display rectangles.</value>
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.SizeModeChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.SizeMode"/> property changes.
            </summary>
            <event>The event handler receives an argument of type EventArgs.</event>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.SizeMode"/> property is changed by either a programmatic modification or user interaction.
            </remarks>
            <example>
            <para><b>C#</b></para>
            <code>
            private RasterImageViewer viewer;
            private void TestSizeModeChanged()
            {
               viewer = new RasterImageViewer();         
               viewer.SizeModeChanged += new EventHandler(viewer_SizeModeChanged);
            }
            private void viewer_SizeModeChanged(object sender, EventArgs e)
            {  
               // Do Something
            }
            </code>
            <para><b>VB.NET</b></para>
            <code>
            Private viewer As RasterImageViewer
            Private Sub TestSizeModeChanged()
               viewer = New RasterImageViewer      
               AddHandler viewer.SizeModeChanged, AddressOf viewer_SizeModeChanged
            End Sub
            Private Sub viewer_SizeModeChanged(ByVal sender As Object, ByVal e As EventArgs)
               'Do Something
            End Sub
            </code>
            </example>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.CenterMode">
            <summary>
            Enables or disables the automatic adjustment of display rectangles in order to center the image in 
            the control's client area, when the width and/or height of the destination rectangle is smaller than 
            the width and/or height of the client area.
            </summary>
            <value>true to enable image centering, false to display starting at the top, left of the control.</value>
            <remarks>
            For example, this can be used to center a small image when it is displayed in a control that is larger
            than the image's dimensions (<see cref="P:Leadtools.IRasterImage.Width"/> x <see cref="P:Leadtools.IRasterImage.Height"/>).
            This can also be used in conjunction with the <see cref="P:Leadtools.WinForms.RasterImageViewer.SizeMode"/> 
            property and the <see cref="P:Leadtools.WinForms.RasterImageViewer.ScaleFactor"/> property to center an 
            image when the zoomed display dimensions are smaller than the control's dimensions.
            </remarks>
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.CenterModeChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.CenterMode"/> property changes.
            </summary>
            <event>The event handler receives an argument of type EventArgs.</event>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.CenterMode"/> property is changed by either a programmatic modification or user interaction.
            </remarks>
            <example>
            <para><b>C#</b></para>
            <code>
            private RasterImageViewer viewer;
            private void TestCenterModeChanged()
            {
               viewer = new RasterImageViewer();         
               viewer.CenterModeChanged  += new EventHandler(viewer_CenterModeChanged);
            }
            private void viewer_CenterModeChanged(object sender, EventArgs e)
            {  
               // Do Something
            }
            </code>
            <para><b>VB.NET</b></para>
            <code>
            Private viewer As RasterImageViewer
            Private Sub TestCenterModeChanged()
               viewer = New RasterImageViewer
               AddHandler viewer.CenterModeChanged, AddressOf viewer_CenterModeChanged
            End Sub
            Private Sub viewer_CenterModeChanged(ByVal sender As Object, ByVal e As EventArgs)
               'Do Something
            End Sub
            </code>
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.FrameSize">
            <summary>
            Specifies the thickness of the frame that you add to the Raster View Control.
            </summary>
            <value>The size of the frame, 0 to disable the frame.</value>
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.FrameSizeChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.FrameSize"/> property changes.
            </summary>
            <event>The event handler receives an argument of type EventArgs.</event>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.FrameSize"/> property is changed by either a programmatic modification or user interaction.
            </remarks>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.Offset">
            <summary>
            Specifies the number of pixels to offset from top-left of the viewer before drawing the image.
            </summary>
            <value>A <see cref="T:System.Drawing.SizeF"/> value that specifies the number of pixels to offset from top-left of the viewer before drawing the image.</value>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.OffsetChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.Offset"/> property changes.
            </summary>
            <event>The event handler receives an argument of type EventArgs.</event>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.FrameSize"/> property is changed by either a programmatic modification or user interaction.
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.FrameColor">
            <summary>
            Specifies the border color of the frame that you add to the control.
            </summary>
            <value>The color of the border of the control's frame.</value>
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.FrameColorChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.FrameColor"/> property changes.
            </summary>
            <event>The event handler receives an argument of type EventArgs.</event>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.FrameColor"/> property is changed by either a programmatic modification or user interaction.
            </remarks>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.FrameIsPartOfView">
            <summary>
            Determines whether or not the frame is treated as part of the control's view.
            </summary>
            <value>true to treat the frame as part of the view, false otherwise.</value>
            <remarks>If the frame is treated as part of the view, then it will be scrolled along with the image when the client size is smaller than the display size.</remarks>
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.FrameIsPartOfViewChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.FrameIsPartOfView"/> property changes.
            </summary>
            <event>The event handler receives an argument of type EventArgs.</event>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.FrameIsPartOfView"/> property is changed by either a programmatic modification or user interaction.
            </remarks>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.FrameShadowSize">
            <summary>
            Specifies the thickness of the shadow for the frame that you add to the control.
            </summary>
            <value>The size of the shadow for the frame that you add to the control.</value>
            <remarks>Set to 0 to disable the frame's shadow.</remarks>
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.FrameShadowSizeChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.FrameShadowSize"/> property changes.
            </summary>
            <event>The event handler receives an argument of type EventArgs.</event>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.FrameShadowSize"/> property is changed by either a programmatic modification or user interaction.
            </remarks>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.FrameShadowIsPartOfView">
            <summary>
            Determines whether or not the frame's shadow is treated as part of the control's view.
            </summary>
            <value>true to treat the frame's shadow as part of the view, false otherwise.</value>
            <remarks>If the frame's shadow is treated as part of the view, then it will be scrolled along with the image when the client size is smaller than the display size.</remarks>
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.FrameShadowIsPartOfViewChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.FrameShadowIsPartOfView"/> property changes.
            </summary>
            <event>The event handler receives an argument of type EventArgs.</event>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.FrameShadowIsPartOfView"/> property is changed by either a programmatic modification or user interaction.
            </remarks>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.FrameShadowColor">
            <summary>
            Specifies the shadow color of the frame that you add to the control.
            </summary>
            <value>The color of the shadow for the frame that you add to the control.</value>
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.FrameShadowColorChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.FrameShadowColor"/> property changes.
            </summary>
            <event>The event handler receives an argument of type EventArgs.</event>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.FrameShadowColor"/> property is changed by either a programmatic modification or user interaction.
            </remarks>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.Transform">
            <summary>
            Gets the display matrix for the viewer.
            </summary>
            <value>The display matrix for the viewer.</value>
            <remarks>
            Use the Transform property to get the current matrix which is used to transform the image display.<br/>
            The matrix is used to transform from physical to logical coordinates and vice versa.
            </remarks>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.TransformChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.Transform"/> property changes.
            </summary>
            <event>The event handler receives an argument of type EventArgs.</event>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.Transform"/> property is changed by either a programmatic modification or user interaction.
            </remarks>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.BorderPadding">
            <summary>
            Gets the viewer border padding.
            </summary>
            <value>The viewer border padding.</value>
            <remarks>The BorderPadding is used to put an empty border around the image display.</remarks>
            <example>Refer to <see cref="T:Leadtools.WinForms.ViewerBorderPadding"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.ImageSize">
            <summary>
            Gets the the size of the current image in the viewer.
            </summary>
            <value>The size of the current image in the viewer.</value>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.ImageDpiX">
            <summary>
            Gets the horizontal resolution of the of the current image in the viewer.
            </summary>
            <value>A value in dots per inch for the horizontal resolution supported of the current image in the viewer.</value>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.ImageDpiY">
            <summary>
            Gets the vertical resolution of the of the current image in the viewer.
            </summary>
            <value>A value in dots per inch for the vertical resolution supported of the current image in the viewer.</value>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.LogicalViewRectangle">
            <summary>
            Gets the logical view rectangle.
            </summary>
            <value>The logical view rectangle.</value>
            <remarks>The logical view rectangle is the current viewing rectangle in image coordinates.</remarks>
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.PhysicalViewRectangle">
            <summary>
            Gets the physical view rectangle.
            </summary>
            <value>The physical view rectangle.</value>
            <remarks>The physical view rectangle is the current viewing rectangle in viewer coordinates.</remarks>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor">
             <summary>
             Gets the current horizontal scale factor for the image display.
             </summary>
             <value>The current horizontal scale factor.</value>
             <example>
             <para><b>VB.NET</b></para>
             <code>
                Imports Leadtools
                Imports Leadtools.WinForms
                Imports Leadtools.Codecs
            
                'Required by the Windows Form Designer
                Private components As System.ComponentModel.IContainer
            
                'NOTE: The following procedure is required by the Windows Form Designer
                'It can be modified using the Windows Form Designer.  
                'Do not modify it using the code editor.
                Friend WithEvents RasterImageViewer1 As RasterImageViewer
                Friend WithEvents Button1 As System.Windows.Forms.Button
                Friend WithEvents Label1 As System.Windows.Forms.Label
                &lt;System.Diagnostics.DebuggerStepThrough()&gt; Private Sub InitializeComponent()
                    Dim resources As System.Resources.ResourceManager = New System.Resources.ResourceManager(GetType(Form1))
                    Me.RasterImageViewer1 = New RasterImageViewer
                    Me.Button1 = New System.Windows.Forms.Button
                    Me.Label1 = New System.Windows.Forms.Label
                    Me.SuspendLayout()
                    '
                    'RasterImageViewer1
                    '
                    Me.RasterImageViewer1.AnimateRegion = True
                    Me.RasterImageViewer1.AutoResetScaleFactor = True
                    Me.RasterImageViewer1.AutoResetScrollPosition = True
                    Me.RasterImageViewer1.AutoScroll = True
                    Me.RasterImageViewer1.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D
                    Me.RasterImageViewer1.CenterMode = RasterViewerCenterMode.None
                    Me.RasterImageViewer1.DoubleBuffer = True
                    Me.RasterImageViewer1.FrameColor = System.Drawing.Color.Black
                    Me.RasterImageViewer1.FrameIsPartOfView = True
                    Me.RasterImageViewer1.FrameShadowColor = System.Drawing.Color.FromArgb(CType(128, Byte), CType(0, Byte), CType(0, Byte), CType(0, Byte))
                    Me.RasterImageViewer1.FrameShadowIsPartOfView = True
                    Me.RasterImageViewer1.FrameShadowSize = CType(resources.GetObject("RasterImageViewer1.FrameShadowSize"), System.Drawing.SizeF)
                    Me.RasterImageViewer1.FrameSize = CType(resources.GetObject("RasterImageViewer1.FrameSize"), System.Drawing.SizeF)
                    Me.RasterImageViewer1.Image = Nothing
                    Me.RasterImageViewer1.InteractiveMode = RasterViewerInteractiveMode.None
                    Me.RasterImageViewer1.InteractiveRegionCombineMode = RasterRegionCombineMode.Set
                    Me.RasterImageViewer1.InteractiveRegionType = RasterViewerInteractiveRegionType.Rectangle
                    Me.RasterImageViewer1.Location = New System.Drawing.Point(32, 80)
                    Me.RasterImageViewer1.Name = "RasterImageViewer1"
                    Me.RasterImageViewer1.ScaleFactor = 1.0!
                    Me.RasterImageViewer1.Size = New System.Drawing.Size(472, 360)
                    Me.RasterImageViewer1.SizeMode = RasterViewerSizeMode.Normal
                    Me.RasterImageViewer1.TabIndex = 0
                    Me.RasterImageViewer1.Text = "RasterImageViewer1"
            
                    Dim codecs As RasterCodecs = New RasterCodecs
                    RasterCodecs.CodecsPath = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin\"
                    RasterImageViewer1.Image = codecs.Load("C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\images\image1.Cmp")
                    AddHandler RasterImageViewer1.FrameShadowColorChanged, New EventHandler(AddressOf rasterImageViewer1_FrameShadowColorChanged)
                    AddHandler RasterImageViewer1.FrameShadowIsPartOfViewChanged, New EventHandler(AddressOf rasterImageViewer1_FrameShadowIsPartOfViewChanged)
                    AddHandler RasterImageViewer1.FrameShadowSizeChanged, New EventHandler(AddressOf rasterImageViewer1_FrameShadowSizeChanged)
                    AddHandler RasterImageViewer1.FrameSizeChanged, New EventHandler(AddressOf rasterImageViewer1_FrameSizeChanged)
                    AddHandler RasterImageViewer1.ImageChanged, New EventHandler(AddressOf rasterImageViewer1_ImageChanged)
                    AddHandler RasterImageViewer1.FrameColorChanged, New EventHandler(AddressOf rasterImageViewer1_FrameColorChanged)
                    AddHandler RasterImageViewer1.FrameIsPartOfViewChanged, New EventHandler(AddressOf rasterImageViewer1_FrameIsPartOfViewChanged)
                    AddHandler RasterImageViewer1.DoubleBufferChanged, New System.EventHandler(AddressOf Me.rasterImageViewer1_DoubleBufferChanged)
                    AddHandler RasterImageViewer1.InteractiveModeChanged, New EventHandler(AddressOf rasterImageViewer1_InteractiveModeChanged)
                    AddHandler RasterImageViewer1.InteractiveRegionCombineModeChanged, New EventHandler(AddressOf rasterImageViewer1_InteractiveRegionCombineModeChanged)
                    AddHandler RasterImageViewer1.InteractiveRegionEllipse, New Leadtools.WinForms.RasterViewerRectangleEventHandler(AddressOf rasterImageViewer1_InteractiveRegionEllipse)
                    AddHandler RasterImageViewer1.InteractiveRegionTypeChanged, New EventHandler(AddressOf rasterImageViewer1_InteractiveRegionTypeChanged)
                    AddHandler RasterImageViewer1.InteractiveZoomTo, New RasterViewerRectangleEventHandler(AddressOf rasterImageViewer1_InteractiveZoomTo)
                    AddHandler RasterImageViewer1.ScaleFactorChanged, New EventHandler(AddressOf rasterImageViewer1_ScaleFactorChanged)
                    AddHandler RasterImageViewer1.Scroll, New EventHandler(AddressOf rasterImageViewer1_Scroll)
                    AddHandler RasterImageViewer1.TransformChanged, New EventHandler(AddressOf rasterImageViewer1_TransformChanged)
                    AddHandler RasterImageViewer1.PaintPropertiesChanged, New EventHandler(AddressOf rasterImageViewer1_PaintPropertiesChanged)
                    AddHandler RasterImageViewer1.PreTransformPaint, New PaintEventHandler(AddressOf rasterImageViewer1_PreTransformPaint)
                    AddHandler RasterImageViewer1.PostTransformPaint, New PaintEventHandler(AddressOf rasterImageViewer1_PostTransformPaint)
                    AddHandler RasterImageViewer1.PreViewPaint, New PaintEventHandler(AddressOf rasterImageViewer1_PreViewPaint)
                    AddHandler RasterImageViewer1.PostViewPaint, New PaintEventHandler(AddressOf rasterImageViewer1_PostViewPaint)
                    AddHandler RasterImageViewer1.InteractiveRegionRectangle, New RasterViewerRectangleEventHandler(AddressOf MyRasterViewerRectangleEventHandler)
                    AddHandler RasterImageViewer1.InteractivePan, New RasterViewerLineEventHandler(AddressOf MyRasterViewerLineEventHandler)
                    RasterImageViewer1.ZoomToRectangle(New Rectangle(0, 0, RasterImageViewer1.Width \ 2, RasterImageViewer1.Height \ 2))
                    Console.WriteLine("CurrentScaleFactor: (" &amp; RasterImageViewer1.CurrentXScaleFactor &amp; ", " &amp; RasterImageViewer1.CurrentYScaleFactor &amp; ")")
                    Console.WriteLine("Image Dpi: (" &amp; RasterImageViewer1.ImageDpiX &amp; ", " &amp; RasterImageViewer1.ImageDpiY &amp; ")")
                    Console.WriteLine("Image Size: " &amp; RasterImageViewer1.ImageSize.Width &amp; ", " &amp; RasterImageViewer1.ImageSize.Height)
            
                    '
                    'Button1
                    '
                    Me.Button1.Location = New System.Drawing.Point(72, 16)
                    Me.Button1.Name = "Button1"
                    Me.Button1.Size = New System.Drawing.Size(104, 40)
                    Me.Button1.TabIndex = 1
                    Me.Button1.Text = "Button1"
                    '
                    'Label1
                    '
                    Me.Label1.Location = New System.Drawing.Point(232, 24)
                    Me.Label1.Name = "Label1"
                    Me.Label1.Size = New System.Drawing.Size(128, 24)
                    Me.Label1.TabIndex = 2
                    Me.Label1.Text = "Label1"
                    '
                    'Form1
                    '
                    Me.AutoScaleBaseSize = New System.Drawing.Size(5, 13)
                    Me.ClientSize = New System.Drawing.Size(512, 445)
                    Me.Controls.Add(Me.Label1)
                    Me.Controls.Add(Me.Button1)
                    Me.Controls.Add(Me.RasterImageViewer1)
                    Me.Name = "Form1"
                    Me.Text = "Form1"
                    Me.ResumeLayout(False)
            
                End Sub
            
            #End Region
            
                Private Sub BorderPaddingHandler(ByVal sender As System.Object, ByVal e As EventArgs)
                    Console.WriteLine("BorderPadding Changed")
                End Sub
            
                Private Sub rasterImageViewer1_DoubleBufferChanged(ByVal sender As System.Object, ByVal e As EventArgs)
                    Console.WriteLine("Double Buffer option has changed")
                End Sub
            
                Private Sub rasterImageViewer1_FrameColorChanged(ByVal sender As System.Object, ByVal e As EventArgs)
                    Console.WriteLine("Frame Color option has changed")
                End Sub
            
                Private Sub rasterImageViewer1_FrameIsPartOfViewChanged(ByVal sender As System.Object, ByVal e As EventArgs)
                    Console.WriteLine("FrameIsPartOfView property has been changed")
                End Sub
            
                Private Sub rasterImageViewer1_FrameShadowColorChanged(ByVal sender As System.Object, ByVal e As EventArgs)
                    Console.WriteLine("FrameIsPartOfView property has been changed")
                End Sub
            
                Private Sub rasterImageViewer1_FrameShadowIsPartOfViewChanged(ByVal sender As System.Object, ByVal e As EventArgs)
                    Console.WriteLine("FrameShadowIsPartOfViewChanged property has been changed")
                End Sub
            
                Private Sub rasterImageViewer1_FrameShadowSizeChanged(ByVal sender As System.Object, ByVal e As EventArgs)
                    Console.WriteLine("FrameShadowSizeChanged property has been changed")
                End Sub
            
                Private Sub rasterImageViewer1_FrameSizeChanged(ByVal sender As System.Object, ByVal e As EventArgs)
                    Console.WriteLine("FrameSizeChanged property has been changed")
                End Sub
            
                Private Sub rasterImageViewer1_ImageChanged(ByVal sender As System.Object, ByVal e As EventArgs)
                    Console.WriteLine("ImageChanged property has been changed")
                End Sub
            
                Private Sub rasterImageViewer1_InteractiveModeChanged(ByVal sender As System.Object, ByVal e As EventArgs)
                    Console.WriteLine("The Current Interactive mode is Pan")
                End Sub
            
                Private Sub rasterImageViewer1_InteractiveRegionCombineModeChanged(ByVal sender As System.Object, ByVal e As EventArgs)
                    Console.WriteLine("The current region combine mode is OR")
                End Sub
            
                Private Sub rasterImageViewer1_InteractiveRegionEllipse(ByVal sender As System.Object, ByVal e As RasterViewerRectangleEventArgs)
                    Me.Text = " (" &amp; e.Rectangle.Left &amp; ", " &amp; e.Rectangle.Top &amp; " ) (" &amp; e.Rectangle.Right &amp; ", " &amp; e.Rectangle.Bottom &amp; ")"
                End Sub
            
                Private Sub rasterImageViewer1_InteractiveRegionTypeChanged(ByVal sender As System.Object, ByVal e As EventArgs)
                    Console.WriteLine("The current Region is Free Hand")
                End Sub
            
                Private Sub rasterImageViewer1_InteractiveZoomTo(ByVal sender As System.Object, ByVal e As RasterViewerRectangleEventArgs)
                    Me.Text = " (" &amp; e.Rectangle.Left &amp; ", " &amp; e.Rectangle.Top &amp; " ) (" &amp; e.Rectangle.Right &amp; ", " &amp; e.Rectangle.Bottom &amp; ")"
                End Sub
            
                Private Sub rasterImageViewer1_ScaleFactorChanged(ByVal sender As System.Object, ByVal e As EventArgs)
                    Console.WriteLine("The Scale Factor is " &amp; RasterImageViewer1.ScaleFactor * 100 &amp; "%")
                End Sub
            
                Private Sub rasterImageViewer1_Scroll(ByVal sender As System.Object, ByVal e As EventArgs)
                    Cursor.Current = Cursors.Cross
                End Sub
            
                Private Sub rasterImageViewer1_TransformChanged(ByVal sender As System.Object, ByVal e As EventArgs)
                    Me.Text = " (" &amp; Cursor.Position.X &amp; ", " &amp; Cursor.Position.Y &amp; ")"
                End Sub
            
                Private Sub rasterImageViewer1_PaintPropertiesChanged(ByVal sender As System.Object, ByVal e As EventArgs)
                    Console.WriteLine("RasterPaintProperty changed")
                End Sub
            
                Private Sub rasterImageViewer1_PreTransformPaint(ByVal sender As System.Object, ByVal e As PaintEventArgs)
                    Console.WriteLine("PreTransformPaint occurs now")
                End Sub
            
                Private Sub rasterImageViewer1_PostTransformPaint(ByVal sender As System.Object, ByVal e As PaintEventArgs)
                    RasterImageViewer1.CalculateTransform()
                    Dim rectangle As Rectangle = RasterImageViewer1.PhysicalViewRectangle
                    Console.WriteLine(" (" &amp; rectangle.Left &amp; ", " &amp; rectangle.Right &amp; ") , (" &amp; rectangle.Right &amp; ", " &amp; rectangle.Bottom &amp; ")")
                    Console.WriteLine("PostTransformPaint occurs now")
                End Sub
            
                Private Sub rasterImageViewer1_PreViewPaint(ByVal sender As System.Object, ByVal e As PaintEventArgs)
                    Console.WriteLine("PreViewPaint occurs now")
                End Sub
            
                Private Sub rasterImageViewer1_PostViewPaint(ByVal sender As System.Object, ByVal e As PaintEventArgs)
                    Console.WriteLine("PostViewPaint occurs now")
                End Sub
                Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
                    AddHandler RasterImageViewer1.InteractiveRegionRectangle, New RasterViewerRectangleEventHandler(AddressOf MyRasterViewerRectangleEventHandler)
                    RasterImageViewer1.InteractiveMode = Leadtools.WinForms.RasterViewerInteractiveMode.Region
                    RasterImageViewer1.InteractiveRegionType = Leadtools.WinForms.RasterViewerInteractiveRegionType.Rectangle
            
                    Dim codec As RasterCodecs = New RasterCodecs
                    RasterCodecs.CodecsPath = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin"
                    RasterImageViewer1.Image = codec.Load("C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\sample5.cmp")
                End Sub
             </code>
             <para><b>C#</b></para>
             <code>
                  using Leadtools;
                  using Leadtools.WinForms;
                  using Leadtools.Codecs;
            
                  private void rasterImageViewer1_DoubleBufferChanged(System.Object sender, EventArgs e)
                  {
                     Console.WriteLine("Double Buffer option has changed");
                  }
            
                  private void rasterImageViewer1_FrameColorChanged(System.Object sender, EventArgs e)
                  {
                     Console.WriteLine("Frame Color option has changed");
                  }
            
                  private void rasterImageViewer1_FrameIsPartOfViewChanged(System.Object sender, EventArgs e)
                  {
                     Console.WriteLine("FrameIsPartOfView property has been changed");
                  }      
            
                  private void rasterImageViewer1_FrameShadowColorChanged(System.Object sender, EventArgs e)
                  {
                     Console.WriteLine("FrameIsPartOfView property has been changed");
                  }      
            
                  private void rasterImageViewer1_FrameShadowIsPartOfViewChanged(System.Object sender, EventArgs e)
                  {
                     Console.WriteLine("FrameShadowIsPartOfViewChanged property has been changed");
                  }      
            
                  private void rasterImageViewer1_FrameShadowSizeChanged(System.Object sender, EventArgs e)
                  {
                     Console.WriteLine("FrameShadowSizeChanged property has been changed");
                  }      
            
                  private void rasterImageViewer1_FrameSizeChanged(System.Object sender, EventArgs e)
                  {
                     Console.WriteLine("FrameSizeChanged property has been changed");
                  }      
            
                  private void rasterImageViewer1_ImageChanged(System.Object sender, EventArgs e)
                  {
                     Console.WriteLine("ImageChanged property has been changed");
                  }
            
                  private void rasterImageViewer1_InteractiveModeChanged(System.Object sender, EventArgs e)
                  {
                     Console.WriteLine("The Current Interactive mode is Pan");
                  }
            
                  private void rasterImageViewer1_InteractiveRegionCombineModeChanged(System.Object sender, EventArgs e)
                  {
                     Console.WriteLine("The current region combine mode is OR");
                  }
            
                  private void rasterImageViewer1_InteractiveRegionEllipse(System.Object sender, RasterViewerRectangleEventArgs e)
                  {
                     this.Text = @" (" + e.Rectangle.Left + ", " + e.Rectangle.Top + " ) (" + e.Rectangle.Right + ", " + e.Rectangle.Bottom + ")";
                  }
            
                  private void rasterImageViewer1_InteractiveRegionTypeChanged(System.Object sender, EventArgs e)
                  {
                     Console.WriteLine("The current Region is Free Hand");
                  }
            
                  private void rasterImageViewer1_InteractiveZoomTo(System.Object sender, RasterViewerRectangleEventArgs e)
                  {
                     this.Text = @" (" + e.Rectangle.Left + ", " + e.Rectangle.Top + " ) (" + e.Rectangle.Right + ", " + e.Rectangle.Bottom + ")";
                  }
            
                  private void rasterImageViewer1_ScaleFactorChanged(System.Object sender, EventArgs e)
                  {
                     Console.WriteLine("The Scale Factor is " + rasterImageViewer1.ScaleFactor * 100 + "%");
                  }
            
                  private void rasterImageViewer1_Scroll(System.Object sender, EventArgs e)
                  {
                     Cursor.Current = Cursors.Cross;
                  }
            
                  private void rasterImageViewer1_TransformChanged(System.Object sender, EventArgs e)
                  {
                     this.Text = @" (" + Cursor.Position.X + ", " + Cursor.Position.Y + ")";
                  }
            
                  private void rasterImageViewer1_PaintPropertiesChanged(System.Object sender, EventArgs e)
                  {
                     Console.WriteLine("RasterPaintProperty changed");
                  }
            
                  private void rasterImageViewer1_PreTransformPaint(System.Object sender, PaintEventArgs e)
                  {
                     Console.WriteLine("PreTransformPaint occurs now");
                  }
            
                  private void rasterImageViewer1_PostTransformPaint(System.Object sender, PaintEventArgs e)
                  {
                     rasterImageViewer1.CalculateTransform();
                     Rectangle rectangle = rasterImageViewer1.PhysicalViewRectangle;
                     Console.WriteLine(@" (" + rectangle.Left + ", " + rectangle.Right + ") , (" + rectangle.Right + ", " + rectangle.Bottom + ")");
                     Console.WriteLine("PostTransformPaint occurs now");
                  }
            
                  private void rasterImageViewer1_PreViewPaint(System.Object sender, PaintEventArgs e)
                  {
                     Console.WriteLine("PreViewPaint occurs now");
                  }
            
                  private void rasterImageViewer1_PostViewPaint(System.Object sender, PaintEventArgs e)
                  {
                     Console.WriteLine("PostViewPaint occurs now");
                  }
            
                  private void InitializeComponent()
                  {
                     System.Resources.ResourceManager resources = new System.Resources.ResourceManager(typeof(Form1));
                     this.rasterImageViewer1 = new RasterImageViewer();
                     this.button1 = new System.Windows.Forms.Button();
                     this.label1 = new System.Windows.Forms.Label();
                     this.SuspendLayout();
                     // 
                     // rasterImageViewer1
                     // 
            
                     this.rasterImageViewer1.AnimateRegion = true;
                     this.rasterImageViewer1.AutoResetScaleFactor = true;
                     this.rasterImageViewer1.AutoResetScrollPosition = true;
                     this.rasterImageViewer1.AutoScroll = true;
                     this.rasterImageViewer1.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
                     this.rasterImageViewer1.CenterMode = RasterViewerCenterMode.None;
                     this.rasterImageViewer1.DoubleBuffer = true;
                     this.rasterImageViewer1.FrameColor = System.Drawing.Color.Black;
                     this.rasterImageViewer1.FrameIsPartOfView = true;
                     this.rasterImageViewer1.FrameShadowColor = System.Drawing.Color.FromArgb(((System.Byte)(128)), ((System.Byte)(0)), ((System.Byte)(0)), ((System.Byte)(0)));
                     this.rasterImageViewer1.FrameShadowIsPartOfView = true;
                     this.rasterImageViewer1.FrameShadowSize = ((System.Drawing.SizeF)(resources.GetObject("rasterImageViewer1.FrameShadowSize")));
                     this.rasterImageViewer1.FrameSize = ((System.Drawing.SizeF)(resources.GetObject("rasterImageViewer1.FrameSize")));
                     this.rasterImageViewer1.InteractiveMode = RasterViewerInteractiveMode.Region;
                     this.rasterImageViewer1.InteractiveRegionCombineMode = RasterRegionCombineMode.Set;
                     this.rasterImageViewer1.InteractiveRegionType = RasterViewerInteractiveRegionType.Rectangle;
                     this.rasterImageViewer1.Location = new System.Drawing.Point(88, 88);
                     this.rasterImageViewer1.Name = "rasterImageViewer1";
                     this.rasterImageViewer1.ScaleFactor = 1F;
                     this.rasterImageViewer1.Size = new System.Drawing.Size(496, 368);
                     this.rasterImageViewer1.SizeMode = RasterViewerSizeMode.Normal;
                     this.rasterImageViewer1.TabIndex = 0;
                     this.rasterImageViewer1.Text = "rasterImageViewer1";
            
                     Leadtools.Codecs.RasterCodecs codecs = new RasterCodecs();
                     Leadtools.Codecs.RasterCodecs.CodecsPath = @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin\";
                     rasterImageViewer1.Image = codecs.Load(@"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\images\image1.Cmp");
                     rasterImageViewer1.FrameShadowColorChanged += new EventHandler(rasterImageViewer1_FrameShadowColorChanged);
                     rasterImageViewer1.FrameShadowIsPartOfViewChanged += new EventHandler(rasterImageViewer1_FrameShadowIsPartOfViewChanged);
                     rasterImageViewer1.FrameShadowSizeChanged += new EventHandler(rasterImageViewer1_FrameShadowSizeChanged);
                     rasterImageViewer1.FrameSizeChanged += new EventHandler(rasterImageViewer1_FrameSizeChanged);
                     rasterImageViewer1.ImageChanged += new EventHandler(rasterImageViewer1_ImageChanged);
                     rasterImageViewer1.FrameColorChanged += new EventHandler(rasterImageViewer1_FrameColorChanged);
                     rasterImageViewer1.FrameIsPartOfViewChanged += new EventHandler(rasterImageViewer1_FrameIsPartOfViewChanged);
                     rasterImageViewer1.DoubleBufferChanged += new System.EventHandler(this.rasterImageViewer1_DoubleBufferChanged);
                     rasterImageViewer1.InteractiveModeChanged += new EventHandler(rasterImageViewer1_InteractiveModeChanged);
                     rasterImageViewer1.InteractiveRegionCombineModeChanged += new EventHandler(rasterImageViewer1_InteractiveRegionCombineModeChanged);
                     rasterImageViewer1.InteractiveRegionEllipse += new RasterViewerRectangleEventHandler(rasterImageViewer1_InteractiveRegionEllipse);
                     rasterImageViewer1.InteractiveRegionTypeChanged += new EventHandler(rasterImageViewer1_InteractiveRegionTypeChanged);
                     rasterImageViewer1.InteractiveZoomTo += new RasterViewerRectangleEventHandler(rasterImageViewer1_InteractiveZoomTo);
                     rasterImageViewer1.ScaleFactorChanged += new EventHandler(rasterImageViewer1_ScaleFactorChanged);
                     rasterImageViewer1.Scroll += new EventHandler(rasterImageViewer1_Scroll);
                     rasterImageViewer1.TransformChanged += new EventHandler(rasterImageViewer1_TransformChanged);
                     rasterImageViewer1.PaintPropertiesChanged += new EventHandler(rasterImageViewer1_PaintPropertiesChanged);
                     rasterImageViewer1.PreTransformPaint += new PaintEventHandler(rasterImageViewer1_PreTransformPaint);
                     rasterImageViewer1.PostTransformPaint += new PaintEventHandler(rasterImageViewer1_PostTransformPaint);
                     rasterImageViewer1.PreViewPaint += new PaintEventHandler(rasterImageViewer1_PreViewPaint);
                     rasterImageViewer1.PostViewPaint += new PaintEventHandler(rasterImageViewer1_PostViewPaint);
                     rasterImageViewer1.InteractiveRegionRectangle += new RasterViewerRectangleEventHandler( MyRasterViewerRectangleEventHandler );
                     rasterImageViewer1.InteractivePan += new RasterViewerLineEventHandler( MyRasterViewerLineEventHandler );
                     rasterImageViewer1.ZoomToRectangle(new Rectangle(0, 0, rasterImageViewer1.Width / 2, rasterImageViewer1.Height / 2));
                     Console.WriteLine("CurrentScaleFactor: (" + rasterImageViewer1.CurrentXScaleFactor + ", " + rasterImageViewer1.CurrentYScaleFactor + ")");
                     Console.WriteLine("Image Dpi: (" + rasterImageViewer1.ImageDpiX + ", " + rasterImageViewer1.ImageDpiY + ")");
                     Console.WriteLine("Image Size: " + rasterImageViewer1.ImageSize.Width + ", " + rasterImageViewer1.ImageSize.Height);
            
                     CenterImage(rasterImageViewer1);
                     // 
                     // button1
                     // 
                     this.button1.Location = new System.Drawing.Point(32, 16);
                     this.button1.Name = "button1";
                     this.button1.Size = new System.Drawing.Size(104, 32);
                     this.button1.TabIndex = 1;
                     this.button1.Text = "button1";
                     this.button1.Click += new System.EventHandler(this.button1_Click);
                     // 
                     // label1
                     // 
                     this.label1.Location = new System.Drawing.Point(264, 8);
                     this.label1.Name = "label1";
                     this.label1.Size = new System.Drawing.Size(192, 16);
                     this.label1.TabIndex = 2;
                     this.label1.Text = "label1";
                     this.label1.Click += new System.EventHandler(this.label1_Click);
                     // 
                     // Form1
                     // 
                     this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
                     this.ClientSize = new System.Drawing.Size(608, 477);
                     this.Controls.Add(this.label1);
                     this.Controls.Add(this.button1);
                     this.Controls.Add(this.rasterImageViewer1);
                     this.Name = "Form1";
                     this.Text = "Form1";
                     this.ResumeLayout(false);
            
                  }
                  private void button1_Click(object sender, System.EventArgs e)
                  {
                     Leadtools.RasterPaintProperties pp;
                     Console.WriteLine(@"" + rasterImageViewer1.Transform.Elements[0] + ", " + rasterImageViewer1.Transform.Elements[1] + ", " + rasterImageViewer1.Transform.Elements[2] + ", " + rasterImageViewer1.Transform.Elements[3] + ", " + rasterImageViewer1.Transform.Elements[4] + ", " + rasterImageViewer1.Transform.Elements[5] + "\n " 
                        + rasterImageViewer1.Transform.IsIdentity
                        + rasterImageViewer1.Transform.IsInvertible
                        + rasterImageViewer1.Transform.OffsetX
                        + rasterImageViewer1.Transform.OffsetY);
            
                     pp = new Leadtools.RasterPaintProperties();
                     pp.RasterOperation = 1;
                     pp.PaintDisplayMode = RasterPaintDisplayModeFlags.Bicubic;
                     pp.PaintEngine = RasterPaintEngine.GdiPlus;
                     pp.UseDpi = false;
                     pp.UsePaintPalette = false;
                     rasterImageViewer1.PaintProperties = pp;
            
                     rasterImageViewer1.CenterAtPoint(new Point(200, 200));
                  }
             </code>
             </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.CurrentYScaleFactor">
            <summary>
            Gets the current vertical scale factor for the image display.
            </summary>
            <value>The current vertical scale factor.</value>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.Scroll">
            <summary>
            Occurs when the image display is scrolled.
            </summary>
            <event>The event handler receives an argument of type EventArgs.</event>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.AutoDisposeImages">
            <summary>
            Gets or sets a value indicating whether to auto dispose the old image when a new image is set into this <see cref="T:Leadtools.WinForms.RasterImageViewer"/>.
            </summary>
            <value>true if the image in <see cref="P:Leadtools.WinForms.RasterImageViewer.Image"/> is automatically disposed when a new image is set; otherwise, false.  Default value is true.</value>
            <remarks>
            By default, whenever you set a new image into the <see cref="P:Leadtools.WinForms.RasterImageViewer.Image"/> property, the old image (if any) is disposed.  Set the value of this property to false to prevent disposing of the old image.
            </remarks>
            <example>
            <p><b>VB.NET</b></p>
            <code>
            ' Load two image2
            RasterCodecs.CodecsPath = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin"
            Dim codecs As New RasterCodecs
            
            Dim image1 As IRasterImage = codecs.Load("C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\Image1.cmp")
            Dim image2 As IRasterImage = codecs.Load("C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\Image2.cmp")
            
            ' Make sure the AutoDisposeImages property of the viewer is set to true
            rasterImageViewer1.AutoDisposeImages = True
            
            ' Set the first image into the viewer
            rasterImageViewer1.Image = image1
            
            ' Now set the second image into the viewer (this disposes the first image since the AutoDisposeImages property is true)
            rasterImageViewer1.Image = image2
            
            ' Try to access the first image, it should through a NullReferenceException exception since the image has been disposed
            Try
               Dim width As Integer = image1.Width
               MessageBox.Show(String.Format("Width is {0} pixels", width))
            Catch ex As NullReferenceException
               MessageBox.Show(ex.Message)
            End Try
            
            ' Set the image to Nothing (will dispose the second image as well)
            RasterImageViewer1.Image = Nothing
            
            ' Now re-load the two images
            image1 = codecs.Load("C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\Image1.cmp")
            image2 = codecs.Load("C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\Image2.cmp")
            
            ' Make sure the AutoDisposeImages property of the viewer is set to false
            RasterImageViewer1.AutoDisposeImages = False
            
            ' Set the first image into the viewer
            RasterImageViewer1.Image = image1
            
            ' Now set the second image into the viewer (this will not disposes the first image since the AutoDisposeImages property is false)
            RasterImageViewer1.Image = image2
            
            ' Try to access the first image, it should work fine this time
            Try
               Dim width As Integer = image1.Width
               MessageBox.Show(String.Format("Width is {0} pixels", width))
            Catch ex As NullReferenceException
               MessageBox.Show(ex.Message)
            End Try
            
            ' Set the image to Nothing (will not dispose the second image)
            RasterImageViewer1.Image = Nothing
            
            ' We should now dispose the two images manually
            image1.Dispose()
            image2.Dispose()
            </code>
            <p><b>C#</b></p>
            <code>
            // Load two image2
            RasterCodecs.CodecsPath = @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin";
            RasterCodecs codecs = new RasterCodecs();
            
            IRasterImage image1 = codecs.Load(@"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\Image1.cmp");
            IRasterImage image2 = codecs.Load(@"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\Image2.cmp");
            
            // Make sure the AutoDisposeImages property of the viewer is set to true
            rasterImageViewer1.AutoDisposeImages = true;
            
            // Set the first image into the viewer
            rasterImageViewer1.Image = image1;
            
            // Now set the second image into the viewer (this disposes the first image since the AutoDisposeImages property is true)
            rasterImageViewer1.Image = image2;
            
            // Try to access the first image, it should through a NullReferenceException exception since the image has been disposed
            try
            {
               int width = image1.Width;
               MessageBox.Show(string.Format("Width is {0} pixels", width));
            }
            catch(NullReferenceException ex)
            {
               MessageBox.Show(ex.Message);
            }
            
            // Set the image to null (will dispose the second image as well)
            rasterImageViewer1.Image = null;
            
            // Now re-load the two images
            image1 = codecs.Load(@"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\Image1.cmp");
            image2 = codecs.Load(@"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\Image2.cmp");
            
            // Make sure the AutoDisposeImages property of the viewer is set to false
            rasterImageViewer1.AutoDisposeImages = false;
            
            // Set the first image into the viewer
            rasterImageViewer1.Image = image1;
            
            // Now set the second image into the viewer (this will not disposes the first image since the AutoDisposeImages property is false)
            rasterImageViewer1.Image = image2;
            
            // Try to access the first image, it should work fine this time
            try
            {
               int width = image1.Width;
               MessageBox.Show(string.Format("Width is {0} pixels", width));
            }
            catch(NullReferenceException ex)
            {
               MessageBox.Show(ex.Message);
            }
            
            // Set the image to null (will not dispose the second image)
            rasterImageViewer1.Image = null;
            
            // We should now dispose the two images manually
            image1.Dispose();
            image2.Dispose();
            </code>
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.AutoDisposeImagesChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.AutoDisposeImages"/> property changes.
            </summary>
            <event>The event handler receives an argument of type <see cref="T:System.EventArgs"/>.</event>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.AutoDisposeImages"/> property is changed.
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.Image">
            <summary>
            Gets and sets the image currently assigned for display by the control.
            </summary>
            <value>The image to be displayed.</value>
            <remarks>Set this property to an IRasterImage object and the control will display it based on the current settings of the other properties of this class.</remarks>
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.ImageChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.Image"/> property changes.
            </summary>
            <event>The event handler receives an argument of type EventArgs.</event>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.Image"/> property is changed by either a programmatic modification or user interaction.<br/>
            Do not confuse this with the <see cref="E:Leadtools.IRasterImage.Changed"/> event.
            </remarks>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.PaintProperties">
            <summary>
            Gets and sets the <see cref="T:Leadtools.RasterPaintProperties"/> which control the display.
            </summary>
            <value>The <see cref="T:Leadtools.RasterPaintProperties"/> which control the display.</value>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.PaintPropertiesChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.PaintProperties"/> property changes.
            </summary>
            <event>The event handler receives an argument of type EventArgs.</event>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.PaintProperties"/> property is changed by either a programmatic modification or user interaction.
            </remarks>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.AnimateRegion">
            <summary>
            Enables or disables animation of the image's region frame.
            </summary>
            <value>true to enable animation of the image's region frame, false for a static frame.</value>
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.AnimateRegionChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.AnimateRegion"/> property changes.
            </summary>
            <event>The event handler receives an argument of type EventArgs.</event>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.AnimateRegion"/> property is changed by either a programmatic modification or user interaction.
            </remarks>
            <example>
            <para><b>C#</b></para>
            <code>
            private RasterImageViewer viewer;
            private void TestAnimateRegionChanged()
            {
               viewer = new RasterImageViewer();         
               viewer.AnimateRegionChanged += new EventHandler(viewer_AnimateRegionChanged);
            }
            private void viewer_AnimateRegionChanged(object sender, EventArgs e)
            {  
               // Do Something
            }
            </code>
            <para><b>VB.NET</b></para>
            <code>
            Private viewer As RasterImageViewer
            Private Sub TestAnimateRegionChanged()
               viewer = New RasterImageViewer
               AddHandler viewer.AnimateRegionChanged, AddressOf viewer_AnimateRegionChanged
            End Sub
            Private Sub viewer_AnimateRegionChanged(ByVal sender As Object, ByVal e As EventArgs)
               'Do Something
            End Sub
            </code>
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.PreTransformPaint">
            <summary>
            Occurs during painting, before the <see cref="P:Leadtools.WinForms.RasterImageViewer.Transform"/> is applied.
            </summary>
            <event>The event handler receives an argument of type <b>PaintEventArgs</b>.</event>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.PreViewPaint">
            <summary>
            Occurs during painting, after the <see cref="P:Leadtools.WinForms.RasterImageViewer.Transform"/> is applied but
            before the image is painted.
            </summary>
            <event>The event handler receives an argument of type <b>PaintEventArgs</b>.</event>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.PostViewPaint">
            <summary>
            Occurs during painting, after the image is painted but before the <see cref="P:Leadtools.WinForms.RasterImageViewer.Transform"/> is restored.
            </summary>
            <event>The event handler receives an argument of type <b>PaintEventArgs</b>.</event>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.PostTransformPaint">
            <summary>
            Occurs during painting, after the image is painted and after the <see cref="P:Leadtools.WinForms.RasterImageViewer.Transform"/> is restored.
            </summary>
            <event>The event handler receives an argument of type <b>PaintEventArgs</b>.</event>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode">
            <summary>
            Gets and sets the value that controls user interaction with the control's display.
            </summary>
            <value>The value which controls the user interaction with the control's display.</value>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.AnimateRegion"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.InteractiveModeChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode"/> property changes.
            </summary>
            <event>The event handler receives an argument of type EventArgs.</event>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode"/> property is changed by either a programmatic modification or user interaction.
            </remarks>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.InteractiveRegionType">
            <summary>
            Gets and sets the value that determines the type of region to create when <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode"/> is set to <see cref="F:Leadtools.WinForms.RasterViewerInteractiveMode.Region"/>
            </summary>
            <value>The type of region to create.</value>
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionTypeChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveRegionType"/> property changes.
            </summary>
            <event>The event handler receives an argument of type EventArgs.</event>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveRegionType"/> property is changed by either a programmatic modification or user interaction.
            </remarks>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.InteractiveRegionCombineMode">
            <summary>
            Gets and sets the region <see cref="T:Leadtools.RasterRegionCombineMode"/> to be used when the
            user creates regions interactively.
            </summary>
            <value>
            The <see cref="T:Leadtools.RasterRegionCombineMode"/> to be 
            used when the user creates regions interactively.
            </value>
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionCombineModeChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveRegionCombineMode"/> property changes.
            </summary>
            <event>The event handler receives an argument of type EventArgs.</event>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveRegionCombineMode"/> property is changed by either a programmatic modification or user interaction.
            </remarks>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.IsInteractiveModeBusy">
            <summary>
            Determines if the user is currently involved in an interactive operation.
            </summary>
            <value>true if the user is currently involved in an interactive operation, false otherwise.</value>
            <remarks>The type of interactive user operation is determined by the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode"/> property.</remarks>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterViewerInteractiveEventArgs.Cancel"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.InteractivePan">
            <summary>
            Occurs when the user performs interactive panning of the image display.
            </summary>
            <event>The event handler receives an argument of type <see cref="T:Leadtools.WinForms.RasterViewerLineEventArgs"/>.</event>
            <remarks>
            Only occurs when the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode"/> property is set to <see cref="F:Leadtools.WinForms.RasterViewerInteractiveMode.Pan"/>.
            </remarks>
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterViewerLineEventHandler"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.InteractiveOffset">
            <summary>
            Occurs when the user performs interactive offsetting of the image display.
            </summary>
            <event>The event handler receives an argument of type <see cref="T:Leadtools.WinForms.RasterViewerLineEventArgs"/>.</event>
            <remarks>
            Only occurs when the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode"/> property is set to <see cref="F:Leadtools.WinForms.RasterViewerInteractiveMode.Offset"/>.
            </remarks>
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterViewerLineEventHandler"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.InteractivePage">
            <summary>
            Occurs when the user performs interactive change of the current page using the mouse.
            </summary>
            <event>The event handler receives an argument of type <see cref="T:Leadtools.WinForms.RasterViewerLineEventArgs"/>.</event>
            <remarks>
            Only occurs when the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode"/> property is set to <see cref="F:Leadtools.WinForms.RasterViewerInteractiveMode.Page"/>.
            </remarks>
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterViewerLineEventHandler"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.InteractiveScale">
            <summary>
            Occurs when the user performs interactive change of the current scale factor using the mouse.
            </summary>
            <event>The event handler receives an argument of type <see cref="T:Leadtools.WinForms.RasterViewerLineEventArgs"/>.</event>
            <remarks>
            Only occurs when the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode"/> property is set to <see cref="F:Leadtools.WinForms.RasterViewerInteractiveMode.Scale"/>.
            </remarks>
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterViewerLineEventHandler"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.InteractiveMagnifyGlass">
            <summary>
            Occurs when the user is using the <see cref="P:Leadtools.WinForms.RasterImageViewer.MagnifyGlass"/>.
            </summary>
            <event>The event handler receives an argument of type <see cref="T:Leadtools.WinForms.RasterViewerLineEventHandler"/>.</event>
            <remarks>
            Only occurs when the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode"/> property is set to <see cref="F:Leadtools.WinForms.RasterViewerInteractiveMode.MagnifyGlass"/>.
            </remarks>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.InteractiveCenterAt">
            <summary>
            Occurs when the user performs interactive center of the image display.
            </summary>
            <event>The event handler receives an argument of type RasterViewerPointEventArgs.</event>
            <remarks>
            Only occurs when the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode"/> property is set to <see cref="F:Leadtools.WinForms.RasterViewerInteractiveMode.CenterAt"/>.
            </remarks>
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterViewerPointEventHandler"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.InteractiveZoomTo">
            <summary>
            Occurs when the user performs interactive center of the image display.
            </summary>
            <event>The event handler receives an argument of type RasterViewerRectangleEventArgs.</event>
            <remarks>
            Only occurs when the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode"/> property is set to <see cref="F:Leadtools.WinForms.RasterViewerInteractiveMode.ZoomTo"/>.
            </remarks>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionRectangle">
            <summary>
            Occurs when the user performs interactive creation of a rectangular region for the image.
            </summary>
            <event>The event handler receives an argument of type RasterViewerRectangleEventArgs.</event>
            <remarks>
            Only occurs when the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode"/> property is set to <see cref="F:Leadtools.WinForms.RasterViewerInteractiveMode.Region"/>
            and the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveRegionType"/> is set to <see cref="F:Leadtools.WinForms.RasterViewerInteractiveRegionType.Rectangle"/>.
            </remarks>
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterViewerRectangleEventHandler"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionEllipse">
            <summary>
            Occurs when the user performs interactive creation of an elliptical region for the image.
            </summary>
            <event>The event handler receives an argument of type RasterViewerRectangleEventArgs.</event>
            <remarks>
            Only occurs when the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode"/> property is set to <see cref="F:Leadtools.WinForms.RasterViewerInteractiveMode.Region"/>
            and the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveRegionType"/> is set to <see cref="F:Leadtools.WinForms.RasterViewerInteractiveRegionType.Ellipse"/>.
            </remarks>
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionFreehand">
            <summary>
            Occurs when the user performs interactive creation of a freehand region for the image.
            </summary>
            <event>The event handler receives an argument of type RasterViewerPointsEventArgs.</event>
            <remarks>
            Only occurs when the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode"/> property is set to <see cref="F:Leadtools.WinForms.RasterViewerInteractiveMode.Region"/>
            and the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveRegionType"/> is set to <see cref="F:Leadtools.WinForms.RasterViewerInteractiveRegionType.Freehand"/>.
            </remarks>
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterViewerPointsEventHandler"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.IsImageAvailable">
            <summary>
            Determines if the control currently has an <see cref="T:Leadtools.IRasterImage"/> object available for display.
            </summary>
            <value>true if an image is available, false otherwise.</value>
            <remarks>If this property returns false, you should not attempt to read the <see cref="P:Leadtools.WinForms.RasterImageViewer.Image"/> property.</remarks>
            <example>Refer to <see cref="T:Leadtools.WinForms.ViewerBorderPadding"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.AutoScrollPosition">
            <summary>
            Gets or sets the location of the auto-scroll position.
            </summary>
            <value>A Point object that represents the auto-scroll position in pixels.</value>
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.MagnifyGlass">
            <summary>
            Gets and sets the <see cref="T:Leadtools.WinForms.RasterMagnifyGlass"/> object used to perform Magnifying Glass operations for this <b>RasterImageViewer</b>.
            </summary>
            <remarks>
            You can derive your own class from <see cref="T:Leadtools.WinForms.RasterMagnifyGlass"/>, and then
            set this property to an instance of that class to perform your own Magnifying Glass
            processing (for example, change the way the crosshair is displayed).
            </remarks>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.MagnifyGlassChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.MagnifyGlass"/> property changes.
            </summary>
            <event>The event handler receives an argument of type <see cref="T:System.EventArgs"/>.</event>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.MagnifyGlass"/> property is changed.
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.FloaterImage">
            <summary>
            Gets or sets the floater image.
            </summary>
            <value>A <see cref="T:Leadtools.IRasterImage"/> object that represents the current floater image.</value>
            <remarks>
            <p>The <see cref="T:Leadtools.WinForms.RasterImageViewer"/> supports a floater image that can be dragged with the mouse when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode"/> is set to <see cref="F:Leadtools.WinForms.RasterViewerInteractiveMode.Floater"/></p>
            <p>If the value of the floater image has a region, then only the region will be painted.  This region can be animated by setting the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.AnimateFloater"/> property to true.</p>
            <p>The position of the floater can be manipulated with the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterPosition"/> property.</p>
            <p>You can use the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterVisible"/> property to control whether to view the floater.</p>
            </remarks>
            <example>
            <p><b>VB.NET</b></p>
            <code>
            Private Sub FloaterTest(ByVal viewer As RasterImageViewer)
               ' hook into the viewer InteractiveModeEnded and DoubleClick events
               AddHandler viewer.InteractiveModeEnded, AddressOf viewer_InteractiveModeEnded
               AddHandler viewer.DoubleClick, AddressOf viewer_DoubleClick
            
               ' first set the interactive mode to draw a freehand region
               viewer.InteractiveRegionType = RasterViewerInteractiveRegionType.Freehand
               viewer.InteractiveRegionCombineMode = RasterRegionCombineMode.Set
               viewer.InteractiveMode = RasterViewerInteractiveMode.Region
            
               MessageBox.Show("Draw a freehand region on the image")
            End Sub
            
            Private Sub viewer_InteractiveModeEnded(ByVal sender As Object, ByVal e As EventArgs)
               ' an interactive mode is done.  check if its drawing a region
               ' if so, convert the region to a floater and set the interactive
               ' mode so that we can drag the floater
               Dim viewer As RasterImageViewer = DirectCast(sender, RasterImageViewer)
               If (viewer.InteractiveMode = RasterViewerInteractiveMode.Region) Then
                  viewer.RegionToFloater()
                  viewer.FloaterVisible = True
                  viewer.AnimateFloater = True
                  viewer.InteractiveMode = RasterViewerInteractiveMode.Floater
            
                  ' delete the region since we do not need it anymore
                  viewer.Image.MakeRegionEmpty()
            
                  MessageBox.Show("Move the floater around, double click anywhere on the viewer to combine it with the image")
               End If
            End Sub
            
            Private Sub viewer_DoubleClick(ByVal sender As Object, ByVal e As EventArgs)
               ' check if the interactive mode is Floater, if so, 
               ' combine the floater with the image.
               Dim viewer As RasterImageViewer = DirectCast(sender, RasterImageViewer)
               If (viewer.InteractiveMode = RasterViewerInteractiveMode.Floater) Then
                  viewer.InteractiveMode = RasterViewerInteractiveMode.None
                  viewer.CombineFloater(True, CombineFastCommandFlags.SourceCopy)
            
                  ' get rid of the floater since we do not need it anymore
                  viewer.FloaterImage = Nothing
                  MessageBox.Show("The floater has been combined with the image")
               End If
            End Sub
            </code>
            <p><b>C#</b></p>
            <code>
            private void FloaterTest(RasterImageViewer viewer)
            {
               // hook into the viewer InteractiveModeEnded and DoubleClick events
               viewer.InteractiveModeEnded += new EventHandler(viewer_InteractiveModeEnded);
               viewer.DoubleClick += new EventHandler(viewer_DoubleClick);
            
               // first set the interactive mode to draw a freehand region
               viewer.InteractiveRegionType = RasterViewerInteractiveRegionType.Freehand;
               viewer.InteractiveRegionCombineMode = RasterRegionCombineMode.Set;
               viewer.InteractiveMode = RasterViewerInteractiveMode.Region;
            
               MessageBox.Show("Draw a freehand region on the image");
            }
            
            private void viewer_InteractiveModeEnded(object sender, EventArgs e)
            {
               // an interactive mode is done.  check if its drawing a region
               // if so, convert the region to a floater and set the interactive
               // mode so that we can drag the floater
               RasterImageViewer viewer = sender as RasterImageViewer;
               if(viewer.InteractiveMode == RasterViewerInteractiveMode.Region)
               {
                  viewer.RegionToFloater();
                  viewer.FloaterVisible = true;
                  viewer.AnimateFloater = true;
                  viewer.InteractiveMode = RasterViewerInteractiveMode.Floater;
            
                  // delete the region since we do not need it anymore
                  viewer.Image.MakeRegionEmpty();
            
                  MessageBox.Show("Move the floater around, double click anywhere on the viewer to combine it with the image");
               }
            }
            
            private void viewer_DoubleClick(object sender, EventArgs e)
            {
               // check if the interactive mode is Floater, if so, 
               // combine the floater with the image.
               RasterImageViewer viewer = sender as RasterImageViewer;
               if(viewer.InteractiveMode == RasterViewerInteractiveMode.Floater)
               {
                  viewer.InteractiveMode = RasterViewerInteractiveMode.None;
                  viewer.CombineFloater(true, CombineFastCommandFlags.SourceCopy);
            
                  // get rid of the floater since we do not need it anymore
                  viewer.FloaterImage = null;
                  MessageBox.Show("The floater has been combined with the image");
               }
            }
            </code>
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.FloaterImageChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage"/> property changes.
            </summary>
            <event>The event handler receives an argument of type <see cref="T:System.EventArgs"/>.</event>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage"/> property is changed.
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.FloaterPosition">
            <summary>
            Gets and sets the position of the floater.
            </summary>
            <value>A <see cref="T:System.Drawing.Point"/> object that represents the top-left position used when painting the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage"/>.</value>
            <remarks>
            <p>You can manually set the value of this property to control where the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage"/> is painted.</p>
            <p>When the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode"/> of this <see cref="T:Leadtools.WinForms.RasterImageViewer"/>is set to <see cref="F:Leadtools.WinForms.RasterViewerInteractiveMode.Floater"/>, the viewer will update the value of this property as the user drags the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage"/> around.</p>
            </remarks>
            <example>
            <p><b>VB.NET</b></p>
            <code>
            Private Sub InteractiveFloaterTest(ByVal viewer As RasterImageViewer)
               ' hook into the viewer InteractiveFloater event to get updated whenever the user moves the floater.
               AddHandler viewer.InteractiveFloater, AddressOf viewer_InteractiveFloater
            
               ' add a floater the viewer and start the floater interactive mode
               ' we are going to create the floater image manually as a red ellipse with a region.
            
               Dim floaterImage As IRasterImage = New RasterImage( _
                  RasterMemoryFlags.Managed, _
                  200, _
                  200, _
                  24, _
                  RasterByteOrder.Bgr, _
                  RasterViewPerspective.TopLeft, _
                  Nothing, _
                  Nothing)
            
               Dim container As RasterImageGdiPlusGraphicsContainer = floaterImage.CreateGdiPlusGraphics()
               container.Graphics.FillRectangle(Brushes.Black, 0, 0, floaterImage.ImageWidth, floaterImage.ImageHeight)
               Container.Graphics.FillEllipse(Brushes.Red, 0, 0, floaterImage.ImageWidth, floaterImage.ImageHeight)
               container.Dispose()
            
               floaterImage.AddColorToRegion(New RasterColor(Color.Red), RasterRegionCombineMode.Set)
            
               viewer.FloaterImage = floaterImage
               viewer.FloaterVisible = True
               viewer.FloaterPosition = New Point(100, 100)
               viewer.InteractiveMode = RasterViewerInteractiveMode.Floater
            
               MessageBox.Show("Click and move the floater")
            End Sub
            
            Private Sub viewer_InteractiveFloater(ByVal sender As Object, ByVal e As RasterViewerPointEventArgs)
               ' show information about the user interaction
               Dim viewer As RasterImageViewer = DirectCast(sender, RasterImageViewer)
               Console.WriteLine("Status: {0}, Canceled: {1}, Point: {2}, Floater Position: {3}", e.Status, e.Cancel, e.Point, viewer.FloaterPosition)
            End Sub
            </code>
            <p><b>C#</b></p>
            <code>
            private void InteractiveFloaterTest(RasterImageViewer viewer)
            {
               // hook into the viewer InteractiveFloater event to get updated whenever the user moves the floater.
               viewer.InteractiveFloater += new RasterViewerPointEventHandler(viewer_InteractiveFloater);
            
               // add a floater the viewer and start the floater interactive mode
               // we are going to create the floater image manually as a red ellipse with a region.
            
               IRasterImage floaterImage = new RasterImage(
                  RasterMemoryFlags.Managed,
                  200,
                  200,
                  24,
                  RasterByteOrder.Bgr,
                  RasterViewPerspective.TopLeft,
                  null,
                  null);
               using(RasterImageGdiPlusGraphicsContainer container = floaterImage.CreateGdiPlusGraphics())
               {
                  container.Graphics.FillRectangle(Brushes.Black, 0, 0, floaterImage.ImageWidth, floaterImage.ImageHeight);
                  container.Graphics.FillEllipse(Brushes.Red, 0, 0, floaterImage.ImageWidth, floaterImage.ImageHeight);
               }
            
               floaterImage.AddColorToRegion(new RasterColor(Color.Red), RasterRegionCombineMode.Set);
            
               viewer.FloaterImage = floaterImage;
               viewer.FloaterVisible = true;
               viewer.FloaterPosition = new Point(100, 100);
               viewer.InteractiveMode = RasterViewerInteractiveMode.Floater;
            
               MessageBox.Show("Click and move the floater");
            }
            
            private void viewer_InteractiveFloater(object sender, RasterViewerPointEventArgs e)
            {
               // show information about the user interaction
               RasterImageViewer viewer = sender as RasterImageViewer;
               Console.WriteLine("Status: {0}, Canceled: {1}, Point: {2}, Floater Position: {3}", e.Status, e.Cancel, e.Point, viewer.FloaterPosition);
            }
            </code>
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.FloaterPositionChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterPosition"/> property changes.
            </summary>
            <event>The event handler receives an argument of type <see cref="T:System.EventArgs"/>.</event>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterPosition"/> property is changed.
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.FloaterVisible">
            <summary>
            Gets or sets a value indicating whether to paint the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage"/>
            </summary>
            <value>true if this <see cref="T:Leadtools.WinForms.RasterImageViewer"/> should paint the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage"/> if available; otherwise, false.</value>
            <remarks>
            The <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage"/> is painted at the position specified by <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterPosition"/>.
            </remarks>
            <example>
            Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterPosition"/>.
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.FloaterVisibleChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterVisible"/> property changes.
            </summary>
            <event>The event handler receives an argument of type <see cref="T:System.EventArgs"/>.</event>
            <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterVisible"/> property is changed.
            </remarks>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.InteractiveFloater">
            <summary>
            Occurs when the user is using the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode"/> to move the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage"/>.
            </summary>
            <event>The event handler receives an argument of type <see cref="T:Leadtools.WinForms.RasterViewerPointEventHandler"/>.</event>
            <remarks>
            Only occurs when the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode"/> property is set to <see cref="F:Leadtools.WinForms.RasterViewerInteractiveMode.Floater"/>.
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.AnimateFloater">
            <summary>
            Gets or sets a value indicating whether to animate the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage"/>.
            </summary>
            <value>true to enable animation of the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage"/> if available; otherwise, false.</value>
            <example>
            Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage"/>.
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.AnimateFloaterChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.AnimateFloater"/> property changes.
            </summary>
            <event>The event handler receives an argument of type <see cref="T:System.EventArgs"/>.</event>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.InteractiveModeEnded">
            <summary>
            Occurs when the operation of the current <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode"/> ended successfully.
            </summary>
            <event>The event handler receives an argument of type <see cref="T:System.EventArgs"/>.</event>
            <example>
            Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage"/>.
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.RightAlignImage">
            <summary>
            Gets or sets a value indicating whether image will be displayed aligned to the right or not.
            </summary>
            <value><b>true</b> to align the image to the right; otherwise, <b>false</b>. The default is <b>false</b>.</value>
            <remarks>
            <p>When the <see cref="P:Leadtools.WinForms.RasterImageViewer.SizeMode"/> is set to <see cref="F:Leadtools.WinForms.RasterViewerSizeMode.Normal"/>, the image
            will be aligned to either the left or right of the control depending on the valut of the
            <see cref="P:Leadtools.WinForms.RasterImageViewer.RightAlignImage"/> property.</p>
            </remarks>
            <example>
            Align the image of the viewer to the right.
            <p><b>VB.NET</b></p>
            <code>
            rasterImageViewer1.RightAlignImage = True
            </code>
            <p><b>C#</b></p>
            <code>
            rasterImageViewer1.RightAlignImage = true;
            </code>
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.RightAlignImageChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.RightAlignImage"/> property changes.
            </summary>
            <event>The event handler receives an argument of type EventArgs.</event>
            <remarks>
            This event is raised if the <see cref="E:Leadtools.WinForms.RasterImageViewer.RightAlignImageChanged"/> property is changed by either a programmatic modification or user interaction.
            </remarks>
        </member>
        <member name="P:Leadtools.WinForms.RasterImageViewer.EnableKeyboard">
            <summary>
            Gets or sets a value indicating whether the control automatically processes the keyboard.
            </summary>
            <value><b>true</b> if the control automatically processes the keyboard; otherwise, false.
            Default value is <b>true</b>.</value>
            <remarks>
            <p>When automatic keyboard processing is enabled, the <see cref="T:Leadtools.WinForms.RasterImageViewer"/> Control will process
            the following keys:
            <list type="table">
              <listheader>
                 <term>Key</term>
                 <description>Event</description>
               </listheader>
               <item><see cref="F:System.Windows.Forms.Keys.Up"/></item>
               <description>Scrolls up.</description>
               <item><see cref="F:System.Windows.Forms.Keys.Down"/></item>
               <description>Scrolls down.</description>
               <item><see cref="F:System.Windows.Forms.Keys.Left"/></item>
               <description>Scrolls left.</description>
               <item><see cref="F:System.Windows.Forms.Keys.Right"/></item>
               <description>Scrolls right.</description>
               <item><see cref="F:System.Windows.Forms.Keys.PageUp"/></item>
               <description>Scrolls up one page.</description>
               <item><see cref="F:System.Windows.Forms.Keys.PageDown"/></item>
               <description>Scrolls down one page.</description>
               <item><see cref="F:System.Windows.Forms.Keys.Home"/></item>
               <description>Scrolls back to 0, 0.</description>
               <item><see cref="F:System.Windows.Forms.Keys.End"/></item>
               <description>Scrolls down to maximum width and height.</description>
            </list>
            </p>
            <p>The scrolling is only valid of the value of <see cref="P:System.Windows.Forms.ScrollableControl.AutoScroll"/> is set to <b>true</b></p>
            <p>Holding down the control key while pressing up, down, left or right will scroll by a page to the
            appropriate direction.</p>
            </remarks>
            <example>
            Enable automatic keyboard processing in the <see cref="T:Leadtools.WinForms.RasterImageList"/>
            <p><b>VB.NET</b></p>
            <code>
            rasterImageViewer1.EnableKeyboard = True
            </code>
            <p><b>C#</b></p>
            <code>
            rasterImageViewer1.EnableKeyboard = true;
            </code>
            </example>
        </member>
        <member name="E:Leadtools.WinForms.RasterImageViewer.EnableKeyboardChanged">
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.EnableKeyboard"/> property changes.
            </summary>
            <remarks>
            <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.EnableKeyboard"/> property is changed by either a programmatic
            modification or user interaction.</p>
            </remarks>
        </member>
        <member name="T:Leadtools.WinForms.ViewerBorderPadding">
            <summary>
            Determines the border padding for Leadtools ImageViewer controls.
            </summary>
            <example>
            <para><b>VB.NET</b></para>
            <code>
               Imports Leadtools.WinForms
            
               'This sample draws the image in the middle of the RasterImageViewer if the image size is smaller than the viewable area.
               Private Sub CenterImage(ByVal rasterImageViewer As RasterImageViewer)
                   If (rasterImageViewer.IsImageAvailable) Then
                       If (rasterImageViewer.Image.IsAllocated) Then
                           Dim viewerWidth As Integer = rasterImageViewer.Right - rasterImageViewer.Left
                           Dim viewerHeight As Integer = rasterImageViewer.Bottom - rasterImageViewer.Top
                           Dim imageWidth As Integer = rasterImageViewer.Image.Width
                           Dim imageHeight As Integer = rasterImageViewer.Image.Height
            
                           If (imageWidth &lt; viewerWidth) Then
                               rasterImageViewer.BorderPadding.Left = (viewerWidth - imageWidth) \ 2
                           Else
                               rasterImageViewer.BorderPadding.Left = 0
                           End If
                           If (imageHeight &lt; viewerHeight) Then
                               rasterImageViewer.BorderPadding.Top = (viewerHeight - imageHeight) \ 2
                           Else
                               rasterImageViewer.BorderPadding.Top = 0
                           End If
                       End If
                   End If
               End Sub
            </code>
            <para><b>C#</b></para>
            <code>
                 using Leadtools.WinForms;
            
                 //This sample draws the image in the middle of the RasterImageViewer if the image size is smaller than the viewable area..
                 private void CenterImage( RasterImageViewer rasterImageViewer )
                 {
                    if( rasterImageViewer.IsImageAvailable == true )
                    {
                       if( rasterImageViewer.Image.IsAllocated == true )
                       {
                          int viewerWidth = rasterImageViewer.Right - rasterImageViewer.Left;
                          int viewerHeight = rasterImageViewer.Bottom - rasterImageViewer.Top;
                          int imageWidth = rasterImageViewer.Image.Width;
                          int imageHeight = rasterImageViewer.Image.Height;
                       			
                          if( imageWidth &lt; viewerWidth)
                             rasterImageViewer.BorderPadding.Left = (viewerWidth - imageWidth) / 2;
                          else
                             rasterImageViewer.BorderPadding.Left = 0;
                       
                          if( imageHeight &lt; viewerHeight )
                             rasterImageViewer.BorderPadding.Top = (viewerHeight - imageHeight) / 2;
                          else
                             rasterImageViewer.BorderPadding.Top = 0;
                       }
                    }
                 }
            </code>
            </example>
        </member>
        <member name="M:Leadtools.WinForms.ViewerBorderPadding.#ctor">
            <summary>
            Initializes a new ViewerBorderPadding with default parameters.
            </summary>
            <example>
            <para><b>VB.NET</b></para>
            <code>
               Imports Leadtools.WinForms
            
               Private Sub BorderPadding_Changed(ByVal sender As System.Object, ByVal e As EventArgs)
                   Console.WriteLine("BorderPadding Changed")
               End Sub
               'This sample draws the image in the middle of the RasterImageViewer if the image size is smaller than the viewable area..
               Private Sub CenterImage(ByVal rasterImageViewer As RasterImageViewer)
                   If (rasterImageViewer.IsImageAvailable = True) Then
                       If (rasterImageViewer.Image.IsAllocated = True) Then
            
                           Dim viewer As ViewerBorderPadding = New ViewerBorderPadding
                           AddHandler rasterImageViewer.BorderPadding.Changed, AddressOf BorderPadding_Changed
                           rasterImageViewer.BorderPadding.All = 0
                           Dim viewerWidth As Integer = rasterImageViewer.Right - rasterImageViewer.Left
                           Dim viewerHeight As Integer = rasterImageViewer.Bottom - rasterImageViewer.Top
                           Dim imageWidth As Integer = rasterImageViewer.Image.Width
                           Dim imageHeight As Integer = rasterImageViewer.Image.Height
            
                           If (imageWidth &lt; viewerWidth) Then
                               rasterImageViewer.BorderPadding.Left = (viewerWidth - imageWidth) \ 2
                               rasterImageViewer.BorderPadding.Right = 0
                           End If
            
                           If (imageHeight &lt; viewerHeight) Then
                               rasterImageViewer.BorderPadding.Top = (viewerHeight - imageHeight) \ 2
                               rasterImageViewer.BorderPadding.Bottom = 0
                           End If
                           viewer = rasterImageViewer.BorderPadding.Clone()
                       End If
                   End If
               End Sub
            </code>
            <para><b>C#</b></para>
            <code>
                 using Leadtools.WinForms;
            
                 private void BorderPadding_Changed(System.Object sender, EventArgs e)
                 {
                    Console.WriteLine("BorderPadding Changed");
                 }
                 //This sample draws the image in the middle of the RasterImageViewer if the image size is smaller than the viewable area..
                 private void CenterImage( RasterImageViewer rasterImageViewer )
                 {
                    if( rasterImageViewer.IsImageAvailable == true )
                    {
                       if( rasterImageViewer.Image.IsAllocated == true )
                       {
                          ViewerBorderPadding viewer = new ViewerBorderPadding();
                          rasterImageViewer.BorderPadding.Changed += new EventHandler(BorderPadding_Changed);
                          rasterImageViewer.BorderPadding.All = 0;
                          int viewerWidth = rasterImageViewer.Right - rasterImageViewer.Left;
                          int viewerHeight = rasterImageViewer.Bottom - rasterImageViewer.Top;
                          int imageWidth = rasterImageViewer.Image.Width;
                          int imageHeight = rasterImageViewer.Image.Height;
            
                          if( imageWidth &lt; viewerWidth)
                          {
                             rasterImageViewer.BorderPadding.Left = (viewerWidth - imageWidth) / 2;
                             rasterImageViewer.BorderPadding.Right = 0;
                          }
            
                          if( imageHeight &lt; viewerHeight )
                          {
                             rasterImageViewer.BorderPadding.Top = (viewerHeight - imageHeight) / 2;
                             rasterImageViewer.BorderPadding.Bottom = 0;
                          }
                          viewer = rasterImageViewer.BorderPadding.Clone();
                       }
                    }
                 }
            </code>
            </example>
        </member>
        <member name="M:Leadtools.WinForms.ViewerBorderPadding.Clone">
            <summary>
            Creates another object that contains the same state as the current one.<br/>
            </summary>
            <returns>The new object.</returns>
            <example>Refer to <see cref="M:Leadtools.WinForms.ViewerBorderPadding.#ctor"/>.</example>
        </member>
        <member name="E:Leadtools.WinForms.ViewerBorderPadding.Changed">
            <summary>
            Occurs when the viewer border padding changes.
            </summary>
            <event>The event handler receives an argument of type EventArgs.</event>
            <example>Refer to <see cref="M:Leadtools.WinForms.ViewerBorderPadding.#ctor"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.ViewerBorderPadding.Left">
            <summary>
            Gets or sets the padding width for the left edge of a viewer control.
            </summary>
            <value>The padding width in pixels.</value>
            <example>Refer to <see cref="T:Leadtools.WinForms.ViewerBorderPadding"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.ViewerBorderPadding.Top">
            <summary>
            Gets or sets the padding width for the top edge of a viewer control.
            </summary>
            <value>The padding width in pixels.</value>
            <example>Refer to <see cref="T:Leadtools.WinForms.ViewerBorderPadding"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.ViewerBorderPadding.Right">
            <summary>
            Gets or sets the padding width for the right edge of a viewer control.
            </summary>
            <value>The padding width in pixels.</value>
            <example>Refer to <see cref="M:Leadtools.WinForms.ViewerBorderPadding.#ctor"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.ViewerBorderPadding.Bottom">
            <summary>
            Gets or sets the padding width for the bottom edge of a viewer control.
            </summary>
            <value>The padding width in pixels.</value>
            <example>Refer to <see cref="M:Leadtools.WinForms.ViewerBorderPadding.#ctor"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.ViewerBorderPadding.All">
            <summary>
            Gets or sets the padding width for all edges of a viewer control.
            </summary>
            <value>The padding width in pixels.</value>
            <example>Refer to <see cref="M:Leadtools.WinForms.ViewerBorderPadding.#ctor"/>.</example>
        </member>
        <member name="T:Leadtools.WinForms.RasterViewerInteractiveStatus">
            <summary>
            The status of the interactive mode.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterViewerInteractiveStatus.Begin">
            <summary>
            The interactive mode has started.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterViewerInteractiveStatus.Working">
            <summary>
            The interactive mode is in progress.
            </summary>
        </member>
        <member name="F:Leadtools.WinForms.RasterViewerInteractiveStatus.End">
            <summary>
            The interactive mode ended or has been canceled.
            </summary>
        </member>
        <member name="T:Leadtools.WinForms.RasterViewerInteractiveEventArgs">
            <summary>
            Base class for other <see cref="T:Leadtools.WinForms.RasterImageViewer"/> interactive events.
            </summary>
        </member>
        <member name="M:Leadtools.WinForms.RasterViewerInteractiveEventArgs.#ctor">
            <summary>
            Initializes a new RasterViewerInteractiveEventArgs with default parameters.
            </summary>
        </member>
        <member name="M:Leadtools.WinForms.RasterViewerInteractiveEventArgs.#ctor(Leadtools.WinForms.RasterViewerInteractiveStatus)">
            <summary>
            Initializes a new RasterViewerInteractiveEventArgs with specified parameters.
            </summary>
            <param name="status">The status of the interactive mode.</param>
        </member>
        <member name="P:Leadtools.WinForms.RasterViewerInteractiveEventArgs.Status">
            <summary>
            Gets the current status of the interactive mode.
            </summary>      
            <example>Refer to <see cref="P:Leadtools.WinForms.RasterViewerInteractiveEventArgs.Cancel"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.RasterViewerInteractiveEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the interactive mode should be canceled.
            </summary>
            <value>true if the interactive mode should be canceled; otherwise, false.</value>
            <example>
            <para><b>VB.NET</b></para>
            <code>
               Imports Leadtools.WinForms
               Imports Leadtools.Codecs
            
               Private Sub MyRasterViewerRectangleEventHandler(ByVal sender As System.Object, ByVal e As RasterViewerRectangleEventArgs)
                   Dim ee As RasterViewerRectangleEventArgs = New RasterViewerRectangleEventArgs(e.Status, e.Rectangle)
                   If (((ee.Rectangle.Left &gt; ee.Rectangle.Right) Or (ee.Rectangle.Top &gt; ee.Rectangle.Bottom)) And ee.Status = RasterViewerInteractiveStatus.End) Then
                       e.Cancel = True
                       MessageBox.Show("Not Allowed")
                       RasterImageViewer1.Invalidate()
                       If Not (RasterImageViewer1.IsInteractiveModeBusy) Then
                           RasterImageViewer1.InteractiveMode = RasterViewerInteractiveMode.None
                       End If
                   End If
                   Console.WriteLine(" {0} {1} {2} {3}", e.Rectangle.Left, e.Rectangle.Right, e.Rectangle.Top, e.Rectangle.Bottom)
               End Sub
            
               Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
                   AddHandler RasterImageViewer1.InteractiveRegionRectangle, New RasterViewerRectangleEventHandler(AddressOf MyRasterViewerRectangleEventHandler)
                   RasterImageViewer1.InteractiveMode = RasterViewerInteractiveMode.Region
                   RasterImageViewer1.InteractiveRegionType = RasterViewerInteractiveRegionType.Rectangle
            
                   Dim codec As RasterCodecs = New RasterCodecs
                   RasterCodecs.CodecsPath = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin"
                   RasterImageViewer1.Image = codec.Load("C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\sample5.cmp")
               End Sub
            </code>
            <para><b>C#</b></para>
            <code>
                 using Leadtools.WinForms;
                 using Leadtools.Codecs;
            
                 private void button1_Click(object sender, System.EventArgs e)
                 {
                    rasterImageViewer1.InteractiveRegionRectangle += new RasterViewerRectangleEventHandler( MyRasterViewerRectangleEventHandler );
                    rasterImageViewer1.InteractiveMode = RasterViewerInteractiveMode.Region;
                    rasterImageViewer1.InteractiveRegionType = RasterViewerInteractiveRegionType.Rectangle;
                    RasterCodecs codecs = new RasterCodecs();
                    rasterImageViewer1.Image = codecs.Load( @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\sample5.cmp" );
                 }
            
                 private void MyRasterViewerRectangleEventHandler( object sender,	RasterViewerRectangleEventArgs e)
                 {
                    RasterViewerRectangleEventArgs ee = new RasterViewerRectangleEventArgs(e.Status, e.Rectangle);
                    if ( ((ee.Rectangle.Left &gt; ee.Rectangle.Right) || (ee.Rectangle.Top &gt; ee.Rectangle.Bottom)) &amp;&amp; ee.Status == RasterViewerInteractiveStatus.End)
                    {
                       e.Cancel = true;
                       MessageBox.Show("Not Allowed");
                       rasterImageViewer1.Invalidate();
                       if (!rasterImageViewer1.IsInteractiveModeBusy)
                          rasterImageViewer1.InteractiveMode = RasterViewerInteractiveMode.None;
                    }
                    Console.WriteLine(@"" + ee.Rectangle.Left + ", " + ee.Rectangle.Top + ", " + ee.Rectangle.Right + ", " + ee.Rectangle.Bottom);
                 }
            </code>
            </example>
        </member>
        <member name="T:Leadtools.WinForms.RasterViewerLineEventHandler">
            <summary>
            Represents the method that will handle the various <see cref="T:Leadtools.WinForms.RasterImageViewer"/> user interaction events.
            </summary>
            <parameters>
            The declaration of your event handler must have the same parameters as the RasterViewerLineEventHandler delegate declaration.
            <param name="sender">The source of the event.</param>
            <param name="e">A RasterViewerLineEventArgs that contains the event data.</param>
            </parameters>
            <remarks>
            Use this delegate to handle the following events:
            <list>
            <item><description><see cref="E:Leadtools.WinForms.RasterImageViewer.InteractivePan"/></description></item>
            </list>
            </remarks>
            <example>
            <para><b>VB.NET</b></para>
            <code>
            Private Sub MyRasterViewerLineEventHandler(ByVal sender As System.Object, ByVal e As RasterViewerLineEventArgs)
               Console.WriteLine(" {0} {1} -- {2} {3}", e.Begin.X, e.Begin.Y, e.End.X, e.End.Y)
            End Sub
            
            Private Sub Button1_Click_1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
               AddHandler RasterImageViewer1.InteractivePan, New RasterViewerLineEventHandler(AddressOf MyRasterViewerLineEventHandler)
               RasterImageViewer1.InteractiveMode = RasterViewerInteractiveMode.Pan
            
               Dim codec As RasterCodecs = New Leadtools.Codecs.RasterCodecs
               RasterCodecs.CodecsPath = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin"
               RasterImageViewer1.Image = codec.Load("C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\sample5.cmp")
            End Sub
            </code>
            <para><b>C#</b></para>
            <code>
            rasterImageViewer1.InteractivePan += new RasterViewerLineEventHandler( MyRasterViewerLineEventHandler );
            rasterImageViewer1.InteractiveMode = RasterViewerInteractiveMode.Pan;
            RasterCodecs codecs = new RasterCodecs();
            rasterImageViewer1.Image = codecs.Load( @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\sample5.cmp" );
            
            private void MyRasterViewerLineEventHandler( object sender, RasterViewerLineEventArgs e )
            {
               Console.WriteLine(" {0} {1} -- {2} {3}", e.Begin.X, e.Begin.Y, e.End.X, e.End.Y );
            }
            </code>
            </example>
        </member>
        <member name="T:Leadtools.WinForms.RasterViewerLineEventArgs">
            <summary>
            Provides data for various RasterImageViewer user interaction events.
            </summary>
            <remarks>
            Use this class when handling the following events:
            <list>
            <item><description><see cref="E:Leadtools.WinForms.RasterImageViewer.InteractivePan"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterViewerLineEventArgs.#ctor">
            <summary>
            Initializes a new RasterViewerLineEventArgs with default values.
            </summary>
        </member>
        <member name="M:Leadtools.WinForms.RasterViewerLineEventArgs.#ctor(Leadtools.WinForms.RasterViewerInteractiveStatus,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new RasterViewerLineEventArgs with specified values.
            </summary>
            <param name="status">The status of the interactive mode.</param>
            <param name="beginPoint">The beginning point for the interactive mode line.</param>
            <param name="endPoint">The end point for the interactive mode line.</param>
            <example>
            <para><b>VB.NET</b></para>
            <code>
               Imports Leadtools.WinForms
               Imports Leadtools.Codecs
            
               Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
                   AddHandler RasterImageViewer1.InteractivePan, New RasterViewerLineEventHandler(AddressOf MyRasterViewerLineEventHandler)
                   RasterImageViewer1.InteractiveMode = RasterViewerInteractiveMode.Pan
            
                   Dim codec As RasterCodecs = New RasterCodecs
                   RasterCodecs.CodecsPath = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin"
                   RasterImageViewer1.Image = codec.Load("C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\sample5.cmp")
               End Sub
            
               Private Sub MyRasterViewerLineEventHandler(ByVal sender As System.Object, ByVal e As RasterViewerLineEventArgs)
                   Dim ee As RasterViewerLineEventArgs = New RasterViewerLineEventArgs(e.Status, e.Begin, e.End)
                   Console.WriteLine("{0} {1} -- {2} {3}", ee.Begin.X, ee.Begin.Y, ee.End.X, ee.End.Y)
               End Sub
            </code>
            <para><b>C#</b></para>
            <code>
                 using Leadtools.WinForms;
                 using Leadtools.Codecs;
            
                 private void button1_Click(object sender, System.EventArgs e)
                 {
                    rasterImageViewer1.InteractivePan += new RasterViewerLineEventHandler( MyRasterViewerLineEventHandler );
                    rasterImageViewer1.InteractiveMode = RasterViewerInteractiveMode.Pan;
                    RasterCodecs codecs = new RasterCodecs();
                    rasterImageViewer1.Image = codecs.Load( @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\sample5.cmp" );
                 }
            
                 private void MyRasterViewerLineEventHandler( object sender, RasterViewerLineEventArgs e )
                 {
                    RasterViewerLineEventArgs ee = new RasterViewerLineEventArgs(e.Status, e.Begin, e.End);
                    Console.WriteLine(" {0} {1} -- {2} {3}", ee.Begin.X, ee.Begin.Y, ee.End.X, ee.End.Y );
                 }
            </code>
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterViewerLineEventArgs.Begin">
            <summary>
            Returns the beginning point for the current interactive mode line.
            </summary>      
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterViewerLineEventHandler"/>.</example>
        </member>
        <member name="P:Leadtools.WinForms.RasterViewerLineEventArgs.End">
            <summary>
            Returns the end point for the current interactive mode line.
            </summary>      
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterViewerLineEventHandler"/>.</example>
        </member>
        <member name="T:Leadtools.WinForms.RasterViewerPointEventHandler">
            <summary>
            Represents the method that will handle the various <see cref="T:Leadtools.WinForms.RasterImageViewer"/> user interaction events.
            </summary>
            <parameters>
            The declaration of your event handler must have the same parameters as the RasterViewerLineEventHandler delegate declaration.
            <param name="sender">The source of the event.</param>
            <param name="e">A RasterViewerLineEventArgs that contains the event data.</param>
            </parameters>
            <remarks>
            Use this delegate to handle the following events:
            <list>
            <item><description><see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveCenterAt"/></description></item>
            </list>
            </remarks>
            <example>
            <para><b>VB.NET</b></para>
            <code>
            Private Sub MyRasterViewerPointEventHandler(ByVal sender As System.Object, ByVal e As RasterViewerPointEventArgs)
               Console.WriteLine(" {0} {1}", e.Point.X, e.Point.Y)
            End Sub
            
            Private Sub Button2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button2.Click
               AddHandler RasterImageViewer1.InteractiveCenterAt, New RasterViewerPointEventHandler(AddressOf MyRasterViewerPointEventHandler)
               RasterImageViewer1.InteractiveMode = RasterViewerInteractiveMode.CenterAt
            
               Dim codec As RasterCodecs = New Leadtools.Codecs.RasterCodecs
               RasterCodecs.CodecsPath = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin"
               RasterImageViewer1.Image = codec.Load("C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\sample5.cmp")
            End Sub
            </code>
            <para><b>C#</b></para>
            <code>
            rasterImageViewer1.InteractiveCenterAt += new RasterViewerPointEventHandler( MyRasterViewerPointEventHandler );
            rasterImageViewer1.InteractiveMode = RasterViewerInteractiveMode.CenterAt;
            RasterCodecs codecs = new RasterCodecs();
            rasterImageViewer1.Image = codecs.Load( @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\sample5.cmp" );
            
            private void MyRasterViewerPointEventHandler( object sender, RasterViewerPointEventArgs e )
            {
               Console.WriteLine(" {0} {1}", e.Point.X, e.Point.Y );
            }
            </code>
            </example>
        </member>
        <member name="T:Leadtools.WinForms.RasterViewerPointEventArgs">
            <summary>
            Provides data for various RasterImageViewer user interaction events.
            </summary>
            <remarks>
            Use this class when handling the following events:
            <list>
            <item><description><see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveCenterAt"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterViewerPointEventArgs.#ctor">
            <summary>
            Initializes a new RasterViewerPointEventArgs with default values.
            </summary>
        </member>
        <member name="M:Leadtools.WinForms.RasterViewerPointEventArgs.#ctor(Leadtools.WinForms.RasterViewerInteractiveStatus,System.Drawing.Point)">
            <summary>
            Initializes a new RasterViewerPointEventArgs with specified values.
            </summary>
            <param name="status">The status of the interactive mode.</param>
            <param name="pt">The event data.</param>
            <example>
            <para><b>VB.NET</b></para>
            <code>
               Imports Leadtools.WinForms
               Imports Leadtools.Codecs
            
               Private Sub MyRasterViewerPointEventHandler(ByVal sender As System.Object, ByVal e As RasterViewerPointEventArgs)
                   Dim ee As RasterViewerPointEventArgs = New RasterViewerPointEventArgs(e.Status, e.Point)
                   Console.WriteLine(" {0} {1}", ee.Point.X, ee.Point.Y)
               End Sub
            
               Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
                   AddHandler RasterImageViewer1.InteractiveCenterAt, New RasterViewerPointEventHandler(AddressOf MyRasterViewerPointEventHandler)
                   RasterImageViewer1.InteractiveMode = RasterViewerInteractiveMode.CenterAt
            
                   Dim codec As RasterCodecs = New RasterCodecs
                   RasterCodecs.CodecsPath = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin"
                   RasterImageViewer1.Image = codec.Load("C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\sample5.cmp")
               End Sub
            </code>
            <para><b>C#</b></para>
            <code>
                 using Leadtools.WinForms;
                 using Leadtools.Codecs;
            
                 private void button1_Click(object sender, System.EventArgs e)
                 {
                    rasterImageViewer1.InteractiveCenterAt += new RasterViewerPointEventHandler( MyRasterViewerPointEventHandler );
                    rasterImageViewer1.InteractiveMode = RasterViewerInteractiveMode.CenterAt;
                    RasterCodecs codecs = new RasterCodecs();
                    rasterImageViewer1.Image = codecs.Load( @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\sample5.cmp" );
                 }
            
                 private void MyRasterViewerPointEventHandler( object sender, RasterViewerPointEventArgs e )
                 {
                    RasterViewerPointEventArgs ee = new RasterViewerPointEventArgs(e.Status, e.Point);
                    Console.WriteLine(" {0} {1}", ee.Point.X, ee.Point.Y );
                 }
            </code>
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterViewerPointEventArgs.Point">
            <summary>
            Gets the interactive mode event data.
            </summary>
            <value>The interactive mode event data.</value>
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterViewerPointEventHandler"/>.</example>
        </member>
        <member name="T:Leadtools.WinForms.RasterViewerPointsEventHandler">
            <summary>
            Represents the method that will handle the various <see cref="T:Leadtools.WinForms.RasterImageViewer"/> user interaction events.
            </summary>
            <parameters>
            The declaration of your event handler must have the same parameters as the RasterViewerLineEventHandler delegate declaration.
            <param name="sender">The source of the event.</param>
            <param name="e">A RasterViewerLineEventArgs that contains the event data.</param>
            </parameters>
            <remarks>
            Use this delegate to handle the following events:
            <list>
            <item><description><see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionFreehand"/></description></item>
            </list>
            </remarks>
            <example>
            <para><b>VB.NET</b></para>
            <code>
            Private Sub MyRasterViewerPointsEventHandler(ByVal sender As System.Object, ByVal e As RasterViewerPointsEventArgs)
               Console.WriteLine("new set")
               Dim i, Count As Integer
               Count = e.Points.Count - 1
               For i = 0 To Count
                  Console.WriteLine(" {0} {1}", e.Points(i).X, e.Points(i).Y)
               Next
            End Sub
            
            Private Sub Button3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button3.Click
            
               AddHandler RasterImageViewer1.InteractiveRegionFreehand, New RasterViewerPointsEventHandler(AddressOf MyRasterViewerPointsEventHandler)
               RasterImageViewer1.InteractiveMode = RasterViewerInteractiveMode.Region
               RasterImageViewer1.InteractiveRegionType = RasterViewerInteractiveRegionType.Freehand
            
               Dim codec As RasterCodecs = New Leadtools.Codecs.RasterCodecs
               RasterCodecs.CodecsPath = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin"
               RasterImageViewer1.Image = codec.Load("C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\sample5.cmp")
            End Sub
            </code>
            <para><b>C#</b></para>
            <code>
            rasterImageViewer1.InteractiveRegionFreehand += new RasterViewerPointsEventHandler( MyRasterViewerPointsEventHandler );
            rasterImageViewer1.InteractiveMode = RasterViewerInteractiveMode.Region;
            rasterImageViewer1.InteractiveRegionType = RasterViewerInteractiveRegionType.Freehand;
            RasterCodecs codecs = new RasterCodecs();
            rasterImageViewer1.Image = codecs.Load( @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\sample5.cmp" );
               
            private void MyRasterViewerPointsEventHandler( object sender, RasterViewerPointsEventArgs e )
            {
               Console.WriteLine("zz");			
               for( int i=0; i&lt;e.Points.Count; i++ )
               Console.WriteLine(" {0} {1}", e.Points[i].X, e.Points[i].Y );
            }
            </code>
            </example>
        </member>
        <member name="T:Leadtools.WinForms.RasterViewerPointsEventArgs">
            <summary>
            Provides data for various RasterImageViewer user interaction events.
            </summary>
            <remarks>
            Use this class when handling the following events:
            <list>
            <item><description><see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionFreehand"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterViewerPointsEventArgs.#ctor">
            <summary>
            Initializes a new RasterViewerPointsEventArgs with default values.
            </summary>
        </member>
        <member name="M:Leadtools.WinForms.RasterViewerPointsEventArgs.#ctor(Leadtools.WinForms.RasterViewerInteractiveStatus,Leadtools.RasterPointCollection)">
            <summary>
            Initializes a new RasterViewerPointsEventArgs with specified values.
            </summary>
            <param name="status">The status of the interactive mode.</param>
            <param name="points">Interactive mode points.</param>
            <example>
            <para><b>VB.NET</b></para>
            <code>
               Imports Leadtools.WinForms
               Imports Leadtools.Codecs
            
               Private Sub MyRasterViewerPointsEventHandler(ByVal sender As System.Object, ByVal e As RasterViewerPointsEventArgs)
                   Console.WriteLine("new set")
                   Dim i, Count As Integer
                   Count = e.Points.Count - 1
                   For i = 0 To Count
                       Console.WriteLine(" {0} {1}", e.Points(i).X, e.Points(i).Y)
                   Next
               End Sub
            
               Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
                   AddHandler RasterImageViewer1.InteractiveRegionFreehand, New RasterViewerPointsEventHandler(AddressOf MyRasterViewerPointsEventHandler)
                   RasterImageViewer1.InteractiveMode = RasterViewerInteractiveMode.Region
                   RasterImageViewer1.InteractiveRegionType = RasterViewerInteractiveRegionType.Freehand
            
                   Dim codec As RasterCodecs = New RasterCodecs
                   RasterCodecs.CodecsPath = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin"
                   RasterImageViewer1.Image = codec.Load("C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\sample5.cmp")
               End Sub
            </code>
            <para><b>C#</b></para>
            <code>
                 using Leadtools.WinForms;
                 using Leadtools.Codecs;
            
                 private void button1_Click(object sender, System.EventArgs e)
                 {
                    rasterImageViewer1.InteractiveRegionFreehand += new RasterViewerPointsEventHandler( MyRasterViewerPointsEventHandler );
                    rasterImageViewer1.InteractiveMode = RasterViewerInteractiveMode.Region;
                    rasterImageViewer1.InteractiveRegionType = RasterViewerInteractiveRegionType.Freehand;
                    RasterCodecs codecs = new RasterCodecs();
                    rasterImageViewer1.Image = codecs.Load( @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\sample5.cmp" );
                 }
                    
                 private void MyRasterViewerPointsEventHandler( object sender, RasterViewerPointsEventArgs e )
                 {
                    RasterViewerPointsEventArgs ee = new RasterViewerPointsEventArgs(e.Status, e.Points);
                    Console.WriteLine("zz");			
                    for( int i = 0; i &lt; ee.Points.Count; i++ )
                       Console.WriteLine(" {0} {1}", ee.Points[i].X, ee.Points[i].Y );
                 }
            </code>
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterViewerPointsEventArgs.Points">
            <summary>
            Returns the current interactive mode points.
            </summary>      
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterViewerPointsEventHandler"/>.</example>
        </member>
        <member name="T:Leadtools.WinForms.RasterViewerRectangleEventHandler">
            <summary>
            Represents the method that will handle the various <see cref="T:Leadtools.WinForms.RasterImageViewer"/> user interaction events.
            </summary>
            <parameters>
            The declaration of your event handler must have the same parameters as the RasterViewerLineEventHandler delegate declaration.
            <param name="sender">The source of the event.</param>
            <param name="e">A RasterViewerLineEventArgs that contains the event data.</param>
            </parameters>
            <remarks>
            Use this delegate to handle the following events:
            <list>
            <item><description><see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveZoomTo"/></description></item>
            <item><description><see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionRectangle"/></description></item>
            <item><description><see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionEllipse"/></description></item>
            </list>
            </remarks>
            <example>
            <para><b>VB.NET</b></para>
            <code>
            Private Sub MyRasterViewerRectangleEventHandler(ByVal sender As System.Object, ByVal e As RasterViewerRectangleEventArgs)
               Console.WriteLine(" {0} {1} {2} {3}", e.Rectangle.Left, e.Rectangle.Right, e.Rectangle.Top, e.Rectangle.Bottom)
            End Sub
            
            Private Sub Button4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button4.Click
               AddHandler RasterImageViewer1.InteractiveRegionRectangle, New RasterViewerRectangleEventHandler(AddressOf MyRasterViewerRectangleEventHandler)
               RasterImageViewer1.InteractiveMode = RasterViewerInteractiveMode.Region
               RasterImageViewer1.InteractiveRegionType = RasterViewerInteractiveRegionType.Rectangle
            
               Dim codec As RasterCodecs = New Leadtools.Codecs.RasterCodecs
               RasterCodecs.CodecsPath = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin"
               RasterImageViewer1.Image = codec.Load("C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\sample5.cmp")
            End Sub
            </code>
            <para><b>C#</b></para>
            <code>
            rasterImageViewer1.InteractiveRegionRectangle += new RasterViewerRectangleEventHandler( MyRasterViewerRectangleEventHandler );
            rasterImageViewer1.InteractiveMode = RasterViewerInteractiveMode.Region;
            rasterImageViewer1.InteractiveRegionType = RasterViewerInteractiveRegionType.Rectangle;
            RasterCodecs codecs = new RasterCodecs();
            rasterImageViewer1.Image = codecs.Load( @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\sample5.cmp" );
               
            private void MyRasterViewerRectangleEventHandler( object sender,	RasterViewerRectangleEventArgs e )
            {
               Console.WriteLine(" {0} {1} {2} {3}", e.Rectangle.Left, e.Rectangle.Right, e.Rectangle.Top, e.Rectangle.Bottom );
            }
            </code>
            </example>
        </member>
        <member name="T:Leadtools.WinForms.RasterViewerRectangleEventArgs">
            <summary>
            Provides data for various RasterImageViewer user interaction events.
            </summary>
            <remarks>
            Use this class when handling the following events:
            <list>
            <item><description><see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveZoomTo"/></description></item>
            <item><description><see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionRectangle"/></description></item>
            <item><description><see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionEllipse"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Leadtools.WinForms.RasterViewerRectangleEventArgs.#ctor">
            <summary>
            Initializes a new RasterViewerRectangleEventArgs with default values.
            </summary>
        </member>
        <member name="M:Leadtools.WinForms.RasterViewerRectangleEventArgs.#ctor(Leadtools.WinForms.RasterViewerInteractiveStatus,System.Drawing.Rectangle)">
            <summary>
            Initializes a new RasterViewerRectangleEventArgs with specified values.
            </summary>
            <param name="status">The status of the interactive mode.</param>
            <param name="rc">Interactive mode rectangle.</param>
            <example>
            <para><b>VB.NET</b></para>
            <code>
               Imports Leadtools.WinForms
               Imports Leadtools.Codecs
            
               Private Sub MyRasterViewerRectangleEventHandler(ByVal sender As System.Object, ByVal e As RasterViewerRectangleEventArgs)
            
                   Dim ee As RasterViewerRectangleEventArgs = New RasterViewerRectangleEventArgs(e.Status, e.Rectangle)
                   Console.WriteLine(" {0} {1} {2} {3}", e.Rectangle.Left, e.Rectangle.Right, e.Rectangle.Top, e.Rectangle.Bottom)
               End Sub
            
               Private Sub Button4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button4.Click
                   AddHandler RasterImageViewer1.InteractiveRegionRectangle, New RasterViewerRectangleEventHandler(AddressOf MyRasterViewerRectangleEventHandler)
                   RasterImageViewer1.InteractiveMode = RasterViewerInteractiveMode.Region
                   RasterImageViewer1.InteractiveRegionType = RasterViewerInteractiveRegionType.Rectangle
            
                   Dim codec As RasterCodecs = New RasterCodecs
                   RasterCodecs.CodecsPath = "C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Bin"
                   RasterImageViewer1.Image = codec.Load("C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\sample5.cmp")
               End Sub
            </code>
            <para><b>C#</b></para>
            <code>
                 using Leadtools.WinForms;
                 using Leadtools.Codecs;
            
                 private void button4_Click(object sender, System.EventArgs e)
                 {
                    rasterImageViewer1.InteractiveRegionRectangle += new RasterViewerRectangleEventHandler( MyRasterViewerRectangleEventHandler );
                    rasterImageViewer1.InteractiveMode = RasterViewerInteractiveMode.Region;
                    rasterImageViewer1.InteractiveRegionType = RasterViewerInteractiveRegionType.Rectangle;
                    RasterCodecs codecs = new RasterCodecs();
                    rasterImageViewer1.Image = codecs.Load( @"C:\Program Files\LEAD Technologies, Inc\Leadtools .NET Class Library\Images\sample5.cmp" );
                 }               
                 private void MyRasterViewerRectangleEventHandler( object sender,	RasterViewerRectangleEventArgs e )
                 {
                    RasterViewerRectangleEventArgs ee = new RasterViewerRectangleEventArgs(e.Status, e.Rectangle);
                    Console.WriteLine(" {0} {1} {2} {3}", ee.Rectangle.Left, ee.Rectangle.Right, ee.Rectangle.Top, ee.Rectangle.Bottom);
                 }
            </code>
            </example>
        </member>
        <member name="P:Leadtools.WinForms.RasterViewerRectangleEventArgs.Rectangle">
            <summary>
            Returns the current interactive mode rectangle.
            </summary>      
            <example>Refer to <see cref="T:Leadtools.WinForms.RasterViewerRectangleEventHandler"/>.</example>
        </member>
    </members>
</doc>
